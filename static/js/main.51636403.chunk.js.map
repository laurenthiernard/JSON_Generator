{"version":3,"sources":["utils.js","components/Control.js","components/SimpleTabs.js","components/SelectSearchable.js","components/Modal.js","layout.js","App.js","serviceWorker.js","index.js","components/SelectSearchable.module.scss","components/Modal.module.scss"],"names":["getUniqID","pLength","random","window","btoa","Math","Date","getTime","substring","toLocaleLowerCase","Control","props","id","controlObj","ElementId","type","Type","reorderable","isFixed","className","icon","faArrowUp","onClick","moveUp","faArrowDown","moveDown","onClickHandler","pType","faAudioDescription","faFileAlt","faHandPointDown","faWeight","faToggleOn","faCheckSquare","faListUl","faCalendarAlt","faImage","faSpellCheck","faGenderless","faCircle","faBars","faTable","getIcon","deleteButton","delete","faTrashAlt","title","footer","style","backgroundColor","BackgroundColor","BackgroundColorSelected","selectedControl","indexOf","value","Id","disabled","Title","subcontrolsHTMLElements","cssRows","cssColumns","i","Rows","rowElement","Elements","j","colElement","undefined","newChildControl","key","slotContent","Object","entries","length","push","Columns","display","gridTemplateColumns","gridTemplateRows","elementJson","controlElement","subcontrolsHTML","map","element","getSubcontrols","SimpleTabs","useState","activeTab","setActiveTab","tabButton","tabs","tab","index","useEffect","dispatchIndex","SelectSearchable","keyword","setKeyword","items","filteredList","filter","item","toLowerCase","includes","initialIsVisible","isVisible","setIsVisible","ref","useRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","useVisible","onClickItemHandler","pEvent","pItem","stopPropagation","selectedItems","findIndex","onSelectItem","styles","selectSearchable_Container","selectSearchable_Header","e","selectSearchable_SelectedContainer","selectSearchable_SelectedItem","selectedItem_delete","faTimes","selectSearchable_Trigger","faAngleDown","faAngleUp","position","selectSearchable_List","selectSearchable_SearchContainer","onChange","selectSearchable_ItemsContainer","selectItem","selectedItem","selectSearchable_SelectedItem_Selected","Modal","visibility","toggleVisibility","message","css","backdrop","springBackdropProps","useSpring","opacity","from","zIndex","config","gentle","springModalProps","top","stiff","backdropStyle","div","modalBackdrop","modalBackdrop_freeze","modalContainer","modalClose","modalHeader","faExclamationTriangle","modalContent","modalFooter","modalBtn","initLayout","isResizingSidebar","isNavBarCollapsed","sidebarWidth","sidebarHandle","querySelector","navigation","layout","pageWidth","innerWidth","navigationSections","querySelectorAll","collapseNavigation","mouseDownEvent","forEach","section","classList","add","expandNavigation","remove","pWidth","min","max","parseInt","clientX","idsCollection","idsLoadedList","Set","App","initialJson","Sections","SectionId","savedJson","JSON","parse","localStorage","getItem","json","setJson","currentSectionIndex","setCurrentSectionIndex","setSelectedControl","isValidId","setIsValidId","idList","setIdList","usedTemplateList","setUsedTemplateList","mode","setMode","currentKeyword","setCurrentKeyword","setCurrentKeyboard","currentSelectedValue","setCurrentSelectedValue","currentData","setCurrentData","setSelectedListDataIndex","setImageList","isModalDocketVisible","setIsModalDocketVisible","modalError","setModalError","databaseFieldLocation","to","singleUseElements","setItem","stringify","controlsHandler","dataTransfer","setData","addToNewSection","pElement","pChildren","newSection","getNewSection","child","removeSection","sections","unregisterControlId","hasOwnProperty","subitem","subindex","subsubitem","subsubindex","pTitle","renameSectionTitle","sectionTitle","getNewElement","pIsMatrix","pIsMatrixButton","pIsRepeatable","matrixElementsInit","getDefaultID","Selection","XAxisName","YAxisName","Legend","ShowLegend","LegendValuesX","Name","Values","LegendValuesY","getElementFromElementId","pElementID","currentSection","foundItem","getElementsFromType","getCurrentSection","deleteElementFromId","pElementId","console","log","unregisterControlChildrenId","jsonToUpdate","elementsToFilter","elementsIndex","newElements","getParentElementFromId","validateId","pID","getElementsFromId","initButtonsProperty","Buttons","Button","Label","initFormatProperty","Format","initDefaultValues","CommentValue","registerControlId","pControl","collection","idIndex","idObject","prefix","idPosition","positionNumber","slice","toUpperCase","newId","Array","onSelectControlHandler","onJsonChangeHandler","currentValue","getElementById","moveElement","pParentElement","pDirection","pIsSubControl","container","splice","deleteKeyword","pKeyword","keywordIndex","Keywords","deleteIdValue","AssociatedId","names","deleteData","pData","dataIndex","Data","OptionedControls","optionIndex","SelectedString","setControlID","IDvalue","setControlTitle","setControlTitle2","Title2","setControlHasUnderLine","HasUnderLine","checked","setControlIsVisible","IsVisible","setControlApiValue","Api","setControlEntryTitle","EntryTitle","setControlCommentValue","setControlButtonLabel","btnIndex","setControlBackgroundColor","setControlBackgroundColorSelected","setControlMatrixBackgroundColor","setControlMatrixBackgroundColorSelected","setControlValidationMessage","ValidationMessage","setControlMandatory","Mandatory","setControlAddHour","AddHour","setControlAddDay","AddDay","setControlAddMonth","AddMonth","setControlFormatDateTime","FormatDateTime","setControlAssociatedId","setControlIsLabelVisible","IsLabelVisible","setControlIsButtonDisabled","IsButtonDisabled","setControlShowComment","ShowComment","setControlCollapsible","Collapsible","IsCollapsed","setControlIsCollapsed","setControlValue","Value","setControlIncludeTitle","IncludeTitle","setControlHideNA","HideNA","setControlKeywords","keys","setControlData","setControlDetails","Details","setMatrixSize","pSize","row","gridRowElement","isRowEmpty","col","activeRows","gridrow","activeCols","isDocketNumberButton","boardEdit","faFolderPlus","sectionToDuplicate","duplicateSection","faClone","confirm","deleteJsonHandler","sectionNavigation","onDragOver","preventDefault","onDrop","elementName","getData","targetID","parentID","isValidElement","alert","newElement","droppedPosition","lastIndexOf","pDefaultValues","addAsFirstSection","addToCurrentSection","readOnly","placeholder","reorderedSections","moveSectionLeft","faArrowLeft","faTrash","moveSectionRight","faArrowRight","currentSectionToRender","DatabaseField","control","parentElement","moveUpHandler","moveDownHandler","getControl","getHTML","jsonPreview","src","theme","displayDataTypes","iconStyle","enableClipboard","errorDuplicate","faExclamationCircle","propertiesPanel","pSelectedControl","images","keyWordsList","globalProperties","htmlFor","name","Boolean","defaultValue","setControlUniqueValue","setControlColumns","setControlRows","legendValuesX","legendValuesY","pPos","setControlLegendValuesX","setControlLegendValuesY","pop","setControlColumnsLegend","setControlRowsLegend","setControlXAxisName","setControlYAxisName","setControlSelection","setControlShowLegend","Keys","option","apiName","DocketID","setControlApi","IncludePhoneNumber","setControlIncludePhoneNumber","IncludeEmail","setControlIncludeEmail","IncludeEmployeeNo","setControlIncludeEmployeeNo","IncludePosition","setControlIncludePosition","IncludeDepartment","setControlIncludeDepartment","IncludeBillingClassification","setControlIncludeBillingClassification","IncludeBusinessNumber","setControlIncludeBusinessNumber","IncludeAbbreviation","setControlIncludeAbbreviation","IncludeCode","setControlIncludeCode","setApiDocketNumber","associatedIds","idsList","setControlDefaultValue","dataList","data","optionedControlIndex","selectedIds","Controls","keywordId","Number","keywordClickHandler","pItems","pSelected","optionValueIndex","optionValue","Index","setControlOptionedControls","action","onSubmit","defaultValueList","SelectedValue","setControlSelectedValue","alt","width","Size","setControlSize","GalleryExtrack","setControlGalleryExtrack","GalleryPhone","setControlGalleryPhone","pFile","imageData","filesize","size","toFixed","fileReader","FileReader","onload","result","replace","readAsDataURL","reloadControl","setTimeout","setControlImageSingle","files","AllowMarkup","setControlAllowMarkup","DisplayOnly","setControlDisplayOnly","FontSize","setControlFontSize","Margin","setControlMargin","FontAttributes","setControlFontAttributes","keyboardOptions","kbVarChar","VarChar","setControlVarChar","kbLines","Lines","setControlLines","kbDecimal","Decimal","setControlDecimal","kbMin","Min","setControlMin","kbMax","Max","setControlMax","Keyboard","docketValue","IsEnabled","setControlIsEnabled","WarningMessage","Warning","setControlWarningMessage","setControlWarning","setControlKeyboard","selectedType","setTextDocketNumber","databasefieldFrom","setControlValidFrom","databasefieldTo","setControlValidTo","DateValue","IsBlank","setControlDateValue","setControlDateIsBlank","TimeValue","setControlTimeValue","setControlTimeIsBlank","DateTimeValue","setControlDateTimeDateValue","setControlDateTimeTimeValue","setControlDateTimeIsBlank","getPropertiesPanel","click","faUpload","createElement","setAttribute","encodeURIComponent","jsonFileName","body","appendChild","removeChild","saveJsonHandler","faFileCode","accept","file","reader","onloadend","source","newData","newSource","Base64","decode","IsEnableToImport","isInValidFile","err","loadJsonHandler","select","execCommand","faCopy","jsonOutput","navigator","clipboard","readText","then","text","Event","catch","pasteJsonHandler","faPaste","faCog","onDragStart","draggable","faStream","faLightbulb","pMode","pIndex","simpleTabsHandler","cols","rows","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.51636403.chunk.js","sourcesContent":["export function getUniqID(pLength) {\n  let random = () => window.btoa(Math.random()*(new Date().getTime())*1).substring(4, 9)\n  return `${random()}-${random()}`.substring(0, pLength).toLocaleLowerCase()\n}","import React from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport {\n  faWeight, faSpellCheck,\n  faCalendarAlt, faTrashAlt,\n  faAudioDescription, faToggleOn,\n  faSortNumericUp, faGenderless,\n  faImage, faImages, faListUl,\n  faList, faFileAlt, faClock,\n  faCheckSquare, faHandPointDown,\n  faSearch, faCircle, faAd,\n  faMailBulk, faPlus, faBars,\n  faUserCircle, faTable, faLayerGroup,\n  faEdit, faArrowUp, faArrowDown,\n} from \"@fortawesome/free-solid-svg-icons\"\n\nimport { getUniqID } from './../utils'\n\nexport default function Control(props) {\n  const id = props.controlObj.ElementId\n  const type = props.controlObj.Type\n\n  // const clickHandlerRef = props.onClickHandler\n\n  // console.log(`--->: Control -> type`, props.controlObj)\n  // console.log(`--->: Control -> props.selectedControl`, props.selectedControl)\n\n  function getSubcontrols() {\n    let subcontrolsHTMLElements = []\n    let cssRows = ''\n    let cssColumns = ''\n\n    switch (type) {\n      case \"Matrix\":\n\n        for (let i = 0; i < props.controlObj.Rows; i++) {\n          // let gridRowElement = {Type: \"GridRow\", ElementID: getUniqID(), Elements: []}\n          // props.controlObj.Elements[i] = gridRowElement\n\n          const rowElement = props.controlObj.Elements[i]\n          // console.log(`--->: getSubcontrols -> rowElement`, rowElement)\n          cssRows += '1fr '\n          cssColumns = ''\n\n          for (let j = 0; j < props.controlObj.Columns; j++) {\n            const colElement = (rowElement.Elements !== undefined) ? rowElement.Elements[j] : {}\n            // console.log(`--->: getSubcontrols -> new control: `, colElement)\n            const newChildControl =\n              <Control\n                controlObj={colElement}\n                selectedControl={props.selectedControl}\n                isFixed={true}\n                onClickHandler={() => props.onClickHandler(colElement)}\n                // onClickHandler={() => props.onSelectControlHandler(colElement)}\n                delete={(colElement) => props.delete(colElement)}\n                key={colElement.ElementId} />\n            // key={`matrix-sub${i}${j}`} />\n\n            const slotContent = (Object.entries(colElement).length === 0 || colElement === undefined) ? 'Add control' : newChildControl\n            // console.log(`--->: getSubcontrols -> slotContent`, slotContent)\n            cssColumns += '1fr '\n            subcontrolsHTMLElements.push(\n              <div\n                id={`${id}-matrix-row${i}-col${j}`}\n                key={`matrix${i}${j}`}\n                className=\"matrix-box\">{slotContent}\n              </div>)\n          }\n        }\n        return <div className=\"control-footer\" style={{ display: 'grid', gridTemplateColumns: cssColumns, gridTemplateRows: cssRows }}>{subcontrolsHTMLElements}</div>\n\n      case \"Matrix.Button\":\n        // console.log('---> Control: ', props.controlObj)\n        for (let i = 0; i < props.controlObj.Rows; i++) {\n          const rowElement = props.controlObj.Elements[i]\n          // console.log(`--->: getSubcontrols -> rowElement`, rowElement)\n\n          cssRows += '1fr '\n          cssColumns = ''\n\n          for (let j = 0; j < props.controlObj.Columns; j++) {\n            const colElement = (rowElement.Elements !== undefined) ? rowElement.Elements[j] : {}\n            // console.log(`--->: Adjust row and cols: `, props.controlObj)\n\n            cssColumns += '1fr '\n\n            let elementJson = props.controlObj.Elements[i].Elements[j]\n            // console.log(`--->: getSubcontrols -> elementJson`, elementJson)\n\n\n            if (elementJson.Type === undefined) {\n              elementJson = {\n                ...colElement,\n                Id: `BR${i + 1}C${j + 1}`,\n                \"ElementId\": getUniqID(),\n                \"Type\": \"M.Button\"\n              }\n              props.controlObj.Elements[i].Elements[j] = elementJson\n            }\n\n            const slotContent = <Control\n              controlObj={elementJson}\n              selectedControl={props.selectedControl}\n              isFixed={true}\n              onClickHandler={() => props.onClickHandler(elementJson)}\n              key={elementJson.ElementId}\n            />\n\n            subcontrolsHTMLElements.push(\n              <div\n                id={`${id}-matrix-row${i}-col${j}`}\n                key={`matrix${i}${j}`}\n                className=\"matrix-box matrixbutton\">{slotContent}\n              </div>)\n          }\n        }\n\n        return <div className=\"control-footer\" style={{ display: 'grid', gridTemplateColumns: cssColumns, gridTemplateRows: cssRows }}>{subcontrolsHTMLElements}</div>\n      case \"Repeatable\":\n      case \"SignatureSignOnOff\":\n      case \"Document.Summary2\":\n      case \"Document.Summary3\":\n      case \"Document.Summary4\":\n      case \"Emailregister\":\n      case \"Smsregister\":\n      case \"Document.Summary\":\n        for (let i = 0; i < props.controlObj.Elements.length; i++) {\n          const controlElement = props.controlObj.Elements[i]\n          const newChildControl =\n            <Control\n              controlObj={controlElement}\n              selectedControl={props.selectedControl}\n              isFixed={false}\n              onClickHandler={() => props.onClickHandler(controlElement)}\n              moveUp={(controlElement) => props.moveUp(controlElement, true)}\n              moveDown={(controlElement) => props.moveDown(controlElement, true)}\n              delete={(controlElement) => props.delete(controlElement)}\n              key={controlElement.ElementId} />\n\n          // console.log(`--->: getSubcontrols -> newChildControl`, newChildControl)\n          subcontrolsHTMLElements.push(newChildControl)\n        }\n        // console.log(`--->: getSubcontrols -> subcontrolsHTMLElements`, subcontrolsHTMLElements)\n        // Repeatable\n        const subcontrolsHTML = subcontrolsHTMLElements.map(element => element)\n\n        // const slotContent = (Object.entries(colElement).length === 0 || colElement === undefined) ? 'Add control' : newChildControl\n        return <>\n          <div id={`${id}-repeatable-area`} className=\"control-footer-addarea\">Add controls</div>\n          <div id={`${id}-repeatable`} className=\"control-footer\">{subcontrolsHTML}</div>\n        </>\n\n      // case \"Document.Summary\":\n      // case \"Document.Summary2\":\n      // case \"Document.Summary3\":\n      // case \"Document.Summary4\":\n      // case \"Emailregister\":\n      // case \"Smsregister\":\n      //   // console.log('---> ', props.controlObj.Elements)\n      //   const children = props.controlObj.Elements.map(item => (\n      //     <Control\n      //       controlObj={item}\n      //       selectedControl={props.selectedControl}\n      //       isFixed={false}\n      //       onClickHandler={() => props.onClickHandler(item)}\n      //       // onClickHandler={() => props.onSelectControlHandler(colElement)}\n      //       // delete={() => props.delete(item)}\n      //       key={item.ElementId} />))\n      //   return <div className=\"control-footer\">{children}</div>\n\n      default:\n        break\n    }\n  }\n\n  function getIcon(pType) {\n    switch (pType) {\n      case \"Label\":\n      case \"DocumentSummaryGrid\":\n        return faAudioDescription\n      case \"Document.TableOfContents\":\n      case \"Document.Summary\":\n      case \"Document.Summary2\":\n      case \"Document.Summary3\":\n      case \"Document.Summary4\":\n        return faFileAlt\n      case \"Button.Submit.Register\":\n      case \"Button.View.Document\":\n      case \"Button.Closeout\":\n      case \"Button.Send.SMS\":\n      case \"Button.Send.Email\":\n      case \"Button.Add.Email\":\n      case \"Button.Add.SMS\":\n      case \"Button.Add.Signature\":\n      case \"Button.Add.ReportDate\":\n        return faHandPointDown\n      case \"API\":\n      case \"Signature.Date\":\n      case \"Signature.DateTime\":\n        return faWeight\n      case \"SingleBoolean\":\n      case \"Boolean\":\n        return faToggleOn\n      case \"Checkbox\":\n        return faCheckSquare\n      case \"List.Multicontrol\":\n        return faListUl\n      case \"Date\":\n      case \"DateTime\":\n        return faCalendarAlt\n      case \"Image\":\n      case \"Image.Single\":\n        return faImage\n      case \"QRScanner\":\n      case \"QRScanner.List\":\n      case \"Signature\":\n        return faSpellCheck\n      case \"Trilean\":\n        return faGenderless\n      case \"Trilean.Label\":\n        return faCircle\n      case \"Repeatable\":\n        return faBars\n      default:\n        return faTable\n    }\n  }\n\n  const reorderable = (props.isFixed) ? '' : <div className=\"control-reordering\">\n    <FontAwesomeIcon icon={faArrowUp}\n      onClick={() => props.moveUp(props.controlObj, false)}\n    />\n    <FontAwesomeIcon icon={faArrowDown}\n      onClick={() => props.moveDown(props.controlObj, false)}\n    />\n  </div>\n\n  const icon = props.controlObj.Type !== \"M.Button\" ? <div className=\"control-icon\" onClick={props.onClickHandler}>\n    <FontAwesomeIcon icon={getIcon(props.controlObj.Type)} />\n  </div>\n    : ''\n  const deleteButton = props.controlObj.Type !== \"M.Button\" ? <div className=\"control-delete\" onClick={() => props.delete(props.controlObj)}>\n    <FontAwesomeIcon\n      icon={faTrashAlt}\n      title=\"Remove\"\n    /></div>\n    : ''\n  const footer = props.controlObj.Type === \"M.Button\" ? <div className=\"control-footer\" onClick={props.onClickHandler}>\n    <div style={{ backgroundColor: props.controlObj.BackgroundColor }}></div>\n    <div style={{ backgroundColor: props.controlObj.BackgroundColorSelected }}></div>\n  </div>\n    : ''\n\n  return (\n    <div\n      id={id}\n      className={`${props.isFixed ? 'subcontrol' : 'control'}${id === props.selectedControl.ElementId ? ' active-control' : ''}`}\n    >\n      <div className=\"control-header\" onClick={props.onClickHandler}>{props.controlObj.Type !== \"M.Button\" ? props.controlObj.Type : ''}</div>\n      <div className=\"control-content\">\n        {reorderable}\n        {icon}\n        {/* {title} */}\n        <div className={`control-id ${props.controlObj.Type.indexOf('Button') === 0 ? \"hidden\" : ''}`} onClick={props.onClickHandler}>\n          <input type=\"text\" value={props.controlObj.Id || ''} disabled></input>\n        </div>\n        <div className=\"control-title\" onClick={props.onClickHandler}>\n          <input type={props.controlObj.Type.indexOf('Button') === 0 ? \"button\" : \"text\"} value={props.controlObj.Title || props.controlObj.Type || ''} disabled></input>\n        </div>\n        {deleteButton}\n      </div>\n      {footer}\n      {getSubcontrols()}\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\n\nexport default function SimpleTabs(props) {\n\n  const [activeTab, setActiveTab] = useState(0)\n\n  const tabButton = props.tabs.map((tab, index) => {\n    return <button className={`SimpleTabs-tab ${activeTab === index ? 'tab-active' : ''}`} key={index} onClick={() => setActiveTab(index)}>{props.tabs[index].title}</button>\n  })\n\n  useEffect(() => {\n    props.dispatchIndex(activeTab)\n  }, [activeTab])\n\n  return (\n    <div className=\"SimpleTabs-container\">\n      <div className=\"SimpleTabs-header\">\n        {tabButton}\n      </div>\n      {props.tabs[activeTab].tab}\n    </div>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport styles from './SelectSearchable.module.scss'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleUp, faAngleDown, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons'\n\n\nfunction useVisible(initialIsVisible) {\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n  const ref = useRef(null);\n\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsVisible(false);\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n    }\n  }, [])\n  return { ref, isVisible, setIsVisible }\n}\n\nexport default function SelectSearchable(props) {\n\n  const [keyword, setKeyword] = useState('')\n\n  const items = props.items\n  const filteredList = keyword.length > 0 ? items.filter(item => item.toLowerCase().includes(keyword.toLowerCase())) : items\n\n  const { ref, isVisible, setIsVisible } = useVisible(false);\n\n  function onClickItemHandler(pEvent, pItem) {\n    pEvent.stopPropagation()\n    // console.log(`--->: onClickItemHandler -> pItem`, pItem)\n    const clickedItemIndex = props.selectedItems.findIndex(item => item === pItem)\n\n    if (clickedItemIndex > -1) {\n      props.onSelectItem(props.selectedItems.filter(item => item !== pItem))\n    }\n    else props.onSelectItem([...props.selectedItems, pItem])\n  }\n\n  return (\n    <div className={styles.selectSearchable_Container}>\n      <div className={styles.selectSearchable_Header} onClick={e => setIsVisible(!isVisible)}>\n        <div className={styles.selectSearchable_SelectedContainer}>\n          {props.selectedItems.map((item, index) => <div key={index} className={styles.selectSearchable_SelectedItem}>\n            {item}\n            <span className={styles.selectedItem_delete} onClick={(e) => onClickItemHandler(e, item)}>\n              <FontAwesomeIcon icon={faTimes} />\n            </span>\n          </div>)}\n        </div>\n        <div className={styles.selectSearchable_Trigger}>\n          <FontAwesomeIcon icon={isVisible ? faAngleDown : faAngleUp} />\n        </div>\n      </div>\n      {isVisible && <div style={{ position: 'absolute' }} className={`${styles.selectSearchable_List}`} ref={ref}>\n        <div className={styles.selectSearchable_SearchContainer}>\n          <input type=\"text\" value={keyword} onChange={e => setKeyword(e.target.value)}></input>\n          <FontAwesomeIcon icon={faTimes} onClick={e => setKeyword('')} />\n        </div>\n        <div className={styles.selectSearchable_ItemsContainer}>\n          {filteredList.map((item, index) => <span key={index} className={`${styles.selectItem} ${props.selectedItems.findIndex(selectedItem => item === selectedItem) > -1 ? styles.selectSearchable_SelectedItem_Selected : ''}`} onClick={(e) => onClickItemHandler(e, item)}>{item}</span>)}\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\n","import React, { useEffect } from 'react'\nimport styles from './Modal.module.scss'\n\nimport { useSpring, animated, config } from 'react-spring'\n\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Modal(props) {\n\n  const { visibility, toggleVisibility, message, css, backdrop } = props\n  const springBackdropProps = useSpring(\n    {\n      opacity: visibility ? 1 : 0,\n      from: { opacity: 0, zIndex: 10 },\n      config: config.gentle\n    }\n  )\n  const springModalProps = useSpring(\n    {\n      opacity: visibility ? 1 : 0,\n      top: visibility ? 0 : -25,\n      from: { opacity: 0 },\n      config: config.stiff\n    }\n  )\n\n  function onClickBackdropHandler(pEvent) {\n    if (pEvent.target.id === 'backdrop') toggleVisibility()\n  }\n\n  const backdropStyle = backdrop ? { backgroundColor: backdrop } : ''\n\n  return (\n    <animated.div style={springBackdropProps}>\n      <div\n        id=\"backdrop\"\n        className={`${styles.modalBackdrop} ${visibility ? '' : styles.modalBackdrop_freeze}`}\n        onClick={onClickBackdropHandler}\n        style={backdropStyle}>\n          <animated.div style={springModalProps}>\n            <div\n              className={styles.modalContainer}\n              style={css}>\n              <div className={styles.modalClose} onClick={toggleVisibility}>\n                <FontAwesomeIcon icon={faTimes} />\n              </div>\n              <div className={styles.modalHeader}>\n                <FontAwesomeIcon icon={faExclamationTriangle} />\n              </div>\n              <div className={styles.modalContent}>\n                {message}\n              </div>\n              <div className={styles.modalFooter}>\n                <button className={styles.modalBtn} onClick={toggleVisibility}>OK</button>\n              </div>\n          </div>\n        </animated.div>\n      </div>\n    </animated.div>\n  )\n}\n","\nexport default function initLayout() {\n\n  let isResizingSidebar = false\n  let isNavBarCollapsed = false\n\n  let sidebarWidth = 300\n  let sidebarMinWidth = 150\n  let sidebarMaxWidth = 400\n\n  const breakpoint = 1100\n  const navbarCollapsedWidth = 80\n  const navbarExpandedWidth = 250\n\n  const sidebarHandle = document.querySelector('#sidebarHandle')\n  const navigation = document.querySelector('#navigation')\n  const layout = document.querySelector('#page')\n  let pageWidth = window.innerWidth\n  const navigationSections = document.querySelectorAll('.navigation-section')\n\n  if (pageWidth < breakpoint) collapseNavigation()\n\n  const mouseDownEvent = sidebarHandle.addEventListener('mousedown', (e) => isResizingSidebar = true)\n  document.addEventListener('mouseup', (e) => {\n    isResizingSidebar = false\n    sidebarHandle.removeEventListener('mousedown', mouseDownEvent)\n  })\n  document.addEventListener('mousemove', (e) => {\n    if (isResizingSidebar) {\n      sidebarWidth = Math.min(Math.max(parseInt(pageWidth - e.clientX), sidebarMinWidth), sidebarMaxWidth)\n      setSidebarWidth(sidebarWidth)\n    }\n  })\n\n  function setSidebarWidth(pWidth) {\n    if ((pWidth > sidebarMinWidth) && pWidth < sidebarMaxWidth) {\n      if (!isNavBarCollapsed) {\n        layout.style.gridTemplateColumns = `${navbarExpandedWidth}px auto ${pWidth}px`\n      }\n      else if (isNavBarCollapsed) {\n        layout.style.gridTemplateColumns = `${navbarCollapsedWidth}px auto ${pWidth}px`\n      }\n    }\n  }\n\n  window.addEventListener('resize', (e) => {\n    pageWidth = e.target.innerWidth\n    if (pageWidth < breakpoint && !isNavBarCollapsed) {\n      layout.style.gridTemplateColumns = `${navbarCollapsedWidth}px auto ${sidebarWidth}px`\n      isNavBarCollapsed = !isNavBarCollapsed\n      collapseNavigation()\n    }\n    else if (pageWidth > breakpoint && isNavBarCollapsed) {\n      layout.style.gridTemplateColumns = `${navbarExpandedWidth}px auto ${sidebarWidth}px`\n      isNavBarCollapsed = !isNavBarCollapsed\n      expandNavigation()\n    }\n  })\n\n  navigation.addEventListener('mouseenter', e => {\n    if (pageWidth < breakpoint && isNavBarCollapsed) {\n\n    expandNavigation()\n    }\n  })\n  navigation.addEventListener('mouseleave', e => {\n    if (pageWidth < breakpoint && !isNavBarCollapsed) {\n\n    collapseNavigation()\n    }\n  })\n\n  function collapseNavigation() {\n    navigationSections.forEach(section => section.classList.add(\"collapsed\"))\n    layout.style.gridTemplateColumns = `${navbarCollapsedWidth}px auto ${sidebarWidth}px`\n    isNavBarCollapsed = true\n  }\n  function expandNavigation() {\n    navigationSections.forEach(section => section.classList.remove(\"collapsed\"))\n    layout.style.gridTemplateColumns = `${navbarExpandedWidth}px auto ${sidebarWidth}px`\n    isNavBarCollapsed = false\n  }\n\n\n}\n","/* eslint-disable no-loop-func */\n\nimport React, { useState, useEffect } from 'react';\nimport './App.scss';\n\nimport Control from './components/Control';\nimport SimpleTabs from './components/SimpleTabs';\nimport SelectSearchable from './components/SelectSearchable';\nimport Modal from './components/Modal';\nimport { getUniqID } from './utils';\nimport initLayout from './layout.js';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faStream,\n  faCog,\n  faLightbulb,\n  faTrash,\n  faCopy,\n  faFolderPlus,\n  faClone,\n  faPaste,\n  faExclamationTriangle,\n  faFileCode,\n  faUpload,\n  faArrowRight,\n  faExclamationCircle,\n  faArrowLeft,\n  faTrashAlt,\n  faSleigh,\n  faLessThanEqual,\n  faImage,\n} from '@fortawesome/free-solid-svg-icons';\nimport ReactJson from 'react-json-view';\nimport { Base64 } from 'js-base64';\n\nlet idsCollection = {};\n\n// List of id's to link options in List.Multicontrol\nlet idsLoadedList = new Set();\n\nfunction App() {\n  const saveSessionEnabled = true;\n  let initialJson = {\n    Sections: [{ SectionId: 'mjy5n', Title: 'Section 1', Elements: [] }],\n  };\n  // Check if saved JSON is valid and assign it\n  if (saveSessionEnabled) {\n    const savedJson = JSON.parse(localStorage.getItem('currentJson'));\n    if (savedJson !== null) initialJson = savedJson;\n  }\n\n  const [json, setJson] = useState(initialJson);\n  const [currentSectionIndex, setCurrentSectionIndex] = useState(0);\n  const [selectedControl, setSelectedControl] = useState({});\n  const [isValidId, setIsValidId] = useState(true);\n  const [idList, setIdList] = useState([]);\n  // const [idLoadedList, setIdLoadedList] = useState([])\n  const [usedTemplateList, setUsedTemplateList] = useState([]);\n  const [mode, setMode] = useState('board');\n  const [currentKeyword, setCurrentKeyword] = useState('');\n  const [currentKeyboard, setCurrentKeyboard] = useState('');\n  const [currentSelectedValue, setCurrentSelectedValue] = useState('');\n  const [currentData, setCurrentData] = useState('');\n  const [selectedListDataIndex, setSelectedListDataIndex] = useState(0);\n  const [image, setImage] = useState('');\n  const [imageList, setImageList] = useState([]);\n\n  const [isModalDocketVisible, setIsModalDocketVisible] = useState(false);\n  const [modalError, setModalError] = useState({\n    visibility: false,\n    message: '',\n  });\n\n  let databaseFieldLocation = { from: '', to: '' };\n\n  const singleUseElements = ['Document.TableOfContents', 'Document.Summary', 'Document.Summary2', 'Document.Summary3', 'Document.Summary4', 'Emailregister', 'Smsregister', 'QRScanner.List', 'SignatureSignOnOff'];\n\n  useEffect(() => {\n    initLayout();\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('currentJson', JSON.stringify(json));\n    // console.log('---> json updated: ', JSON.stringify(json))\n  }, [json]);\n\n  /**-------------------------------------------------**\n   * @desc - DRAG AND DROP                         -----*\n   *----------------------------------------------------*/\n\n  let controlsHandler = (e) => {\n    e.dataTransfer.setData('text/plain', e.target.id);\n  };\n  let onDragOverHandler = (e) => {\n    e.preventDefault();\n  };\n  let onDropHandler = (e) => {\n    e.preventDefault();\n    const elementName = e.dataTransfer.getData('text/plain');\n\n    let targetID = e.target.id;\n    let parentID = targetID.substring(0, 11);\n\n    const notAllowedElements = ['Matrix', 'Matrix.Button', 'Repeatable', 'Document.TableOfContents', 'Document.Summary', 'Document.Summary2', 'Document.Summary3', 'Document.Summary4', 'Emailregister', 'Smsregister', 'QRScanner.List', 'SignatureSignOnOff'];\n\n    if (singleUseElements.indexOf(elementName) > -1) setUsedTemplateList([...usedTemplateList, elementName]);\n\n    let isValidElement = true;\n    if (notAllowedElements.findIndex((element) => element === elementName) > -1) {\n      isValidElement = false;\n    }\n\n    // ---------------------------------------------------------------------------- MATRIX : ADD Elements\n    if (targetID.includes('matrix')) {\n      if (!isValidElement) {\n        alert('Control not alowed inside a Matrix');\n        return;\n      }\n      let newElement = getNewElement(elementName);\n      let droppedPosition = {\n        row: targetID.substring(targetID.lastIndexOf('-row') + 4, targetID.lastIndexOf('-col')),\n        col: targetID.substring(targetID.lastIndexOf('-col') + 4, targetID.length),\n      };\n\n      const parentElement = getElementFromElementId(parentID);\n      const elementRow = parentElement.Elements[droppedPosition.row];\n      elementRow.Elements[droppedPosition.col] = newElement;\n\n      const jsonToUpdate = JSON.parse(JSON.stringify(json));\n      setJson({ ...jsonToUpdate });\n    } else if (targetID.includes('repeatable')) {\n      if (!isValidElement) {\n        alert('Control not alowed inside a Repeatable');\n        return;\n      }\n      let newElement = getNewElement(elementName);\n      if (elementName.includes('Trilean.Label')) {\n        // console.log('---> Create a new Trilean.Label: ', newElement)\n        initButtonsProperty(newElement);\n        initDefaultValues(newElement);\n      }\n      const parentElement = getElementFromElementId(parentID);\n      parentElement.Elements.push(newElement);\n\n      const jsonToUpdate = JSON.parse(JSON.stringify(json));\n      setJson({ ...jsonToUpdate });\n    }\n    // ---------------------------------------------------------------------------- TEMPLATES : ADD Elements\n    else {\n      switch (elementName) {\n        case 'Document.TableOfContents':\n          // prependToFirstSection(elementName,\n          addAsFirstSection(elementName, {\n            Type: 'Document.TableOfContents',\n            Title: 'Table Of Contents',\n            Id: 'DocTableOfContents',\n            ElementId: getUniqID(),\n          });\n          break;\n        case 'Document.Summary':\n          addToNewSection('Document Summary', [\n            {\n              Type: 'DocumentSummaryGrid',\n              Title: 'Show Summary',\n              Id: 'DocumentSummaryGrid',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Submit.Register',\n              Id: 'Button.Submit.Register',\n              Title: 'Submit to Register',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.View.Document',\n              Id: 'Button.View.Document',\n              Title: 'View Document',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n        case 'Document.Summary2':\n          addToNewSection('Document Summary', [\n            {\n              Type: 'DocumentSummaryGrid',\n              Title: 'Show Summary',\n              Id: 'DocumentSummaryGrid',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Submit.Register',\n              Title: 'Submit to Register',\n              Id: 'Button.Submit.Register',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Closeout',\n              Title: 'Close out',\n              Id: 'Button.Closeout',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.View.Document',\n              Title: 'View Document',\n              Id: 'Button.View.Document',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n        case 'Document.Summary3':\n          addToNewSection('Document Summary', [\n            {\n              Type: 'DocumentSummaryGrid',\n              Title: 'Show Summary',\n              Id: 'DocumentSummaryGrid',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Submit.Register',\n              Title: 'Submit to Register',\n              Id: 'Button.Submit.Register',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Send.SMS',\n              Title: 'Send SMS',\n              Id: 'Button.Send.SMS',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Send.Email',\n              Title: 'Send Email',\n              Id: 'Button.Send.Email',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.View.Document',\n              Title: 'View Document',\n              Id: 'Button.View.Document',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n        case 'Document.Summary4':\n          addToNewSection('Document Summary', [\n            {\n              Type: 'DocumentSummaryGrid',\n              Title: 'Show Summary',\n              Id: 'DocumentSummaryGrid',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Submit.Register',\n              Title: 'Submit to Register',\n              Id: 'Button.Submit.Register',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Closeout',\n              Title: 'Close out',\n              Id: 'Button.Closeout',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Send.SMS',\n              Title: 'Send SMS',\n              Id: 'Button.Send.SMS',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Send.Email',\n              Title: 'Send Email',\n              Id: 'Button.Send.Email',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.View.Document',\n              Title: 'View Document',\n              Id: 'Button.View.Document',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n        case 'Emailregister':\n          addToNewSection(elementName, [\n            {\n              Type: 'SearchableListEntryDialogEmail',\n              Title: 'Select from Project Directory',\n              Id: 'ContactListEmail',\n              Api: 'ProjectContacts.Email',\n              ValidationMessage: 'Permit Holder Required',\n              AssociatedId: { names: ['ManualEmailName', 'ManualEmailEmail'] },\n              ElementId: getUniqID(),\n            },\n            { Type: 'Label', Title: 'OR', ElementId: getUniqID() },\n            {\n              Type: 'Label',\n              Title: 'Add manually below',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Text',\n              Title: 'Name',\n              Id: 'ManualEmailName',\n              Format: {},\n              ValidationMessage: 'Name Required',\n              Mandatory: false,\n              AssociatedId: { names: ['ManualEmailEmail'] },\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Text',\n              Title: 'Email',\n              Id: 'ManualEmailEmail',\n              Format: {},\n              ValidationMessage: 'Number Required and should be 10 characters long',\n              Mandatory: false,\n              AssociatedId: { names: ['ManualEmailName'] },\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Add.Email',\n              Title: 'Add contact manually',\n              Title2: 'Number',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'SearchableEmailListView',\n              Title: 'Name',\n              Id: 'NameEmailList',\n              Title2: 'Number',\n              Api: 'ProjectContacts',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n        case 'Smsregister':\n          addToNewSection(elementName, [\n            {\n              Type: 'SearchableListEntryDialogSMS',\n              Title: 'Select from Project Directory',\n              Id: 'ContactListSMS',\n              ValidationMessage: 'Permit Holder Required',\n              Api: 'ProjectContacts',\n              AssociatedId: { names: ['ManualSMSName', 'ManualSMSPhone'] },\n              ElementId: getUniqID(),\n            },\n            { Type: 'Label', Title: 'OR', ElementId: getUniqID() },\n            {\n              Type: 'Label',\n              Title: 'Add manually below',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Text',\n              Title: 'Name',\n              Id: 'ManualSMSName',\n              Format: {},\n              ValidationMessage: 'Name Required',\n              Mandatory: false,\n              AssociatedId: { names: ['ManualSMSPhone'] },\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Text',\n              Title: 'Phone No',\n              Id: 'ManualSMSPhone',\n              Format: {},\n              ValidationMessage: 'Number Required and should be 10 characters long',\n              Mandatory: false,\n              AssociatedId: { names: ['ManualSMSName'] },\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Add.SMS',\n              Title: 'Add contact manually',\n              Title2: 'Number',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'SearchableSMSListView',\n              Title: 'Name',\n              Title2: 'Number',\n              Id: 'NameSMSList',\n              Api: 'ProjectContacts',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n        case 'QRScanner.List':\n          addToNewSection(elementName, [\n            // { Type: \"QRScanner.List\", Title: \"QR scanner list\", Id: \"QReSignOnOffScanner\", ElementId: getUniqID() }\n            {\n              Type: 'QRScanner.List',\n              Title: 'QR scanner list',\n              EntryTitle: 'Please click to scan QR code',\n              Id: 'QReSignOnOffScanner',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n        case 'SignatureSignOnOff':\n          addToNewSection(elementName, [\n            // addToCurrentSection(elementName, [\n            {\n              Type: 'Text',\n              Title: 'Name',\n              Id: 'SignatureSignOnOffName',\n              Format: {},\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Signature',\n              Title: 'Please sign above the line',\n              Id: 'SignatureSignOnOffSignature',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Button.Add.Signature',\n              Title: 'Add Signature',\n              ElementId: getUniqID(),\n            },\n            {\n              Type: 'Register.Signatures',\n              Title: 'Signatures',\n              Id: 'SignatureSignOnOff',\n              ElementId: getUniqID(),\n            },\n          ]);\n          break;\n\n        default:\n          addToCurrentSection(elementName);\n          break;\n      }\n    }\n  };\n\n  /**-------------------------------------------------**\n   * @desc - Manage sections                       -----*\n   *----------------------------------------------------*/\n\n  function addToCurrentSection(pElement, pChildren) {\n    // console.log(`--->: newElement: addToCurrentSection -> pElement, pChildren`, pElement, pChildren)\n    let newElement;\n    if (pElement === 'Matrix') newElement = getNewElement(pElement, true);\n    else if (pElement === 'Matrix.Button') newElement = getNewElement(pElement, false, true);\n    else if (pElement === 'Repeatable') newElement = getNewElement(pElement, false, false, true);\n    else if (pElement === 'SignatureSignOnOff') newElement = getNewElement(pElement, false, false, false, pChildren);\n    else if (pElement === 'QRScanner.List') newElement = getNewElement(pElement, false, false, false, pChildren);\n    else newElement = getNewElement(pElement);\n\n    // Special properties\n    if (pElement === 'Trilean.Label') {\n      initButtonsProperty(newElement);\n      initDefaultValues(newElement);\n    }\n    if (pElement === 'Text') initFormatProperty(newElement);\n\n    // Add to section\n    if (json.Sections[currentSectionIndex] !== undefined) {\n      let currentElements = json.Sections[currentSectionIndex].Elements;\n      currentElements.push(newElement);\n      setJson({ Sections: [...json.Sections] });\n    } else {\n      let currentSection;\n      currentSection = getNewSection();\n      currentSection.Elements.push(newElement);\n      setJson({ Sections: [...json.Sections, currentSection] });\n      if (currentSectionIndex > 0) setCurrentSectionIndex(currentSectionIndex + 1);\n    }\n  }\n\n  function addNewSection() {\n    setJson({ Sections: [...json.Sections, getNewSection()] });\n    if (json.Sections.length > 0) setCurrentSectionIndex(json.Sections.length);\n  }\n\n  function addToNewSection(pElement, pChildren) {\n    let newSection = getNewSection(pElement);\n\n    pChildren.forEach((child) => newSection.Elements.push(child));\n\n    setJson({ Sections: [...json.Sections, newSection] });\n    if (json.Sections.length > 0) setCurrentSectionIndex(json.Sections.length);\n  }\n\n  // function prependToFirstSection(pElement, pDefaultValues) {\n  //   const newElement = pDefaultValues\n  //   let currentSection = json.Sections[currentSectionIndex]\n\n  //   if (currentSection !== undefined) {\n  //     const firstSection = json.Sections[0].Elements\n  //     firstSection.unshift(newElement)\n\n  //     setJson({ Sections: [...json.Sections] })\n  //     setCurrentSectionIndex(0)\n  //     setSelectedControl(newElement)\n  //   }\n  //   else {\n  //     currentSection = getNewSection()\n  //     currentSection.Elements.unshift(newElement)\n  //     json.Sections.push(currentSection)\n  //     setJson({ Sections: [...json.Sections] })\n  //     setSelectedControl(newElement)\n  //   }\n  // }\n\n  function addAsFirstSection(pElement, pDefaultValues) {\n    const title = pElement === 'Document.TableOfContents' ? 'Table Of Contents' : undefined;\n    let newSection = getNewSection(title);\n    newSection.Elements.push(pDefaultValues);\n\n    setJson({ Sections: [newSection, ...json.Sections] });\n    setCurrentSectionIndex(0);\n\n    // let currentSection = json.Sections[0]\n  }\n\n  // TODO - REMOVE IDs ON THE DUPLICATED SECTION CONTROLS -----------------------------------------------------//\n  function duplicateSection() {\n    if (json.Sections[currentSectionIndex] !== undefined) {\n      // Deep copy\n      let sectionToDuplicate = JSON.parse(JSON.stringify(json.Sections[currentSectionIndex]));\n\n      sectionToDuplicate.SectionId = getUniqID(5);\n      sectionToDuplicate.Title = `${json.Sections[currentSectionIndex].Title}-copy`;\n      sectionToDuplicate.Elements.forEach((item) => {\n        if (item.ElementId === undefined || item.ElementId.length > 0) item.ElementId = getUniqID(11);\n        if (item.Id !== undefined) item.Id = `${item.Id}-copy`;\n        if (item.Elements) {\n          item.Elements.forEach((subitem) => {\n            if (subitem.ElementId === undefined || subitem.ElementId.length > 0) subitem.ElementId = getUniqID(11);\n            if (subitem.Id !== undefined) subitem.Id = `${subitem.Id}-copy`;\n            if (subitem.Elements) {\n              subitem.Elements.forEach((subsubitem) => {\n                if (subsubitem.Id !== undefined) subsubitem.Id = `${subsubitem.Id}-copy`;\n                if (subsubitem.ElementId !== undefined) subsubitem.ElementId = getUniqID(11);\n              });\n            }\n          });\n        }\n      });\n\n      setJson({\n        Sections: [...json.Sections.slice(0, currentSectionIndex + 1), sectionToDuplicate, ...json.Sections.slice(currentSectionIndex + 1)],\n      });\n      setCurrentSectionIndex(currentSectionIndex + 1);\n    }\n  }\n\n  function removeSection() {\n    let sections = json.Sections.filter((section, index) => {\n      if (index !== currentSectionIndex) {\n        return true;\n      } else {\n        unregisterSectionControls(json.Sections[index]);\n        return false;\n      }\n    });\n\n    setCurrentSectionIndex(json.Sections.length - 2);\n    setJson({ Sections: [...sections] });\n  }\n\n  function moveSectionLeft() {\n    if (currentSectionIndex > 0) {\n      const reorderedSections = json.Sections;\n      reorderedSections.splice(currentSectionIndex, 0, reorderedSections.splice(currentSectionIndex - 1, 1)[0]);\n      setCurrentSectionIndex(currentSectionIndex - 1);\n      setJson({ Sections: [...reorderedSections] });\n    }\n  }\n\n  function moveSectionRight() {\n    if (currentSectionIndex + 1 < json.Sections.length) {\n      const reorderedSections = json.Sections;\n      reorderedSections.splice(currentSectionIndex, 0, reorderedSections.splice(currentSectionIndex + 1, 1)[0]);\n      setCurrentSectionIndex(currentSectionIndex + 1);\n      setJson({ Sections: [...reorderedSections] });\n    }\n  }\n\n  /**-------------------------------------------------**\n   * @desc - Utilities                             -----*\n   *----------------------------------------------------*/\n\n  function getNewSection(pTitle) {\n    const title = renameSectionTitle(pTitle);\n    const sectionTitle = title === undefined ? `Section ${json.Sections.length + 1 || 1}` : title;\n    return {\n      SectionId: getUniqID(5),\n      Title: sectionTitle,\n      Elements: [],\n    };\n  }\n\n  function getNewElement(pElement, pIsMatrix, pIsMatrixButton, pIsRepeatable, pChildren) {\n    // Repeatable children length are not known\n    const matrixElementsInit = [\n      {\n        Type: 'GridRow',\n        // ToDo: generate unique Id\n        ElementId: getUniqID(),\n        Elements: [{}],\n      },\n    ];\n\n    if (pIsMatrix) {\n      return {\n        Type: pElement,\n        Id: getDefaultID(pElement),\n        ElementId: getUniqID(11),\n        Columns: '1',\n        Rows: '1',\n        Elements: matrixElementsInit,\n      };\n    }\n    if (pIsMatrixButton) {\n      return {\n        Type: pElement,\n        Id: getDefaultID(pElement),\n        ElementId: getUniqID(11),\n        Columns: '1',\n        Rows: '1',\n        Elements: matrixElementsInit,\n        Title: '',\n        Selection: 'single',\n        XAxisName: '',\n        YAxisName: '',\n        Legend: {\n          ShowLegend: false,\n          LegendValuesX: { Name: '', Values: [] },\n          LegendValuesY: { Name: '', Values: [] },\n        },\n      };\n    }\n    if (pIsRepeatable) {\n      return {\n        Type: pElement,\n        Id: getDefaultID(pElement),\n        ElementId: getUniqID(11),\n        Elements: [],\n      };\n    } else {\n      if (pChildren) {\n        return {\n          Type: pElement,\n          ElementId: getUniqID(11),\n          Elements: pChildren,\n        };\n      } else if (pElement.includes('Button')) {\n        if (pElement === 'Button.Add.DocketNumber')\n          return {\n            Type: pElement,\n            Id: 'Button.Add.DocketNumber',\n            ElementId: getUniqID(11),\n            Title: 'Delivery Docket Number',\n          };\n        else\n          return {\n            Type: pElement,\n            ElementId: getUniqID(11),\n          };\n      } else {\n        return {\n          Type: pElement,\n          Id: getDefaultID(pElement),\n          ElementId: getUniqID(11),\n        };\n      }\n    }\n  }\n\n  function getElementFromElementId(pElementID) {\n    const currentSection = json.Sections[currentSectionIndex];\n    let foundItem = {};\n\n    currentSection.Elements.forEach((item) => {\n      if (item.hasOwnProperty('Elements')) {\n        item.Elements.forEach((subitem) => {\n          if (subitem.hasOwnProperty('Elements')) {\n            subitem.Elements.forEach((subsubitem) => {\n              if (subsubitem.ElementId === pElementID) {\n                // console.log('---> Trouvé subsubitem: ', subsubitem)\n                foundItem = subsubitem;\n              }\n            });\n          }\n\n          if (subitem.ElementId === pElementID) {\n            // console.log('---> Trouvé subitem: ', subitem)\n            foundItem = subitem;\n          }\n        });\n      }\n\n      if (item.ElementId === pElementID) {\n        // console.log('---> Trouvé item: ', item)\n        foundItem = item;\n      }\n    });\n    return foundItem;\n  }\n\n  function getElementsFromId(pID) {\n    let foundItem = [];\n    json.Sections.forEach((section) => {\n      section.Elements.forEach((item) => {\n        if (item.hasOwnProperty('Elements')) {\n          item.Elements.forEach((subitem) => {\n            if (subitem.hasOwnProperty('Elements')) {\n              subitem.Elements.forEach((subsubitem) => {\n                if (subsubitem.Id === pID) {\n                  // console.log('---> Trouvé subsubitem: ', subsubitem)\n                  foundItem.push(subsubitem);\n                }\n              });\n            }\n\n            if (subitem.Id === pID) {\n              // console.log('---> Trouvé subitem: ', subitem)\n              foundItem.push(subitem);\n            }\n          });\n        }\n\n        if (item.Id === pID) {\n          // console.log('---> Trouvé item: ', item)\n          foundItem.push(item);\n        }\n      });\n    });\n\n    return foundItem;\n  }\n\n  function getElementsFromType(pType) {\n    let foundItem = [];\n    json.Sections.forEach((section) => {\n      section.Elements.forEach((item) => {\n        if (item.hasOwnProperty('Elements')) {\n          item.Elements.forEach((subitem) => {\n            if (subitem.hasOwnProperty('Elements')) {\n              subitem.Elements.forEach((subsubitem) => {\n                if (subsubitem.Type === pType) {\n                  // console.log('---> Trouvé subsubitem: ', subsubitem)\n                  foundItem.push(subsubitem);\n                }\n              });\n            }\n\n            if (subitem.Type === pType) {\n              // console.log('---> Trouvé subitem: ', subitem)\n              foundItem.push(subitem);\n            }\n          });\n        }\n\n        if (item.Type === pType) {\n          // console.log('---> Trouvé item: ', item)\n          foundItem.push(item);\n        }\n      });\n    });\n\n    return foundItem;\n  }\n\n  function getCurrentSection() {\n    return json.Sections[currentSectionIndex];\n  }\n\n  function deleteElementFromId(pElementID) {\n    unregisterControlId(pElementID);\n\n    unregisterControlChildrenId(pElementID);\n\n    // console.log('remove this guy: ', getElementFromElementId(pElementID))\n\n    let jsonToUpdate = { ...json };\n    setSelectedControl({ ElementId: 0 });\n\n    const currentSection = jsonToUpdate.Sections[currentSectionIndex];\n\n    currentSection.Elements.forEach((item, index) => {\n      if (item.hasOwnProperty('Elements')) {\n        item.Elements.forEach((subitem, subindex) => {\n          if (subitem.hasOwnProperty('Elements')) {\n            subitem.Elements.forEach((subsubitem, subsubindex) => {\n              if (subsubitem.ElementId === pElementID) {\n                // console.log(`--->: deleteElementFromId -> subsubitem`, subsubitem)\n                let elementsToFilter = [...subitem.Elements];\n                const elementsIndex = elementsToFilter.findIndex((subsubitem) => subsubitem.ElementId === pElementID);\n                elementsToFilter[elementsIndex] = {};\n                subitem.Elements = elementsToFilter;\n              }\n            });\n          }\n\n          if (subitem.ElementId === pElementID) {\n            let elementsToFilter = [...item.Elements];\n            // console.log(`--->: deleteElementFromId -> subitem`, subitem)\n\n            elementsToFilter = elementsToFilter.filter((subitem) => subitem.ElementId !== pElementID);\n            item.Elements = elementsToFilter;\n          }\n        });\n      }\n\n      if (item.ElementId === pElementID) {\n        const newElements = currentSection.Elements.filter((item) => item.ElementId !== pElementID);\n        currentSection.Elements = newElements;\n      }\n    });\n\n    setJson(jsonToUpdate);\n  }\n\n  function getParentElementFromId(pElementID) {\n    const currentSection = json.Sections[currentSectionIndex];\n    let foundItem = {};\n\n    currentSection.Elements.forEach((item) => {\n      if (item.hasOwnProperty('Elements')) {\n        item.Elements.forEach((subitem) => {\n          if (subitem.hasOwnProperty('Elements')) {\n            subitem.Elements.forEach((subsubitem) => {\n              if (subsubitem.ElementId === pElementID) {\n                // console.log('---> Trouvé subsubitem: ', subsubitem)\n                foundItem = subitem;\n              }\n            });\n          }\n\n          if (subitem.ElementId === pElementID) {\n            // console.log('---> Trouvé subitem: ', subitem)\n            foundItem = item;\n          }\n        });\n      }\n\n      if (item.ElementId === pElementID) {\n        // console.log('---> Trouvé item: ', item)\n        foundItem = currentSection.Elements;\n      }\n    });\n    return foundItem;\n  }\n\n  function validateId(pID) {\n    if (getElementsFromId(pID).length > 0) setIsValidId(false);\n    else setIsValidId(true);\n  }\n\n  function initButtonsProperty(pElement) {\n    const buttons = [\n      {\n        Button: 'Yes',\n        Label: 'Yes',\n        BackgroundColor: '#D3D3D3',\n        BackgroundColorSelected: '#66ff33',\n      },\n      {\n        Button: 'No',\n        Label: 'No',\n        BackgroundColor: '#D3D3D3',\n        BackgroundColorSelected: '#d63a3a',\n      },\n      {\n        Button: 'NA',\n        Label: 'Not Applicable',\n        BackgroundColor: '#D3D3D3',\n        BackgroundColorSelected: '#808080',\n      },\n    ];\n    pElement.Buttons = buttons;\n  }\n\n  function initFormatProperty(pElement) {\n    pElement.Format = {};\n  }\n  function initDefaultValues(pElement) {\n    if (pElement.Type === 'Trilean.Label') {\n      pElement.Title = 'comment';\n      pElement.CommentValue = 'comment written here';\n    }\n  }\n\n  function registerControlId(pControl) {\n    // console.log('registerControlId: --> [', pControl.Id, '(new value: ', pValue, ')]')\n\n    if (idsCollection[pControl.Type] === undefined) {\n      idsCollection[pControl.Type] = { collection: [] };\n    }\n\n    const idIndex = idsCollection[pControl.Type].collection.findIndex((item) => item.ElementId === pControl.ElementId);\n\n    let idObject = { ElementId: pControl.ElementId, Id: pControl.Id };\n    if (idIndex > -1) {\n      // console.log('ID exists at pos: ', idIndex)\n      idsCollection[pControl.Type].collection[idIndex] = idObject;\n    } else idsCollection[pControl.Type].collection.push(idObject);\n    // console.log(`--->: registerControlId -> idsCollection: `, idsCollection)\n  }\n\n  function unregisterControlId(pElementId) {\n    // console.log(`--->: unregisterControlId: `, pElementId, ' inside: ', idsCollection)\n\n    let foundItem;\n    for (const type in idsCollection) {\n      idsCollection[type].collection.forEach((item) => {\n        if (item.ElementId === pElementId) foundItem = item.Id;\n      });\n\n      idsCollection[type].collection = idsCollection[type].collection.filter((item) => item.ElementId !== pElementId);\n    }\n    // console.log('foundItem: ', foundItem)\n    idsLoadedList.delete(foundItem);\n\n    // console.log(`--->: unregisterControlId -> idsCollection[type].collection`, idsCollection[type].collection)\n  }\n\n  function unregisterControlChildrenId(pElementId) {\n    const element = getElementFromElementId(pElementId);\n\n    if (element.hasOwnProperty('Elements')) {\n      element.Elements.forEach((item) => {\n        if (item.Id !== undefined) {\n          console.log('unregister child: ', item.Id);\n          unregisterControlId(item.ElementId);\n        }\n\n        if (item.hasOwnProperty('Elements')) {\n          item.Elements.forEach((subitem, subindex) => {\n            if (subitem.Id !== undefined) {\n              console.log('unregister subchild: ', subitem.Id);\n              unregisterControlId(subitem.ElementId);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  function unregisterSectionControls(pSection) {\n    // console.log('---> unregister controls: ', pSection.Elements)\n    pSection.Elements.forEach((item, index) => {\n      // console.log(' --> delete id on: ', item.Id)\n      unregisterControlId(item.ElementId);\n      if (item.hasOwnProperty('Elements')) {\n        item.Elements.forEach((subitem, subindex) => {\n          if (subitem.Type !== 'GridRow') {\n            // console.log(' ----> delete subid on: ', subitem.Id)\n            unregisterControlId(subitem.ElementId);\n          }\n          if (subitem.hasOwnProperty('Elements')) {\n            subitem.Elements.forEach((subsubitem, subsubindex) => {\n              // console.log(' ------> delete subsubid on: ', subsubitem.Id)\n              unregisterControlId(subsubitem.ElementId);\n            });\n          }\n        });\n      }\n    });\n  }\n\n  function getDefaultID(pType) {\n    // console.log(`--->: getDefaultID -> pType: `, pType)\n    // console.log('idsCollection: ', idsCollection)\n\n    const idPosition = idsCollection[pType] === undefined ? 1 : idsCollection[pType].collection.length + 1;\n    const positionNumber = idPosition < 10 ? '00' + idPosition : idPosition < 100 ? '0' + idPosition : idPosition;\n\n    let prefix;\n    if (pType.includes('.')) prefix = `${pType.slice(0, 3).toUpperCase()}.${pType.slice(pType.indexOf('.') + 1, pType.indexOf('.') + 4).toUpperCase()}`;\n    else prefix = `${pType.slice(0, 3).toUpperCase()}`;\n\n    let newId = `${prefix}.${positionNumber}`;\n\n    // Check for duplicates\n    if (Array.from(idsLoadedList).findIndex((item) => item === newId) > -1) newId += '.copy';\n\n    // idsCollection[pType].collection.push(newId)\n\n    // setIdList([...idList, newId])\n    // validateId(newId)\n\n    return newId;\n  }\n\n  function renameSectionTitle(pTitle) {\n    switch (pTitle) {\n      case 'Emailregister':\n        return 'Email Register';\n      case 'Smsregister':\n        return 'SMS Register';\n      default:\n        break;\n    }\n  }\n\n  /**--------------------------------------------------**\n   * @desc - Return building Panel                 -----*\n   *----------------------------------------------------*/\n\n  // ---> ENTRY POINT\n  function getHTML() {\n    if (json.Sections.length > 0) {\n      // Browse the json to register every Ids\n      json.Sections.forEach((section) => {\n        // console.log('section elements: ', section.Title, elements)\n        if (section.hasOwnProperty('Elements')) {\n          section.Elements.forEach((item, index) => {\n            // console.log('item: ', item)\n            if (item.Id !== undefined) registerControlId(item);\n            if (item.hasOwnProperty('Elements')) {\n              item.Elements.forEach((subitem, index) => {\n                // console.log('subitem: ', subitem)\n                if (subitem.Id !== undefined) registerControlId(subitem);\n                if (subitem.hasOwnProperty('Elements')) {\n                  subitem.Elements.forEach((subsubitem, subsubindex) => {\n                    // console.log('subsubitem: ', subsubitem)\n                    if (subsubitem.Id !== undefined) registerControlId(subsubitem);\n                  });\n                }\n              });\n            }\n          });\n        }\n      });\n\n      // Get controls for the active section\n      let currentSectionToRender = json.Sections[currentSectionIndex];\n      if (currentSectionToRender.Elements.length > 0)\n        return currentSectionToRender.Elements.map((item) => {\n          // Build list of Ids at load time\n          idsLoadedList.add(item.Id);\n          return getControl(item);\n        });\n    }\n  }\n\n  function getControl(pItem) {\n    let id = pItem.ElementId;\n    // registerControlId(pItem)\n\n    if (pItem.DatabaseField === 'ValidFrom') {\n      console.log('DatabaseField FROM found here: ', id);\n      databaseFieldLocation.from = id;\n    }\n    if (pItem.DatabaseField === 'ValidTo') {\n      console.log('DatabaseField TO found here: ', id);\n      databaseFieldLocation.to = id;\n    }\n    return (\n      <Control\n        controlObj={pItem}\n        selectedControl={selectedControl}\n        onClickHandler={(control) => {\n          // Select control from control's child\n          if (control.ElementId) onSelectControlHandler(control);\n          // Select control\n          else onSelectControlHandler(pItem);\n        }}\n        moveUp={(control, pIsSubControl) => moveUpHandler(control, pIsSubControl)}\n        moveDown={(control, pIsSubControl) => moveDownHandler(control, pIsSubControl)}\n        delete={(control) => deleteHandler(control)}\n        key={id}\n      />\n    );\n  }\n\n  function onSelectControlHandler(pControl) {\n    // console.log(`--->: pControl selected: `, pControl)\n    setCurrentKeyword('');\n    setSelectedControl(pControl);\n  }\n\n  /**-------------------------------------------------**\n   * @desc - Build the HTML from JSON              -----*\n   *----------------------------------------------------*/\n  function onJsonChangeHandler(e) {\n    let currentValue = JSON.parse(document.getElementById('json-output').value);\n    setJson(currentValue);\n  }\n\n  /**-------------------------------------------------**\n   * @desc - Build the Panels tabs                 -----*\n   *----------------------------------------------------*/\n  let sectionNavigation = () => {\n    if (json.Sections.length > 0) {\n      return json.Sections.map((section, index) => {\n        let sectionTitle = json.Sections[index] !== undefined ? json.Sections[index].Title : '';\n        return (\n          <button key={index} onClick={() => setCurrentSectionIndex(index)} className={`tab-section ${currentSectionIndex === index ? 'tab-active' : ''}`}>\n            {sectionTitle}\n          </button>\n        );\n      });\n    }\n  };\n\n  /**-------------------------------------------------**\n   * @desc - Manipulate the JSON                   -----*\n   *----------------------------------------------------*/\n\n  function moveUpHandler(pControl, pIsSubControl) {\n    const parentElement = getParentElementFromId(pControl.ElementId);\n    moveElement(pControl, parentElement, 'moveUp', pIsSubControl);\n  }\n  function moveDownHandler(pControl, pIsSubControl) {\n    const parentElement = getParentElementFromId(pControl.ElementId);\n    moveElement(pControl, parentElement, 'moveDown', pIsSubControl);\n  }\n\n  function moveElement(pControl, pParentElement, pDirection, pIsSubControl) {\n    const container = !pIsSubControl ? pParentElement : pParentElement.Elements;\n\n    const position = container.findIndex((item) => item.ElementId === pControl.ElementId);\n    switch (pDirection) {\n      case 'moveUp':\n        if (position > 0) {\n          container.splice(position - 1, 0, container.splice(position, 1)[0]);\n        }\n        break;\n      case 'moveDown':\n        if (position < container.length - 1) {\n          container.splice(position + 1, 0, container.splice(position, 1)[0]);\n        }\n        break;\n      default:\n        break;\n    }\n    setJson({ ...json });\n  }\n\n  function deleteHandler(pControl) {\n    deleteElementFromId(pControl.ElementId);\n  }\n\n  /**-------------------------------------------------**\n   * @desc - Build the properties Panel            -----*\n   *----------------------------------------------------*/\n\n  function getPropertiesPanel(pSelectedControl) {\n    // console.log(`--->: getPropertiesPanel -> pSelectedControl`, pSelectedControl)\n\n    const basicPropertiesIDs = ['DocumentSummaryGrid', 'Register.Signatures', 'Button.Add.DocketNumber'];\n\n    const buttonPropertiesIDs = [\n      'Button.Submit.Register',\n      'Button.View.Document',\n      'Button.Closeout',\n      'Button.Send.SMS',\n      'Button.Send.Email',\n      'Button.Add.Signature',\n      // \"Button.Add.Email\",\n      // \"Button.Add.SMS\",\n      'Button.Add.ReportDate',\n    ];\n\n    const signaturePropertiesIDs = ['Signature', 'Signature.Date', 'Signature.DateTime'];\n\n    const booleanPropertiesIDs = ['SingleBoolean', 'Boolean'];\n\n    const imagePropertiesIDs = ['Image', 'Image.Single'];\n\n    const qrscannerPropertiesIDs = ['QRScanner', 'QRScanner.List'];\n\n    let keyWordsList = [];\n\n    const globalProperties = (\n      <>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"identifier\">ID</label>\n          <input type=\"text\" name=\"identifier\" id=\"identifier\" value={selectedControl.Id || ''} onChange={(e) => setControlID(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"title\">Title</label>\n          <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"isvisible\">Is Visible</label>\n          <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={selectedControl.IsVisible === undefined ? true : Boolean(selectedControl.IsVisible)} onChange={(e) => setControlIsVisible(e)} />\n        </div>\n      </>\n    );\n\n    if (pSelectedControl.Type === 'Repeatable') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n        </div>\n      );\n    }\n\n    // PANEL FOR SECTION\n    if (pSelectedControl.Type === undefined) {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (basicPropertiesIDs.includes(pSelectedControl.Type)) {\n      return (\n        <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          {globalProperties}\n        </div>\n      );\n    }\n\n    if (booleanPropertiesIDs.includes(pSelectedControl.Type)) {\n      const defaultValue =\n        pSelectedControl.Type !== 'SingleBoolean' ? (\n          <div className=\"properties-form-row-elements\">\n            <label htmlFor=\"yes\">Yes</label>\n            <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === 'Y'} onChange={(e) => setControlValue(e)} />\n            <label htmlFor=\"no\">No</label>\n            <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === 'N'} onChange={(e) => setControlValue(e)} />\n          </div>\n        ) : (\n          <div className=\"properties-form-row-elements\">\n            <input type=\"checkbox\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === 'Y'} onChange={(e) => setControlUniqueValue(e)} />\n            <label htmlFor=\"yes\">Yes</label>\n          </div>\n        );\n      return (\n        <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n            <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label>Default Value</label>\n            <div className=\"properties-form-row-container\">{defaultValue}</div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"details\">Details</label>\n            <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <div className=\"properties-form-row-container\">\n              <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n              <label htmlFor=\"collapsible\">Details Collapsible</label>\n              <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n              <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"commentvalue\">Comment</label>\n            <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"entrytitle\">Comment Title</label>\n            <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"showcomment\">Show Comment</label>\n            <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (buttonPropertiesIDs.includes(pSelectedControl.Type)) {\n      return (\n        <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          {/* <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} /> */}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isvisible\">IsVisible</label>\n            <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isbuttondisabled\">IsButtonDisabled</label>\n            <input type=\"checkbox\" name=\"isbuttondisabled\" id=\"isbuttondisabled\" checked={Boolean(selectedControl.IsButtonDisabled) || false} onChange={(e) => setControlIsButtonDisabled(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Button.Add.Email' || pSelectedControl.Type === 'Button.Add.SMS') {\n      return (\n        <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"title2\">Title 2</label>\n            <input type=\"text\" name=\"title2\" id=\"title2\" value={selectedControl.Title2 || ''} onChange={(e) => setControlTitle2(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isvisible\">IsVisible</label>\n            <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isbuttondisabled\">IsButtonDisabled</label>\n            <input type=\"checkbox\" name=\"isbuttondisabled\" id=\"isbuttondisabled\" checked={Boolean(selectedControl.IsButtonDisabled) || false} onChange={(e) => setControlIsButtonDisabled(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Matrix') {\n      return (\n        <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"identifier\">ID</label>\n            <input type=\"text\" name=\"identifier\" id=\"identifier\" value={selectedControl.Id} onChange={(e) => setControlID(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"columns\">Columns</label>\n            <input type=\"number\" name=\"columns\" id=\"columns\" max=\"10\" min=\"0\" value={selectedControl.Columns || ''} onChange={(e) => setControlColumns(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"rows\">Rows</label>\n            <input type=\"number\" name=\"rows\" id=\"rows\" min=\"0\" value={selectedControl.Rows || ''} onChange={(e) => setControlRows(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isvisible\">IsVisible</label>\n            <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Matrix.Button') {\n      const legendValuesX = [];\n      const legendValuesY = [];\n\n      for (let i = 0; i < selectedControl.Columns; i++) {\n        const value = selectedControl.Legend.LegendValuesX.Values[i];\n        legendValuesX.push(\n          <input\n            key={i}\n            type=\"text\"\n            name={`legendx-${i}`}\n            id={`legendx-${i}`}\n            placeholder={`Row ${i + 1} legend`}\n            className=\"properties-form-row-legend\"\n            defaultValue={i < selectedControl.Columns ? value : ''}\n            onChange={(e) => setControlLegendValuesX(e, i)}\n          ></input>\n        );\n      }\n\n      for (let j = 0; j < selectedControl.Rows; j++) {\n        const value = selectedControl.Legend.LegendValuesY.Values[j];\n        legendValuesY.push(\n          <input\n            key={j}\n            type=\"text\"\n            name={`legendy-${j}`}\n            id={`legendy-${j}`}\n            placeholder={`Col ${j + 1} legend`}\n            className=\"properties-form-row-legend\"\n            defaultValue={j < selectedControl.Rows ? value : ''}\n            onChange={(e) => setControlLegendValuesY(e, j)}\n          ></input>\n        );\n      }\n\n      return (\n        <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"identifier\">ID</label>\n            <input type=\"text\" name=\"identifier\" id=\"identifier\" value={selectedControl.Id} onChange={(e) => setControlID(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"columns\">Columns</label>\n            <input type=\"number\" name=\"columns\" id=\"columns\" max=\"10\" min=\"0\" value={selectedControl.Columns || ''} onChange={(e) => setControlColumnsLegend(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"rows\">Rows</label>\n            <input type=\"number\" name=\"rows\" id=\"rows\" min=\"0\" value={selectedControl.Rows || ''} onChange={(e) => setControlRowsLegend(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"xaxisname\">X Axis Name</label>\n            <input type=\"text\" name=\"xaxisname\" id=\"xaxisname\" value={selectedControl.XAxisName || ''} onChange={(e) => setControlXAxisName(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"yaxisname\">Y Axis Name</label>\n            <input type=\"text\" name=\"yaxisname\" id=\"yaxisname\" value={selectedControl.YAxisName || ''} onChange={(e) => setControlYAxisName(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"selection\">Selection</label>\n            <select name=\"selection\" id=\"selection\" value={selectedControl.Selection || 0} onChange={(e) => setControlSelection(e)}>\n              <option value=\"single\">Single</option>\n              <option value=\"multiple\">Multiple</option>\n            </select>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isvisible\">IsVisible</label>\n            <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"showlegend\">Show Legend</label>\n            <input type=\"checkbox\" name=\"showlegend\" id=\"showlegend\" checked={Boolean(selectedControl.Legend.ShowLegend) || false} onChange={(e) => setControlShowLegend(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Legend Values X</h3>\n          </div>\n          <div className=\"properties-form-row\">{legendValuesX}</div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Legend Values Y</h3>\n          </div>\n          <div className=\"properties-form-row\">{legendValuesY}</div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'M.Button') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolor\">Background Color</label>\n            <input type=\"color\" name=\"bgcolor\" id=\"bgcolor\" value={selectedControl.BackgroundColor || ''} onChange={(e) => setControlMatrixBackgroundColor(e)} />\n            <input type=\"text\" name=\"\" id=\"\" className=\"input-hexa\" value={selectedControl.BackgroundColor || ''} onChange={(e) => setControlMatrixBackgroundColor(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolorselected\">Background Color Selected</label>\n            <input type=\"color\" name=\"bgcolorselected\" id=\"bgcolorselected\" value={selectedControl.BackgroundColorSelected || ''} onChange={(e) => setControlMatrixBackgroundColorSelected(e)} />\n            <input type=\"text\" name=\"\" id=\"\" className=\"input-hexa\" value={selectedControl.BackgroundColorSelected || ''} onChange={(e) => setControlMatrixBackgroundColorSelected(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Document.TableOfContents') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'API') {\n      if (selectedControl.Keywords !== undefined) {\n        keyWordsList = selectedControl.Keywords.Keys.map((keyword, index) => {\n          return (\n            <div className=\"properties-form-row-container keyword-row\" key={index}>\n              <div>{keyword}</div>\n              <div onClick={() => deleteKeyword(keyword)}>\n                <FontAwesomeIcon icon={faTrashAlt} title=\"Remove\" />\n              </div>\n            </div>\n          );\n        });\n      }\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"api\">Api</label>\n            <select name=\"api\" id=\"api\" value={selectedControl.Api || 0} onChange={(e) => setControlApi(e)}>\n              <option value=\"Select an Api\">Select an Api</option>\n              <option value=\"ProjectContacts\">- Project Contacts</option>\n              <option value=\"GlobalContacts\">- Global Contacts</option>\n              <option value=\"ProjectCompany\">- Project Company</option>\n              <option value=\"ABS\">- ABS</option>\n              <option value=\"CBS\">- CBS</option>\n              <option value=\"DBS\">- DBS</option>\n              <option value=\"FBS\">- FBS</option>\n              <option value=\"TBS\">- TBS</option>\n              <option value=\"PBS\">- PBS</option>\n              <option value=\"PCBS\">- PCBS</option>\n              <option value=\"WBS\">- WBS</option>\n            </select>\n          </div>\n          <div className=\"properties-form-row\">\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'GlobalContacts' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includephonenumber\">Include Phone Number</label>\n              <input type=\"checkbox\" name=\"includephonenumber\" id=\"includephonenumber\" checked={Boolean(selectedControl.IncludePhoneNumber) || false} onChange={(e) => setControlIncludePhoneNumber(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'GlobalContacts' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includeemail\">Include Email</label>\n              <input type=\"checkbox\" name=\"includeemail\" id=\"includeemail\" checked={Boolean(selectedControl.IncludeEmail) || false} onChange={(e) => setControlIncludeEmail(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'GlobalContacts' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includeemail\">Include Employee No</label>\n              <input type=\"checkbox\" name=\"includeemail\" id=\"includeemail\" checked={Boolean(selectedControl.IncludeEmployeeNo) || false} onChange={(e) => setControlIncludeEmployeeNo(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'GlobalContacts' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includeemail\">Include Position</label>\n              <input type=\"checkbox\" name=\"includeemail\" id=\"includeemail\" checked={Boolean(selectedControl.IncludePosition) || false} onChange={(e) => setControlIncludePosition(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'GlobalContacts' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includeemail\">Include Department</label>\n              <input type=\"checkbox\" name=\"includeemail\" id=\"includeemail\" checked={Boolean(selectedControl.IncludeDepartment) || false} onChange={(e) => setControlIncludeDepartment(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'GlobalContacts' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includeemail\">Include Billing Classification</label>\n              <input type=\"checkbox\" name=\"includeemail\" id=\"includeemail\" checked={Boolean(selectedControl.IncludeBillingClassification) || false} onChange={(e) => setControlIncludeBillingClassification(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectCompany' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includetitle\">Include Title</label>\n              <input type=\"checkbox\" name=\"includetitle\" id=\"includetitle\" checked={Boolean(selectedControl.IncludeTitle) || false} onChange={(e) => setControlIncludeTitle(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectCompany' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includebusinessnumber\">Include Business Number</label>\n              <input type=\"checkbox\" name=\"includebusinessnumber\" id=\"includebusinessnumber\" checked={Boolean(selectedControl.IncludeBusinessNumber) || false} onChange={(e) => setControlIncludeBusinessNumber(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectCompany' ? 'hidden' : ''}`}>\n              <label htmlFor=\"includeabbreviation\">Include Abbreviation</label>\n              <input type=\"checkbox\" name=\"includeabbreviation\" id=\"includeabbreviation\" checked={Boolean(selectedControl.IncludeAbbreviation) || false} onChange={(e) => setControlIncludeAbbreviation(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'ProjectCompany' && selectedControl.Api !== 'GlobalContacts' ? '' : 'hidden'}`}>\n              <label htmlFor=\"includetitle\">Include Title</label>\n              <input type=\"checkbox\" name=\"includetitle\" id=\"includetitle\" checked={Boolean(selectedControl.IncludeTitle) || false} onChange={(e) => setControlIncludeTitle(e)} />\n            </div>\n            <div className={`properties-form-row-container ${selectedControl.Api !== 'ProjectContacts' && selectedControl.Api !== 'ProjectCompany' && selectedControl.Api !== 'GlobalContacts' ? '' : 'hidden'}`}>\n              <label htmlFor=\"includecode\">Include Code</label>\n              <input type=\"checkbox\" name=\"includecode\" id=\"includecode\" checked={Boolean(selectedControl.IncludeCode) || false} onChange={(e) => setControlIncludeCode(e)} />\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"validationmessage\">Validation Message</label>\n            <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"mandatory\">Mandatory</label>\n            <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"keywords\">Voice Keywords</label>\n            <div className=\"properties-form-row-container\">\n              <div>\n                <input type=\"text\" name=\"keywords\" id=\"keywords\" value={currentKeyword || ''} onChange={(e) => setCurrentKeyword(e.target.value)} />\n              </div>\n              <div>\n                <button className=\"btn btn-primary no-margin\" onClick={() => setControlKeywords()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">{keyWordsList}</div>\n          <div className={`properties-form-row ${selectedControl.Api !== 'ProjectCompany' ? 'hidden' : ''}`}>\n            <label htmlFor=\"includedocket\">Set Docket Number</label>\n            <input type=\"checkbox\" name=\"includedocket\" id=\"includedocket\" checked={Boolean(selectedControl.DocketID !== undefined)} onChange={(e) => (isDocketNumberButton().length ? setApiDocketNumber(e) : setIsModalDocketVisible(!isModalDocketVisible))} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'SearchableSMSListView') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"api\">Api</label>\n            <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'SearchableEmailListView' || pSelectedControl.Type === 'SearchableSMSListView') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"title2\">Title 2</label>\n            <input type=\"text\" name=\"title2\" id=\"title2\" value={selectedControl.Title2 || ''} onChange={(e) => setControlTitle2(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"api\">Api</label>\n            <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'SearchableListEntryDialogEmail') {\n      let associatedIds;\n      if (selectedControl.AssociatedId !== undefined) {\n        associatedIds = selectedControl.AssociatedId.names.map((id, index) => {\n          return (\n            <div className=\"properties-form-row-container key©-row\" key={index}>\n              <div>{id}</div>\n              <div onClick={() => deleteIdValue(id)}>\n                <FontAwesomeIcon icon={faTrashAlt} title=\"Remove\" />\n              </div>\n            </div>\n          );\n        });\n      }\n      let idsList = idList.map((id, index) => {\n        return (\n          <option value={id} key={id}>\n            {id}\n          </option>\n        );\n      });\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"api\">Api</label>\n            <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"validationmessage\">Validation Message</label>\n            <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label>Associated Id</label>\n            <div className=\"properties-form-row-container\">\n              <select name=\"defaultvalue\" id=\"defaultvalue\" value={0} onChange={(e) => setControlAssociatedId(e)}>\n                <option value=\"\" key=\"none\">\n                  Select Dependancy\n                </option>\n                {idsList}\n              </select>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">{associatedIds}</div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'SearchableListEntryDialogSMS') {\n      let associatedIds;\n      if (selectedControl.AssociatedId !== undefined) {\n        associatedIds = selectedControl.AssociatedId.names.map((id, index) => {\n          return (\n            <div className=\"properties-form-row-container keyword-row\" key={index}>\n              <div>{id}</div>\n              <div onClick={() => deleteIdValue(id)}>\n                <FontAwesomeIcon icon={faTrashAlt} title=\"Remove\" />\n              </div>\n            </div>\n          );\n        });\n      }\n      let idsList = idList.map((id, index) => {\n        return (\n          <option value={id} key={id}>\n            {id}\n          </option>\n        );\n      });\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"api\">Api</label>\n            <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"validationmessage\">Validation Message</label>\n            <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label>Associated Id</label>\n            <div className=\"properties-form-row-container\">\n              <select name=\"defaultvalue\" id=\"defaultvalue\" value={0} onChange={(e) => setControlAssociatedId(e)}>\n                <option value=\"\" key=\"none\">\n                  Select Dependancy\n                </option>\n                {idsList}\n              </select>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">{associatedIds}</div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Checkbox') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n\n          <div className=\"properties-form-row\">\n            {/* <label>Default checked</label> */}\n            <div className=\"properties-form-row-container\">\n              <div className=\"properties-form-row-elements\">\n                {/* <label htmlFor=\"yes\">True</label>\n              <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} /> */}\n                {/* <label htmlFor=\"no\">Default checked</label>\n              <input type=\"checkbox\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} /> */}\n              </div>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"no\">Default checked</label>\n            <input type=\"checkbox\" name=\"value\" id=\"no\" checked={selectedControl.Value === 'Y'} onChange={(e) => setControlDefaultValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"commentvalue\">Comment</label>\n            <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"entrytitle\">Comment Title</label>\n            <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"showcomment\">Show Comment</label>\n            <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n            <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"details\">Details</label>\n            <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <div className=\"properties-form-row-container\">\n              <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n              <label htmlFor=\"collapsible\">Details Collapsible</label>\n              <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n              <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'List.Multicontrol') {\n      let dataList = [];\n      if (selectedControl.Data !== undefined) {\n        dataList = selectedControl.Data.map((data, index) => {\n          let selectedIds = [];\n          let optionedControlIndex;\n\n          if (selectedControl.OptionedControls !== undefined) {\n            // console.log('OptionedControls existing: ', selectedControl.OptionedControls)\n            optionedControlIndex = selectedControl.OptionedControls.findIndex((item) => item.SelectedString === data);\n            if (optionedControlIndex > -1) selectedIds = selectedControl.OptionedControls[optionedControlIndex].Controls;\n          }\n          return (\n            <div key={index}>\n              <div id={index} className=\"properties-form-row-container keyword-row\" onClick={(e) => keywordClickHandler(e)}>\n                <div>{data}</div>\n                <div onClick={() => deleteData(data)}>\n                  <FontAwesomeIcon icon={faTrashAlt} title=\"Remove\" />\n                </div>\n              </div>\n              <div id={`options-${index}`} className=\"properties-form-row keywords-container\">\n                <SelectSearchable items={Array.from(idsLoadedList).filter((item) => item !== selectedControl.Id)} selectedItems={selectedIds} onSelectItem={(pItems) => setControlOptionedControls(pItems, data)} />\n\n                {/* <div id={`options-${index}`} className={`properties-form-row keywords-container ${index === selectedListDataIndex ? 'keywords-open' : ''}`}>\n            <div className=\"keywords-content\">\n                {selectedIds.map((item, index) => <div className=\"keyword-selected\" key={index}>{item}</div>)}\n              </div>\n              <div className=\"keywords-panel\">\n                {Array.from(idsLoadedList).map((item, index) => <div className=\"keyword-toggle\" key={index}>\n                  {item}\n                  <input type=\"checkbox\" id={item} onChange={(e) => setControlOptionedControls(e, data)}></input></div>)}\n              </div> */}\n              </div>\n            </div>\n          );\n        });\n      } else selectedControl.Data = [];\n\n      function keywordClickHandler(pEvent) {\n        const keywordId = Number(pEvent.target.id);\n        setSelectedListDataIndex(keywordId);\n        // console.log(`--->: keyword id: ${keywordId} list of IDs: `, idsLoadedList)\n      }\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          {/* <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n          <div className=\"properties-form-row-elements\">\n              <label htmlFor=\"yes\">Yes</label>\n              <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} />\n              <label htmlFor=\"no\">No</label>\n              <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === \"N\"} onChange={(e) => setControlValue(e)} />\n            </div>\n          </div>\n        </div> */}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"data\">Data</label>\n            <div className=\"properties-form-row-container\">\n              <form action=\"#\" onSubmit={() => setControlData()}>\n                <input type=\"text\" name=\"data\" id=\"data\" value={currentData || ''} onChange={(e) => setCurrentData(e.target.value)} />\n                <button className=\"btn btn-primary no-margin\">Add</button>\n              </form>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">{dataList}</div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'List.Single') {\n      let dataList = [];\n      if (selectedControl.Data !== undefined) {\n        dataList = selectedControl.Data.map((data, index) => {\n          return (\n            <div className=\"properties-form-row-container keyword-row\" key={index}>\n              <div>{data}</div>\n              <div onClick={() => deleteData(data)}>\n                <FontAwesomeIcon icon={faTrashAlt} title=\"Remove\" />\n              </div>\n            </div>\n          );\n        });\n      } else selectedControl.Data = [];\n\n      const defaultValueList = selectedControl.Data.map((data, index) => (\n        <option value={data} key={index}>\n          {data}\n        </option>\n      ));\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label>Default Value</label>\n            <div className=\"properties-form-row-container\">\n              <select name=\"defaultvalue\" id=\"defaultvalue\" value={selectedControl.Value || 0} onChange={(e) => setControlValue(e)}>\n                <option value=\"\" key=\"none\">\n                  ---\n                </option>\n                {defaultValueList}\n              </select>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"data\">Data</label>\n            <div className=\"properties-form-row-container\">\n              <input type=\"text\" name=\"data\" id=\"data\" value={currentData || ''} onChange={(e) => setCurrentData(e.target.value)} />\n              <button className=\"btn btn-primary no-margin\" onClick={() => setControlData()}>\n                Add\n              </button>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">{dataList}</div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'List.Multiple') {\n      let dataList = [];\n      if (selectedControl.Data !== undefined) {\n        dataList = selectedControl.Data.map((data, index) => {\n          return (\n            <div className=\"properties-form-row-container keyword-row\" key={index}>\n              <div>{data}</div>\n              <div onClick={() => deleteData(data)}>\n                <FontAwesomeIcon icon={faTrashAlt} title=\"Remove\" />\n              </div>\n            </div>\n          );\n        });\n      } else selectedControl.Data = [];\n\n      const defaultValueList = selectedControl.Data.map((data, index) => (\n        <option value={data} key={index}>\n          {data}\n        </option>\n      ));\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label>Default Value</label>\n            <div className=\"properties-form-row-container\">\n              <select name=\"defaultvalue\" id=\"defaultvalue\" value={currentSelectedValue || ''} onChange={(e) => setControlSelectedValue(e)}>\n                <option value=\"\" key=\"none\">\n                  ---\n                </option>\n                {defaultValueList}\n              </select>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"data\">Data</label>\n            <div className=\"properties-form-row-container\">\n              <input type=\"text\" name=\"data\" id=\"data\" value={currentData || ''} onChange={(e) => setCurrentData(e.target.value)} />\n              <button className=\"btn btn-primary no-margin\" onClick={() => setControlData()}>\n                Add\n              </button>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">{dataList}</div>\n        </div>\n      );\n    }\n\n    if (imagePropertiesIDs.includes(pSelectedControl.Type)) {\n      let images;\n      images = pSelectedControl.Value !== undefined ? <img alt=\"default\" src={'data:image;base64,' + pSelectedControl.Value} width=\"100%\" /> : '';\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"size\">Size</label>\n            <select name=\"size\" id=\"size\" value={selectedControl.Size || 0} onChange={(e) => setControlSize(e)}>\n              <option value=\"\"></option>\n              <option value=\"Thumbnail\">Thumbnail</option>\n              <option value=\"Small\">Small</option>\n              <option value=\"Medium\">Medium</option>\n              <option value=\"Large\">Large</option>\n            </select>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"galleryextrack\">GalleryExtrack</label>\n            <input type=\"checkbox\" name=\"galleryextrack\" id=\"galleryextrack\" checked={Boolean(selectedControl.GalleryExtrack) || false} onChange={(e) => setControlGalleryExtrack(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"galleryphone\">GalleryPhone</label>\n            <input type=\"checkbox\" name=\"galleryphone\" id=\"galleryphone\" checked={Boolean(selectedControl.GalleryPhone) || false} onChange={(e) => setControlGalleryPhone(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Default image</h3>\n            {images}\n          </div>\n          <div className=\"properties-form-row\">\n            <div>\n              <label htmlFor=\"imagebrowse\" className=\"btn btn-primary btn-small\">\n                <FontAwesomeIcon icon={faImage} />\n                Select a photo\n              </label>\n              <input type=\"file\" name=\"imagebrowse\" id=\"imagebrowse\" onChange={(e) => setControlImageSingle(e.target.files[0])} />\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"allowmarkup\">Allow Markup</label>\n            <input type=\"checkbox\" name=\"allowmarkup\" id=\"allowmarkup\" checked={Boolean(selectedControl.AllowMarkup) || false} onChange={(e) => setControlAllowMarkup(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"displayonly\">Display Only</label>\n            <input type=\"checkbox\" name=\"displayonly\" id=\"displayonly\" checked={Boolean(selectedControl.DisplayOnly) || false} onChange={(e) => setControlDisplayOnly(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    // QRScanner.List is a control itself...\n    if (qrscannerPropertiesIDs.includes(pSelectedControl.Type)) {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"entrytitle\">EntryTitle</label>\n            <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Label') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"fontsize\">Font Size</label>\n            <input type=\"number\" name=\"fontsize\" id=\"fontsize\" value={selectedControl.FontSize || 0} onChange={(e) => setControlFontSize(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"margin\">Margin</label>\n            <input type=\"number\" name=\"margin\" id=\"margin\" value={selectedControl.Margin || 0} onChange={(e) => setControlMargin(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"fontattribute\">Font Attributes</label>\n            <select name=\"fontattribute\" id=\"fontattribute\" value={selectedControl.FontAttributes || 0} onChange={(e) => setControlFontAttributes(e)}>\n              <option value=\"\"></option>\n              <option value=\"Bold\">Bold</option>\n              <option value=\"Italic\">Italic</option>\n            </select>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n            <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n          </div>\n        </div>\n      );\n    }\n    if (pSelectedControl.Type === 'Text') {\n      if (selectedControl.Keywords !== undefined) {\n        keyWordsList = selectedControl.Keywords.Keys.map((keyword, index) => {\n          return (\n            <div className=\"properties-form-row-container keyword-row\" key={index}>\n              <div>{keyword}</div>\n              <div onClick={() => deleteKeyword(keyword)}>\n                <FontAwesomeIcon icon={faTrashAlt} title=\"Remove\" />\n              </div>\n            </div>\n          );\n        });\n      }\n\n      let keyboardOptions;\n\n      const kbVarChar =\n        selectedControl.Format !== undefined ? (\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"varchar\">Restricted Number of Character</label>\n            <input type=\"number\" name=\"varchar\" id=\"varchar\" value={selectedControl.Format.VarChar || 0} onChange={(e) => setControlVarChar(e)} />\n          </div>\n        ) : (\n          ''\n        );\n\n      const kbLines =\n        selectedControl.Format !== undefined ? (\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"lines\">Lines to Display</label>\n            <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Lines || 0} onChange={(e) => setControlLines(e)} />\n          </div>\n        ) : (\n          ''\n        );\n\n      const kbDecimal =\n        selectedControl.Format !== undefined ? (\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"lines\">Decimal</label>\n            <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Decimal || 0} onChange={(e) => setControlDecimal(e)} />\n          </div>\n        ) : (\n          ''\n        );\n\n      const kbMin =\n        selectedControl.Format !== undefined ? (\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"lines\">Minimum</label>\n            <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Min || 0} onChange={(e) => setControlMin(e)} />\n          </div>\n        ) : (\n          ''\n        );\n\n      const kbMax =\n        selectedControl.Format !== undefined ? (\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"maximum\">maximum</label>\n            <input type=\"number\" name=\"maximum\" id=\"maximum\" value={selectedControl.Format.Max || 0} onChange={(e) => setControlMax(e)} />\n          </div>\n        ) : (\n          ''\n        );\n\n      if (selectedControl.Format === undefined) selectedControl.Format = {};\n      else {\n        switch (selectedControl.Format.Keyboard) {\n          case 'Chat':\n          case 'Default':\n          case 'Plain':\n          case 'Text':\n            keyboardOptions = (\n              <>\n                {kbVarChar} {kbLines}\n              </>\n            );\n            break;\n          case 'Numeric':\n            keyboardOptions = (\n              <>\n                {kbVarChar} {kbLines} {kbDecimal} {kbMin} {kbMax}\n              </>\n            );\n            break;\n          case 'Email':\n          case 'Telephone':\n          case 'Url':\n            keyboardOptions = <></>;\n            break;\n          default:\n            break;\n        }\n      }\n\n      const docketValue = selectedControl.DocketID !== undefined ? (selectedControl.DocketID.includes('Docket') ? 'DocketNumber' : 'Text') : '';\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"value\">Value</label>\n            <input type=\"text\" name=\"value\" id=\"value\" value={selectedControl.Value || ''} onChange={(e) => setControlValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isenabled\">Read Only</label>\n            <input type=\"checkbox\" name=\"isenabled\" id=\"isenabled\" checked={selectedControl.IsEnabled !== undefined ? Boolean(!selectedControl.IsEnabled) : false} onChange={(e) => setControlIsEnabled(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"warningmessage\">Warning Message</label>\n            <input type=\"text\" name=\"warningmessage\" id=\"warningmessage\" value={selectedControl.WarningMessage || ''} disabled={Boolean(!selectedControl.Warning) || false} onChange={(e) => setControlWarningMessage(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"warningvalue\">Warning</label>\n            <input type=\"checkbox\" name=\"warningvalue\" id=\"warningvalue\" checked={Boolean(selectedControl.Warning) || false} onChange={(e) => setControlWarning(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"validationmessage\">Validation Message</label>\n            <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"mandatory\">Mandatory</label>\n            <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Format</h3>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"keyboard\">Keyboard</label>\n            <select name=\"keyboard\" id=\"keyboard\" value={selectedControl.Format.Keyboard || 0} onChange={(e) => setControlKeyboard(e)}>\n              <option value=\"\"></option>\n              <option value=\"Chat\">Chat</option>\n              <option value=\"Default\">Default</option>\n              <option value=\"Email\">Email</option>\n              <option value=\"Numeric\">Numeric</option>\n              <option value=\"Plain\">Plain</option>\n              <option value=\"Telephone\">Telephone</option>\n              <option value=\"Text\">Text</option>\n              <option value=\"Url\">Url</option>\n            </select>\n          </div>\n\n          {keyboardOptions}\n          {/* <div className=\"properties-form-row\">\n          <label htmlFor=\"varchar\">Restricted Number of Character</label>\n          <input type=\"number\" name=\"varchar\" id=\"varchar\" value={selectedControl.Format.VarChar || 0} onChange={(e) => setControlVarChar(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"lines\">Lines to Display</label>\n          <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Lines || 0} onChange={(e) => setControlLines(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"lines\">Decimal</label>\n          <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Decimal || 0} onChange={(e) => setControlDecimal(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"lines\">Minimum</label>\n          <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Min || 0} onChange={(e) => setControlMin(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"maximum\">maximum</label>\n          <input type=\"number\" name=\"maximum\" id=\"maximum\" value={selectedControl.Format.Max || 0} onChange={(e) => setControlMax(e)} />\n        </div> */}\n\n          <div className=\"properties-form-row\">\n            <hr />\n            <label htmlFor=\"keywords\">Voice Keywords</label>\n            <div className=\"properties-form-row-container\">\n              <div>\n                <input type=\"text\" name=\"keywords\" id=\"keywords\" value={currentKeyword || ''} onChange={(e) => setCurrentKeyword(e.target.value)} />\n              </div>\n              <div>\n                <button className=\"btn btn-primary no-margin\" onClick={() => setControlKeywords()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">{keyWordsList}</div>\n\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"includedocket\">Set Docket Number</label>\n            <select name=\"docket\" id=\"docket\" value={docketValue} onChange={(e) => (isDocketNumberButton().length ? setTextDocketNumber(e) : setIsModalDocketVisible(!isModalDocketVisible))}>\n              <option value=\"\">---</option>\n              <option value=\"DocketNumber\">DocketNumber</option>\n              <option value=\"Text\">Text</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Trilean') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n            <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"details\">Details</label>\n            <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <div className=\"properties-form-row-container\">\n              <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n              <label htmlFor=\"collapsible\">Details Collapsible</label>\n              <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n              <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label>Default Value</label>\n            <div className=\"properties-form-row-container\">\n              <div className=\"properties-form-row-elements\">\n                <label htmlFor=\"yes\">Yes</label>\n                <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === 'Y'} onChange={(e) => setControlValue(e)} />\n                <label htmlFor=\"no\">No</label>\n                <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === 'N'} onChange={(e) => setControlValue(e)} />\n                <label htmlFor=\"na\">Na</label>\n                <input type=\"radio\" name=\"value\" id=\"na\" value=\"NA\" checked={selectedControl.Value === 'NA'} onChange={(e) => setControlValue(e)} />\n              </div>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"hidena\">Hide N/A</label>\n            <input type=\"checkbox\" name=\"hidena\" id=\"hidena\" checked={Boolean(selectedControl.HideNA) || false} onChange={(e) => setControlHideNA(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"commentvalue\">Comment</label>\n            <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"entrytitle\">Comment Title</label>\n            <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"showcomment\">Show Comment</label>\n            <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Trilean.Label') {\n      // console.log('---> ', selectedControl)\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n            <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Button Yes</h3>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"buttonyeslabel\">Label</label>\n            <input type=\"text\" name=\"buttonyeslabel\" id=\"buttonyeslabel\" value={selectedControl.Buttons[0].Label || ''} onChange={(e) => setControlButtonLabel(e, 0)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolor\">Background Color</label>\n            <input type=\"color\" name=\"bgcolor\" id=\"bgcolor\" value={selectedControl.Buttons[0].BackgroundColor || ''} onChange={(e) => setControlBackgroundColor(e, 0)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolorselected\">Background Color Selected</label>\n            <input type=\"color\" name=\"bgcolorselected\" id=\"bgcolorselected\" value={selectedControl.Buttons[0].BackgroundColorSelected || ''} onChange={(e) => setControlBackgroundColorSelected(e, 0)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Button No</h3>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"buttonyeslabel\">Label</label>\n            <input type=\"text\" name=\"buttonyeslabel\" id=\"buttonyeslabel\" value={selectedControl.Buttons[1].Label || ''} onChange={(e) => setControlButtonLabel(e, 1)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolor\">Background Color</label>\n            <input type=\"color\" name=\"bgcolor\" id=\"bgcolor\" value={selectedControl.Buttons[1].BackgroundColor || ''} onChange={(e) => setControlBackgroundColor(e, 1)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolorselected\">Background Color Selected</label>\n            <input type=\"color\" name=\"bgcolorselected\" id=\"bgcolorselected\" value={selectedControl.Buttons[1].BackgroundColorSelected || ''} onChange={(e) => setControlBackgroundColorSelected(e, 1)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Button NA</h3>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"buttonyeslabel\">Label</label>\n            <input type=\"text\" name=\"buttonyeslabel\" id=\"buttonyeslabel\" value={selectedControl.Buttons[2].Label || ''} onChange={(e) => setControlButtonLabel(e, 2)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolor\">Background Color</label>\n            <input type=\"color\" name=\"bgcolor\" id=\"bgcolor\" value={selectedControl.Buttons[2].BackgroundColor || ''} onChange={(e) => setControlBackgroundColor(e, 2)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"bgcolorselected\">Background Color Selected</label>\n            <input type=\"color\" name=\"bgcolorselected\" id=\"bgcolorselected\" value={selectedControl.Buttons[2].BackgroundColorSelected || ''} onChange={(e) => setControlBackgroundColorSelected(e, 2)} />\n          </div>\n\n          <div className=\"properties-form-row\">\n            <hr />\n            <label htmlFor=\"details\">Details</label>\n            <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <div className=\"properties-form-row-container\">\n              <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n              <label htmlFor=\"collapsible\">Details Collapsible</label>\n              <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n              <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label>Default Value</label>\n            <div className=\"properties-form-row-container\">\n              <div className=\"properties-form-row-elements\">\n                <label htmlFor=\"yes\">Yes</label>\n                <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === 'Y'} onChange={(e) => setControlValue(e)} />\n                <label htmlFor=\"no\">No</label>\n                <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === 'N'} onChange={(e) => setControlValue(e)} />\n                <label htmlFor=\"na\">Na</label>\n                <input type=\"radio\" name=\"value\" id=\"na\" value=\"NA\" checked={selectedControl.Value === 'NA'} onChange={(e) => setControlValue(e)} />\n              </div>\n            </div>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"hidena\">Hide N/A</label>\n            <input type=\"checkbox\" name=\"hidena\" id=\"hidena\" checked={Boolean(selectedControl.HideNA) || false} onChange={(e) => setControlHideNA(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"commentvalue\">Comment</label>\n            <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"entrytitle\">Comment Title</label>\n            <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"showcomment\">Show Comment</label>\n            <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (signaturePropertiesIDs.includes(pSelectedControl.Type)) {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"entrytitle\">EntryTitle</label>\n            <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"validationmessage\">ValidationMessage</label>\n            <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"mandatory\">Mandatory</label>\n            <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n          </div>\n        </div>\n      );\n    }\n\n    if (pSelectedControl.Type === 'Date') {\n      // console.log('pSelectedControl: ', pSelectedControl)\n      // if (pSelectedControl.DatabaseField) setIsDatabaseFieldSet(true)\n      console.log('databaseFieldLocation: ', databaseFieldLocation);\n\n      // (databaseFieldLocation.from !== pSelectedControl.ElementId && databaseFieldLocation.from !== '')\n\n      const databasefieldFrom =\n        databaseFieldLocation.from === '' || databaseFieldLocation.from === pSelectedControl.ElementId ? (\n          <div>\n            <label htmlFor=\"validfrom\">Valid From</label>\n            <br />\n            <input type=\"checkbox\" name=\"validfrom\" id=\"validfrom\" checked={Boolean(pSelectedControl.DatabaseField === 'ValidFrom') || false} onChange={(e) => setControlValidFrom(e)} />\n          </div>\n        ) : (\n          <div>\n            Valid From\n            <br />\n            <div className=\"properties-infomsg\"> has already been set</div>\n          </div>\n        );\n\n      const databasefieldTo =\n        databaseFieldLocation.to === '' || databaseFieldLocation.to === pSelectedControl.ElementId ? (\n          <div>\n            <label htmlFor=\"validto\">Valid To</label>\n            <br />\n            <input type=\"checkbox\" name=\"validto\" id=\"validto\" checked={Boolean(pSelectedControl.DatabaseField === 'ValidTo') || false} onChange={(e) => setControlValidTo(e)} />\n          </div>\n        ) : (\n          <div>\n            Valid To\n            <br />\n            <div className=\"properties-infomsg\"> has already been set</div>\n          </div>\n        );\n\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"AddHour\">Add Day</label>\n            <input type=\"number\" name=\"Addday\" id=\"addday\" value={selectedControl.AddDay || 0} onChange={(e) => setControlAddDay(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"AddHour\">Add Month</label>\n            <input type=\"number\" name=\"addmonth\" id=\"addmonth\" value={selectedControl.AddMonth || 0} onChange={(e) => setControlAddMonth(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"mandatory\">Mandatory</label>\n            <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"datevalue\">Date Value</label>\n            <input type=\"date\" name=\"datevalue\" id=\"datevalue\" value={selectedControl.DateValue || ''} onChange={(e) => setControlDateValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isBlank\">Is Blank</label>\n            <input type=\"checkbox\" name=\"isBlank\" id=\"isBlank\" checked={Boolean(selectedControl.IsBlank) || false} onChange={(e) => setControlDateIsBlank(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"formatdatetime\">Format DateTime</label>\n            <select name=\"formatdatetime\" id=\"formatdatetime\" value={selectedControl.FormatDateTime || 0} onChange={(e) => setControlFormatDateTime(e)}>\n              <option value=\"\"></option>\n              <option value=\"yyyy-MM-dd\">yyyy-MM-dd</option>\n              <option value=\"yyyy-MM-dd, ddd\">yyyy-MM-dd, ddd</option>\n              <option value=\"yyyy-MMM-dd\">yyyy-MMM-dd</option>\n              <option value=\"yyyy-MMM-dd, ddd\">yyyy-MMM-dd, ddd</option>\n              <option value=\"dd-MM-yyyy\">dd-MM-yyyy</option>\n              <option value=\"ddd, dd-MM-yyyy\">ddd, dd-MM-yyyy</option>\n              <option value=\"dd-MMM-yyyy\">dd-MMM-yyyy</option>\n              <option value=\"ddd, dd-MMM-yyyy\">ddd, dd-MMM-yyyy</option>\n              <option value=\"yy-MM-dd\">yy-MM-dd</option>\n              <option value=\"yy-MM-dd, ddd\">yy-MM-dd, ddd</option>\n              <option value=\"yy-MMM-dd\">yy-MMM-dd</option>\n              <option value=\"yy-MMM-dd, ddd\">yy-MMM-dd, ddd</option>\n              <option value=\"dd-MM-yy\">dd-MM-yy</option>\n              <option value=\"ddd, dd-MM-yy\">ddd, dd-MM-yy</option>\n              <option value=\"dd-MMM-yy\">dd-MMM-yy</option>\n              <option value=\"ddd, dd-MMM-yy\">ddd, dd-MMM-yy</option>\n              <option value=\"MMM-dd\">MMM-dd</option>\n              <option value=\"MMM-dd, ddd\">MMM-dd, ddd</option>\n              <option value=\"dd-MMM\">dd-MMM</option>\n              <option value=\"ddd, dd-MMM\">ddd, dd-MMM</option>\n            </select>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"islabelvisible\">Is Label Visible</label>\n            <input type=\"checkbox\" name=\"islabelvisible\" id=\"islabelvisible\" checked={Boolean(selectedControl.IsLabelVisible) || false} onChange={(e) => setControlIsLabelVisible(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"validationmessage\">Validation Message</label>\n            <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <hr />\n            <h3>Database Field</h3>\n          </div>\n          {databasefieldFrom}\n          <br />\n          {databasefieldTo}\n        </div>\n      );\n    }\n    if (pSelectedControl.Type === 'Time') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"AddHour\">Add Hour</label>\n            <input type=\"number\" name=\"addhour\" id=\"addhour\" value={selectedControl.AddHour || 0} onChange={(e) => setControlAddHour(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"timevalue\">Time Value</label>\n            <input type=\"time\" name=\"timevalue\" id=\"timevalue\" value={selectedControl.TimeValue || ''} onChange={(e) => setControlTimeValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isBlank\">Is Blank</label>\n            <input type=\"checkbox\" name=\"isBlank\" id=\"isBlank\" checked={Boolean(selectedControl.IsBlank) || false} onChange={(e) => setControlTimeIsBlank(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"formatdatetime\">Format DateTime</label>\n            <select name=\"formatdatetime\" id=\"formatdatetime\" value={selectedControl.FormatDateTime || 0} onChange={(e) => setControlFormatDateTime(e)}>\n              <option value=\"\"></option>\n              <option value=\"hh:mm tt\">hh:mm tt</option>\n              <option value=\"HH:mm\">HH:mm</option>\n              <option value=\"HH:mm:ss\">HH:mm:ss</option>\n              <option value=\"hh:mm:ss tt\">hh:mm:ss tt</option>\n            </select>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"islabelvisible\">Is Label Visible</label>\n            <input type=\"checkbox\" name=\"islabelvisible\" id=\"islabelvisible\" checked={Boolean(selectedControl.IsLabelVisible) || false} onChange={(e) => setControlIsLabelVisible(e)} />\n          </div>\n        </div>\n      );\n    }\n    if (pSelectedControl.Type === 'DateTime') {\n      return (\n        <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n          {globalProperties}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"AddHour\">Add Hour</label>\n            <input type=\"number\" name=\"addhour\" id=\"addhour\" value={selectedControl.AddHour || 0} onChange={(e) => setControlAddHour(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"AddHour\">Add Day</label>\n            <input type=\"number\" name=\"Addday\" id=\"addday\" value={selectedControl.AddDay || 0} onChange={(e) => setControlAddDay(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"AddHour\">Add Month</label>\n            <input type=\"number\" name=\"addmonth\" id=\"addmonth\" value={selectedControl.AddMonth || 0} onChange={(e) => setControlAddMonth(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"mandatory\">Mandatory</label>\n            <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"datetimevalue\">DateTime Value</label>\n            <input type=\"date\" name=\"datetimevalue\" id=\"datetimevalue\" value={selectedControl.DateValue || ''} onChange={(e) => setControlDateTimeDateValue(e)} />\n            <input type=\"time\" name=\"timevalue\" id=\"timevalue\" value={selectedControl.TimeValue || ''} onChange={(e) => setControlDateTimeTimeValue(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isBlank\">Is Blank</label>\n            <input type=\"checkbox\" name=\"isBlank\" id=\"isBlank\" checked={Boolean(selectedControl.IsBlank) || false} onChange={(e) => setControlDateTimeIsBlank(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"formatdatetime\">Format DateTime</label>\n            <select name=\"formatdatetime\" id=\"formatdatetime\" value={selectedControl.FormatDateTime || 0} onChange={(e) => setControlFormatDateTime(e)}>\n              <option value=\"\"></option>\n              <option value=\"yyyy-MM-dd hh:mm tt\">yyyy-MM-dd hh:mm tt</option>\n              <option value=\"yyyy-MM-dd HH:mm\">yyyy-MM-dd HH:mm</option>\n              <option value=\"yyyy-MMM-dd hh:mm tt\">yyyy-MMM-dd hh:mm tt</option>\n              <option value=\"yyyy-MMM-dd HH:mm\">yyyy-MMM-dd HH:mm</option>\n              <option value=\"yy-MM-dd hh:mm tt\">yy-MM-dd hh:mm tt</option>\n              <option value=\"yy-MM-dd HH:mm\">yy-MM-dd HH:mm</option>\n              <option value=\"yy-MMM-dd hh:mm tt\">yy-MMM-dd hh:mm tt</option>\n              <option value=\"yy-MMM-dd HH:mm\">yy-MMM-dd HH:mm</option>\n            </select>\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"islabelvisible\">Is Label Visible</label>\n            <input type=\"checkbox\" name=\"islabelvisible\" id=\"islabelvisible\" checked={Boolean(selectedControl.IsLabelVisible) || false} onChange={(e) => setControlIsLabelVisible(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"validationmessage\">ValidationMessage</label>\n            <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function deleteKeyword(pKeyword) {\n    const keywordIndex = selectedControl.Keywords.findIndex((item) => item === pKeyword);\n    delete selectedControl.Keywords[keywordIndex];\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  function deleteIdValue(pKeyword) {\n    const keywordIndex = selectedControl.AssociatedId.names.findIndex((item) => item === pKeyword);\n    delete selectedControl.AssociatedId.names[keywordIndex];\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  function deleteData(pData) {\n    // console.log('---> selectedControl.OptionedControls: ', selectedControl.OptionedControls);\n\n    const dataIndex = selectedControl.Data.findIndex((item) => item === pData);\n    if (dataIndex > -1) selectedControl.Data = selectedControl.Data.filter((item, index) => index !== dataIndex);\n    if (selectedControl.OptionedControls !== undefined) {\n      const optionIndex = selectedControl.OptionedControls.findIndex((item) => item.SelectedString === pData);\n      if (optionIndex > -1) selectedControl.OptionedControls = selectedControl.OptionedControls.filter((item, index) => index !== optionIndex);\n    }\n\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  function setControlID(pEvent) {\n    const IDvalue = pEvent.target.value;\n    setIdList([...idList, IDvalue]);\n    // console.log('---> setControlID ID:', IDvalue)\n    validateId(IDvalue);\n\n    // selectedControl is not attached to the global object??\n    selectedControl.Id = IDvalue;\n    // console.log(`--->: setControlID -> selectedControl`, selectedControl)\n    let jsonToUpdate = { ...json };\n    // let jsonToUpdate = JSON.parse(JSON.stringify(json))\n    // console.log(`--->: setControlID -> jsonToUpdate`, jsonToUpdate)\n    setJson(jsonToUpdate);\n  }\n  function setControlTitle(pEvent) {\n    selectedControl.Title = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlTitle2(pEvent) {\n    selectedControl.Title2 = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  function setControlVarChar(pEvent) {\n    selectedControl.Format.VarChar = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlLines(pEvent) {\n    selectedControl.Format.Lines = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlDecimal(pEvent) {\n    selectedControl.Format.Decimal = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlMin(pEvent) {\n    selectedControl.Format.Min = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlMax(pEvent) {\n    selectedControl.Format.Max = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlHasUnderLine(pEvent) {\n    selectedControl.HasUnderLine = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIsVisible(pEvent) {\n    selectedControl.IsVisible = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlFontSize(pEvent) {\n    selectedControl.FontSize = Number(pEvent.target.value);\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlMargin(pEvent) {\n    selectedControl.Margin = Number(pEvent.target.value);\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlFontAttributes(pEvent) {\n    if (pEvent.target.value !== '') selectedControl.FontAttributes = pEvent.target.value;\n    else delete selectedControl.FontAttributes;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlSize(pEvent) {\n    selectedControl.Size = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlApi(pEvent) {\n    ['IncludeAbbreviation', 'IncludePhoneNumber', 'IncludeEmail', 'IncludeTitle', 'IncludeBusinessNumber', 'IncludeTitle', 'IncludeCode', 'IncludeEmployeeNo', 'IncludePosition', 'IncludeDepartment', 'IncludeBillingClassification'].forEach((option) => {\n      if (selectedControl[option]) delete selectedControl[option];\n    });\n\n    const apiName = pEvent.target.value;\n    if (apiName !== 'ProjectCompany' && selectedControl.DocketID !== undefined) delete selectedControl.DocketID;\n\n    selectedControl.Api = apiName;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlApiValue(pEvent) {\n    selectedControl.Api = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlSelection(pEvent) {\n    selectedControl.Selection = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlEntryTitle(pEvent) {\n    selectedControl.EntryTitle = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlCommentValue(pEvent) {\n    selectedControl.CommentValue = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlButtonLabel(pEvent, btnIndex) {\n    selectedControl.Buttons[btnIndex].Label = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlBackgroundColor(pEvent, btnIndex) {\n    selectedControl.Buttons[btnIndex].BackgroundColor = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlBackgroundColorSelected(pEvent, btnIndex) {\n    selectedControl.Buttons[btnIndex].BackgroundColorSelected = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlMatrixBackgroundColor(pEvent) {\n    console.log(`--->: setControlMatrixBackgroundColor -> pEvent.target.value`, pEvent.target.value);\n    selectedControl.BackgroundColor = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlMatrixBackgroundColorSelected(pEvent) {\n    selectedControl.BackgroundColorSelected = pEvent.target.value;\n    // console.log(`--->: setControlMatrixBackgroundColorSelected -> selectedControl`, selectedControl)\n    let jsonToUpdate = { ...json };\n    // console.log(`--->: setControlMatrixBackgroundColorSelected -> jsonToUpdate`, jsonToUpdate)\n    setJson(jsonToUpdate);\n  }\n  function setControlValidationMessage(pEvent, btnIndex) {\n    selectedControl.ValidationMessage = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlMandatory(pEvent) {\n    selectedControl.Mandatory = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlAddHour(pEvent) {\n    if (pEvent.target.value > 0) selectedControl.AddHour = pEvent.target.value;\n    else delete selectedControl.AddHour;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlAddDay(pEvent) {\n    if (pEvent.target.value > 0) selectedControl.AddDay = pEvent.target.value;\n    else delete selectedControl.AddDay;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlAddMonth(pEvent) {\n    if (pEvent.target.value > 0) selectedControl.AddMonth = pEvent.target.value;\n    else delete selectedControl.AddMonth;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlFormatDateTime(pEvent) {\n    selectedControl.FormatDateTime = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlKeyboard(pEvent) {\n    if (selectedControl.Format === undefined) initFormatProperty(selectedControl);\n    selectedControl.Format.Keyboard = pEvent.target.value;\n\n    setCurrentKeyboard(pEvent.target.value);\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlAssociatedId(pEvent) {\n    const idList = selectedControl.AssociatedId.names;\n    if (idList.findIndex((id) => id === pEvent.target.value) < 0) idList.push(pEvent.target.value);\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIsLabelVisible(pEvent) {\n    selectedControl.IsLabelVisible = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  // function setControlDateTimeValue(pEvent) {\n  //   selectedControl.DateTimeValue = pEvent.target.value\n  //   selectedControl.IsBlank = false\n  //   let jsonToUpdate = { ...json }\n  //   setJson(jsonToUpdate)\n  // }\n  function setControlDateTimeDateValue(pEvent) {\n    selectedControl.DateValue = pEvent.target.value;\n    selectedControl.DateTimeValue = `${pEvent.target.value} ${selectedControl.TimeValue}`;\n    selectedControl.IsBlank = false;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlDateTimeTimeValue(pEvent) {\n    selectedControl.TimeValue = pEvent.target.value;\n    selectedControl.DateTimeValue = `${selectedControl.DateValue} ${pEvent.target.value}`;\n    selectedControl.IsBlank = false;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlDateValue(pEvent) {\n    selectedControl.DateValue = pEvent.target.value;\n    selectedControl.IsBlank = false;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlTimeValue(pEvent) {\n    selectedControl.TimeValue = pEvent.target.value;\n    selectedControl.IsBlank = false;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlDateIsBlank(pEvent) {\n    selectedControl.DateValue = '';\n    selectedControl.IsBlank = true;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlTimeIsBlank(pEvent) {\n    selectedControl.TimeValue = '';\n    selectedControl.IsBlank = true;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlDateTimeIsBlank(pEvent) {\n    selectedControl.DateValue = '';\n    selectedControl.TimeValue = '';\n    selectedControl.DateTimeValue = '';\n    selectedControl.IsBlank = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIsButtonDisabled(pEvent) {\n    selectedControl.IsButtonDisabled = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlShowComment(pEvent) {\n    selectedControl.ShowComment = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  function setControlCollapsible(pEvent) {\n    selectedControl.Collapsible = pEvent.target.checked;\n    selectedControl.IsCollapsed = false;\n    if (!selectedControl.Collapsible) {\n      delete selectedControl.Collapsible;\n      delete selectedControl.IsCollapsed;\n    }\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIsCollapsed(pEvent) {\n    selectedControl.IsCollapsed = pEvent.target.checked;\n    if (selectedControl.IsCollapsed) selectedControl.Collapsible = true;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlValue(pEvent) {\n    selectedControl.Value = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlUniqueValue(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.Value = 'Y';\n    } else delete selectedControl.Value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlSelectedValue(pEvent) {\n    if (selectedControl.SelectedValue === undefined || selectedControl.SelectedValue.length === 0) {\n      selectedControl.SelectedValue = [];\n    }\n    selectedControl.SelectedValue[0] = pEvent.target.value;\n    setCurrentSelectedValue(pEvent.target.value);\n\n    // setCurrentSelectedValue('')\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludePhoneNumber(pEvent) {\n    selectedControl.IncludePhoneNumber = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlWarningMessage(pEvent) {\n    selectedControl.WarningMessage = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlWarning(pEvent) {\n    selectedControl.Warning = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIsEnabled(pEvent) {\n    selectedControl.IsEnabled = !pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeEmail(pEvent) {\n    selectedControl.IncludeEmail = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeEmployeeNo(pEvent) {\n    selectedControl.IncludeEmployeeNo = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludePosition(pEvent) {\n    selectedControl.IncludePosition = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeDepartment(pEvent) {\n    selectedControl.IncludeDepartment = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeBillingClassification(pEvent) {\n    selectedControl.IncludeBillingClassification = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeTitle(pEvent) {\n    selectedControl.IncludeTitle = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeBusinessNumber(pEvent) {\n    selectedControl.IncludeBusinessNumber = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeAbbreviation(pEvent) {\n    selectedControl.IncludeAbbreviation = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlIncludeCode(pEvent) {\n    selectedControl.IncludeCode = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlGalleryExtrack(pEvent) {\n    selectedControl.GalleryExtrack = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlGalleryPhone(pEvent) {\n    selectedControl.GalleryPhone = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlAllowMarkup(pEvent) {\n    selectedControl.AllowMarkup = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlDisplayOnly(pEvent) {\n    selectedControl.DisplayOnly = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlHideNA(pEvent) {\n    selectedControl.HideNA = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlOptionedControls(pSelected, pKeyword) {\n    if (selectedControl.OptionedControls === undefined) selectedControl.OptionedControls = [];\n\n    // Find the keyword index\n    const optionedControlIndex = selectedControl.OptionedControls.findIndex((item) => item.SelectedString === pKeyword);\n    // console.log(`--->: setControlOptionedControls -> optionedControlIndex`, optionedControlIndex)\n\n    if (optionedControlIndex < 0) {\n      const optionValueIndex = selectedControl.Data.findIndex((item) => item === pKeyword);\n      const optionValue = {\n        Controls: pSelected,\n        Index: optionValueIndex,\n        SelectedString: pKeyword,\n      };\n      selectedControl.OptionedControls.push(optionValue);\n    }\n    // Find the matching optioned control\n    else {\n      selectedControl.OptionedControls[optionedControlIndex].Controls = pSelected;\n    }\n\n    // console.log('---> OptionedControls inJSON: ', selectedControl.OptionedControls)\n    // console.log(`--->: setControlOptionedControls -> pSelected, pKeyword`, pSelected, pKeyword)\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  // function setControlOptionedControls(pEvent, pKeyword) {\n  //   if (selectedControl.OptionedControls === undefined) selectedControl.OptionedControls = []\n  //   const optionedControlIndex = selectedControl.OptionedControls.findIndex(item => item.SelectedString === pKeyword)\n  //   console.log(`--->: setControlOptionedControls -> optionedControlIndex`, optionedControlIndex)\n\n  //   if (optionedControlIndex < 0) {\n  //     const optionValueIndex = selectedControl.Data.findIndex(item => item === pKeyword)\n  //     const optionValue = {\n  //       Controls: [pEvent.target.id],\n  //       Index: optionValueIndex,\n  //       SelectedString: pKeyword\n  //     }\n  //     selectedControl.OptionedControls.push(optionValue)\n  //   }\n  //   else {\n  //     const optionedControlIdIndex = selectedControl.OptionedControls[optionedControlIndex].Controls.findIndex(item => {\n  //       console.log(`--->: setControlOptionedControls -> pEvent.target.id`, pEvent.target.id)\n  //       console.log(`--->: setControlOptionedControls -> item`, item)\n  //       return item === pEvent.target.id\n  //     })\n  //     if (optionedControlIdIndex === -1) selectedControl.OptionedControls[optionedControlIndex].Controls.push(pEvent.target.id)\n  //   }\n\n  //   if (pEvent.target.checked) {\n  //     console.log('---> OptionedControls: ',pEvent.target.id, ' on: ',pKeyword)\n\n  //   }\n  //   let jsonToUpdate = { ...json }\n  //   setJson(jsonToUpdate)\n  // }\n  function setApiDocketNumber(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.DocketID = `ProjectCompany${getElementsFromType('Button.Add.DocketNumber')[0].Id}`;\n    } else delete selectedControl.DocketID;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setTextDocketNumber(pEvent) {\n    const selectedType = pEvent.target.value;\n    console.log(`--->: setTextDocketNumber -> selectedType`, selectedType);\n\n    if (selectedType === 'DocketNumber' || selectedType === 'Text') {\n      selectedControl.DocketID = `${selectedType}${getElementsFromType('Button.Add.DocketNumber')[0].Id}`;\n    } else if (selectedControl.DocketID !== undefined) delete selectedControl.DocketID;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlValidFrom(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.DatabaseField = 'ValidFrom';\n      databaseFieldLocation = pEvent.target.ElementId;\n    } else {\n      delete selectedControl.DatabaseField;\n      databaseFieldLocation = '';\n    }\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlValidTo(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.DatabaseField = 'ValidTo';\n      databaseFieldLocation = pEvent.target.ElementId;\n    } else {\n      delete selectedControl.DatabaseField;\n      databaseFieldLocation = '';\n    }\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlKeywords(pEvent) {\n    if (selectedControl.Keywords === undefined || selectedControl.Keywords.length === 0) {\n      selectedControl.Keywords = { keys: [] };\n    }\n    selectedControl.Keywords.keys.push(currentKeyword);\n    setCurrentKeyword('');\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlData(pEvent) {\n    if (selectedControl.Data === undefined || selectedControl.Data.length === 0) {\n      selectedControl.Data = [];\n    }\n    selectedControl.Data.push(currentData);\n    setCurrentData('');\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlXAxisName(pEvent) {\n    selectedControl.XAxisName = pEvent.target.value;\n    selectedControl.Legend.LegendValuesX.Name = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlYAxisName(pEvent) {\n    selectedControl.YAxisName = pEvent.target.value;\n    selectedControl.Legend.LegendValuesY.Name = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlDetails(pEvent) {\n    selectedControl.Details = pEvent.target.value;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  // MATRIX\n  function setControlColumns(pEvent) {\n    selectedControl.Columns = pEvent.target.value;\n\n    setMatrixSize();\n\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlRows(pEvent) {\n    selectedControl.Rows = pEvent.target.value;\n    setMatrixSize();\n\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  // MATRIX BUTTON\n  function setControlColumnsLegend(pEvent) {\n    selectedControl.Columns = pEvent.target.value;\n    // console.log(`--->: setControlColumnsLegend -> selectedControl.Columns`, selectedControl.Columns)\n    // console.log('---> Let\\'s compare:', selectedControl.Columns,selectedControl.Legend.LegendValuesX.Values.length)\n\n    for (let i = 0; i < selectedControl.Columns; i++) {\n      if (selectedControl.Legend.LegendValuesX.Values[i] === undefined) selectedControl.Legend.LegendValuesX.Values[i] = '';\n    }\n    for (let i = selectedControl.Columns; i < selectedControl.Legend.LegendValuesX.Values.length; i++) {\n      selectedControl.Legend.LegendValuesX.Values.pop();\n    }\n    setMatrixSize();\n\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlRowsLegend(pEvent) {\n    selectedControl.Rows = pEvent.target.value;\n    for (let i = 0; i < selectedControl.Rows; i++) {\n      if (selectedControl.Legend.LegendValuesY.Values[i] === undefined) selectedControl.Legend.LegendValuesY.Values[i] = '';\n    }\n    for (let i = selectedControl.Rows; i < selectedControl.Legend.LegendValuesY.Values.length; i++) {\n      selectedControl.Legend.LegendValuesY.Values.pop();\n    }\n    setMatrixSize();\n\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlLegendValuesX(pEvent, pPos) {\n    selectedControl.Legend.LegendValuesX.Values[pPos] = pEvent.target.value;\n\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlLegendValuesY(pEvent, pPos) {\n    selectedControl.Legend.LegendValuesY.Values[pPos] = pEvent.target.value;\n\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlShowLegend(pEvent) {\n    selectedControl.Legend.ShowLegend = pEvent.target.checked;\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n  function setControlImageSingle(pFile) {\n    if (pFile === undefined) return;\n    const filesize = (pFile.size / 1024).toFixed(0);\n    if (filesize > 400) {\n      setModalError({\n        visibility: true,\n        message: `File must be under 400KB (${filesize}KB) - Please select another image`,\n      });\n      return;\n    }\n\n    let imageData;\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      imageData = e.target.result.replace(/^data:image\\/[a-z]+;base64,/, '');\n      // setImage(imageData)\n      selectedControl.Value = imageData;\n    };\n    fileReader.readAsDataURL(pFile);\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n\n    let reloadControl = selectedControl;\n    setSelectedControl('');\n    setTimeout(() => setSelectedControl(reloadControl), 500);\n  }\n  function setControlImage(pFile) {\n    let imageData;\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      imageData = e.target.result;\n      // setImageList([...imageList, imageData])\n      selectedControl.Value = selectedControl.Value !== undefined ? [...selectedControl.Value, imageData] : [imageData];\n    };\n    fileReader.readAsDataURL(pFile);\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n\n    setSelectedControl('');\n  }\n  function setControlDefaultValue(pEvent) {\n    selectedControl.Value = pEvent.target.checked ? 'Y' : 'N';\n    let jsonToUpdate = { ...json };\n    setJson(jsonToUpdate);\n  }\n\n  function setMatrixSize(pSize) {\n    if (selectedControl.Elements === undefined) selectedControl.Elements = [];\n\n    for (let row = 0; row < selectedControl.Rows; row++) {\n      const gridRowElement = {\n        Type: 'GridRow',\n        ElementId: getUniqID(),\n        Elements: [],\n      };\n\n      let isRowEmpty = false;\n      if (selectedControl.Elements[row] !== undefined) {\n        if (Object.entries(selectedControl.Elements[row]).length === 0) isRowEmpty = true;\n      }\n      if (isRowEmpty || selectedControl.Elements[row] === undefined) selectedControl.Elements[row] = gridRowElement;\n\n      for (let col = 0; col < selectedControl.Columns; col++) {\n        if (selectedControl.Elements[row].Elements[col] === undefined) selectedControl.Elements[row].Elements[col] = {};\n      }\n    }\n\n    // Remove unwanted Gridrows\n    if (selectedControl.Elements.length > selectedControl.Rows) {\n      const activeRows = selectedControl.Elements.slice(0, selectedControl.Rows);\n      selectedControl.Elements = activeRows;\n    }\n    // Remove unwanted items in Gridrows\n    selectedControl.Elements.forEach((gridrow) => {\n      const activeCols = gridrow.Elements.slice(0, selectedControl.Columns);\n      gridrow.Elements = activeCols;\n    });\n  }\n\n  /**-------------------------------------------------**\n   * @desc - JSON utilities functions              -----*\n   *----------------------------------------------------*/\n  function copyJsonHandler() {\n    document.getElementById('json-output').select();\n    document.execCommand('copy');\n  }\n\n  function pasteJsonHandler() {\n    const jsonOutput = document.getElementById('json-output');\n\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        jsonOutput.value = text;\n\n        let pasteEvent = new Event('paste');\n        onJsonChangeHandler(pasteEvent);\n      })\n      .catch((err) => {\n        // User didn't grant access to read from clipboard\n        console.log('Something went wrong', err);\n      });\n  }\n\n  function loadJsonHandler(pEvent) {\n    let file = pEvent.target.files[0];\n    let reader = new FileReader();\n\n    reader.onloadend = function () {\n      try {\n        let source = reader.result;\n        let newData = null;\n        let newSource = source.replace('data:application/json;base64,', '');\n\n        newData = JSON.parse(Base64.decode(newSource));\n        newData.IsEnableToImport = false;\n        newData.isInValidFile = false;\n        setJson({ ...newData });\n      } catch (err) {\n        // error loading the json file\n        console.log('---> ', err);\n      }\n    };\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  }\n\n  function saveJsonHandler() {\n    if (isValidId) {\n      let element = document.createElement('a');\n      element.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(json)));\n      let jsonFileName = 'new_form';\n      element.setAttribute('download', jsonFileName + '.json');\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n      document.body.removeChild(element);\n    }\n  }\n\n  function deleteJsonHandler() {\n    if (window.confirm('Are you sure to remove all?')) {\n      setCurrentSectionIndex(0);\n      setUsedTemplateList([]);\n      json.Sections = {};\n      idsCollection = {};\n      idsLoadedList = new Set();\n      setImageList([]);\n      const newSection = getNewSection();\n      setJson({ Sections: [newSection] });\n      setSelectedControl(newSection);\n    }\n  }\n\n  const isDocketNumberButton = () => getElementsFromType('Button.Add.DocketNumber');\n\n  /**-------------------------------------------------**\n   * @desc - UI methods                            -----*\n   *----------------------------------------------------*/\n\n  function simpleTabsHandler(pIndex) {\n    switch (pIndex) {\n      case 0:\n        setMode('board');\n        break;\n      case 1:\n        setMode('preview');\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**-------------------------------------------------**\n   * @desc - Render the App                        -----*\n   *----------------------------------------------------*/\n\n  const boardEdit = (\n    <>\n      <div className=\"section-controls\">\n        <div className=\"section-controls-group\">\n          <button onClick={() => addNewSection()} className=\"btn btn-secondary\">\n            <FontAwesomeIcon icon={faFolderPlus} />\n            ADD SECTION\n          </button>\n          <button onClick={() => duplicateSection()} className=\"btn btn-secondary\">\n            <FontAwesomeIcon icon={faClone} />\n            DUPLICATE SECTION\n          </button>\n          <button onClick={() => deleteJsonHandler()} className=\"btn btn-secondary\">\n            <FontAwesomeIcon icon={faExclamationTriangle} />\n            CLEAR BOARD\n          </button>\n        </div>\n      </div>\n      <div className=\"section-tabs\">{sectionNavigation()}</div>\n      <div id=\"board-edit\" onDragOver={onDragOverHandler} onDrop={onDropHandler}>\n        <div className=\"section-inner-header\">\n          <div>\n            <input type=\"text\" onClick={() => onSelectControlHandler(getCurrentSection())} className=\"section-title\" value={getCurrentSection().Title} readOnly placeholder=\"Section title\"></input>\n          </div>\n          <div className=\"section-btn-group\">\n            <button onClick={() => moveSectionLeft()} className=\"btn btn-primary btn-small\">\n              <FontAwesomeIcon icon={faArrowLeft} />\n              Move LEFT\n            </button>\n            <button onClick={() => removeSection()} className=\"btn btn-tertiary btn-small\" disabled={!currentSectionIndex > 0}>\n              <FontAwesomeIcon icon={faTrash} />\n              REMOVE SECTION\n            </button>\n            {/* {currentSectionIndex> 0 ? <button onClick={() => removeSection()} className=\"btn btn-tertiary btn-small\"><FontAwesomeIcon icon={faTrash}/>REMOVE SECTION</button> : ''} */}\n            <button onClick={() => moveSectionRight()} className=\"btn btn-primary btn-small btn-right-icon\">\n              Move RIGHT\n              <FontAwesomeIcon icon={faArrowRight} />\n            </button>\n          </div>\n        </div>\n        {getHTML()}\n      </div>\n    </>\n  );\n\n  const jsonPreview = (\n    <div id=\"json-preview\">\n      <ReactJson src={json} theme=\"monokai\" displayDataTypes={false} iconStyle=\"square\" enableClipboard={false} />\n    </div>\n  );\n\n  const errorDuplicate = !isValidId ? (\n    <div className=\"error-message\">\n      <FontAwesomeIcon icon={faExclamationCircle} />\n      Duplicate ID detected. Control's ID value must be unique. Modify the duplicate ID to enable the Export Json option.\n    </div>\n  ) : (\n    ''\n  );\n\n  let propertiesPanel =\n    mode === 'board' ? (\n      <div className=\"properties-panel-container\">\n        <h2>PROPERTIES</h2>\n        {errorDuplicate}\n        <div>{getPropertiesPanel(selectedControl)}</div>\n      </div>\n    ) : mode === 'preview' ? (\n      <div id=\"edit-controls\">\n        <button onClick={() => document.getElementById('fileInput').click()} className=\"btn btn-primary\">\n          <FontAwesomeIcon icon={faUpload} />\n          Import JSON\n        </button>\n        <button onClick={() => saveJsonHandler()} className=\"btn btn-tertiary\">\n          <FontAwesomeIcon icon={faFileCode} />\n          Export JSON\n        </button>\n        <div>\n          <input type=\"file\" id=\"fileInput\" className=\"custom-file-input\" accept=\"application/JSON\" onChange={(e) => loadJsonHandler(e)} />\n        </div>\n        <button onClick={() => copyJsonHandler()} className=\"btn btn-secondary\">\n          <FontAwesomeIcon icon={faCopy} />\n          Copy JSON\n        </button>\n        <button onClick={() => pasteJsonHandler()} className=\"btn btn-secondary\">\n          <FontAwesomeIcon icon={faPaste} />\n          Paste JSON\n        </button>\n      </div>\n    ) : (\n      ''\n    );\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1 title=\"v21.01.12\">JSON Generator</h1>\n      </header>\n      <div id=\"page\" className=\"page\">\n        <nav id=\"navigation\" className=\"navigation\">\n          <div className=\"navigation-container\">\n            <div className=\"navigation-section\">\n              <div className=\"navigation-section-title\">\n                <FontAwesomeIcon icon={faCog} />\n                <h2>Section Controls</h2>\n              </div>\n              <ul className=\"navigation-section-items\" onDragStart={controlsHandler}>\n                <li draggable id=\"Matrix\">\n                  Matrix\n                </li>\n                <li draggable id=\"Matrix.Button\">\n                  Matrix Button\n                </li>\n                <li draggable id=\"Repeatable\">\n                  Repeatable\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"navigation-section\">\n              <div className=\"navigation-section-title\">\n                <FontAwesomeIcon icon={faStream} />\n                <h2>Template Controls</h2>\n              </div>\n              <ul className=\"navigation-section-items\" onDragStart={controlsHandler}>\n                <li draggable={usedTemplateList.indexOf('Document.TableOfContents') < 0} className={usedTemplateList.indexOf('Document.TableOfContents') > -1 ? 'disabled' : ''} id=\"Document.TableOfContents\">\n                  Table of content\n                </li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary') < 0} className={usedTemplateList.indexOf('Document.Summary') > -1 ? 'disabled' : ''} id=\"Document.Summary\">\n                  D.Summary\n                </li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary2') < 0} className={usedTemplateList.indexOf('Document.Summary2') > -1 ? 'disabled' : ''} id=\"Document.Summary2\">\n                  D.Summary (with Close)\n                </li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary3') < 0} className={usedTemplateList.indexOf('Document.Summary3') > -1 ? 'disabled' : ''} id=\"Document.Summary3\">\n                  D.Summary (with Registers)\n                </li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary4') < 0} className={usedTemplateList.indexOf('Document.Summary4') > -1 ? 'disabled' : ''} id=\"Document.Summary4\">\n                  D.Summary (Registers/Close)\n                </li>\n                <li draggable={usedTemplateList.indexOf('Emailregister') < 0} className={usedTemplateList.indexOf('Emailregister') > -1 ? 'disabled' : ''} id=\"Emailregister\">\n                  Email Register\n                </li>\n                <li draggable={usedTemplateList.indexOf('Smsregister') < 0} className={usedTemplateList.indexOf('Smsregister') > -1 ? 'disabled' : ''} id=\"Smsregister\">\n                  SMS Register\n                </li>\n                <li draggable={usedTemplateList.indexOf('QRScanner.List') < 0} className={usedTemplateList.indexOf('QRScanner.List') > -1 ? 'disabled' : ''} id=\"QRScanner.List\">\n                  QR Scanner List\n                </li>\n                <li draggable={usedTemplateList.indexOf('SignatureSignOnOff') < 0} className={usedTemplateList.indexOf('SignatureSignOnOff') > -1 ? 'disabled' : ''} id=\"SignatureSignOnOff\">\n                  Signature SignOnOff\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"navigation-section\">\n              <div className=\"navigation-section-title\">\n                <FontAwesomeIcon icon={faLightbulb} />\n                <h2>Type controls</h2>\n              </div>\n              <ul className=\"navigation-section-items\" onDragStart={controlsHandler}>\n                <li draggable id=\"API\">\n                  API\n                </li>\n                <li draggable id=\"SingleBoolean\">\n                  Boolean Single\n                </li>\n                <li draggable id=\"Boolean\">\n                  Boolean Double\n                </li>\n                <li draggable id=\"Button.Add.ReportDate\">\n                  Button Add Report Date\n                </li>\n                <li draggable id=\"Button.Add.DocketNumber\">\n                  Button Add Docket Number\n                </li>\n                <li draggable id=\"Checkbox\">\n                  Checkbox\n                </li>\n                <li draggable id=\"List.Multicontrol\">\n                  Conditional Response\n                </li>\n                <li draggable id=\"Date\">\n                  Date\n                </li>\n                <li draggable id=\"DateTime\">\n                  DateTime\n                </li>\n                <li draggable id=\"Image\">\n                  Image\n                </li>\n                <li draggable id=\"Image.Single\">\n                  Image Single\n                </li>\n                <li draggable id=\"Label\">\n                  Label\n                </li>\n                <li draggable id=\"List.Single\">\n                  List Single\n                </li>\n                <li draggable id=\"List.Multiple\">\n                  List Multiple\n                </li>\n                {/* <li draggable id=\"Numeric\">Numeric</li> */}\n                <li draggable id=\"QRScanner\">\n                  QR Scanner\n                </li>\n                <li draggable id=\"Signature\">\n                  Signature\n                </li>\n                <li draggable id=\"Signature.Date\">\n                  Signature Date\n                </li>\n                <li draggable id=\"Signature.DateTime\">\n                  Signature DateTime\n                </li>\n                <li draggable id=\"Text\">\n                  Text\n                </li>\n                <li draggable id=\"Time\">\n                  Time\n                </li>\n                <li draggable id=\"Trilean\">\n                  Trilean\n                </li>\n                <li draggable id=\"Trilean.Label\">\n                  Trilean Label\n                </li>\n                <li draggable id=\"Widgetevents\">\n                  Widget Events\n                </li>\n                <li draggable id=\"Widgetdisplay\">\n                  Widget Display\n                </li>\n                <li draggable id=\"Widgetdocketcontractor\">\n                  Widget Docket Contractor\n                </li>\n                <li draggable id=\"Widgetdocketequipment\">\n                  Widget Docket Equipment\n                </li>\n                <li draggable id=\"Widgetdocketphoto\">\n                  Widget Docket Photo\n                </li>\n                <li draggable id=\"Widgetdocketcomments\">\n                  Widget Docket Comments\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <main>\n          <div className=\"main-container\">\n            <SimpleTabs\n              dispatchIndex={(pMode) => simpleTabsHandler(pMode)}\n              tabs={[\n                {\n                  tab: boardEdit,\n                  title: 'Board',\n                },\n                {\n                  tab: jsonPreview,\n                  title: 'Json Preview',\n                },\n              ]}\n            />\n            <textarea id=\"json-output\" cols=\"60\" rows=\"14\" value={JSON.stringify(json)} onChange={() => onJsonChangeHandler()}></textarea>\n          </div>\n        </main>\n\n        <aside id=\"sidebar\" className=\"sidebar\">\n          <span id=\"sidebarHandle\"></span>\n          <div id=\"properties-panel\">{propertiesPanel}</div>\n        </aside>\n\n        <Modal\n          visibility={isModalDocketVisible}\n          toggleVisibility={() => setIsModalDocketVisible(!isModalDocketVisible)}\n          message=\"You need to add the 'Button Add Docket Number' to the board before setting a Docket Number.\"\n          css={{ backgroundColor: 'rgba(0,0,0,1)' }}\n          backdrop={'rgba(0,0,0,0.3)'}\n        />\n\n        <Modal visibility={modalError.visibility} toggleVisibility={() => setModalError({ ...modalError, visibility: !modalError.visibility })} message={modalError.message} css={{ backgroundColor: 'rgba(0,0,0,1)' }} backdrop={'rgba(0,0,0,0.3)'} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectItem\":\"SelectSearchable_selectItem__ytOvQ\",\"selectedItem_delete\":\"SelectSearchable_selectedItem_delete__DzATU\",\"selectSearchable\":\"SelectSearchable_selectSearchable__12vBI\",\"selectSearchable_Container\":\"SelectSearchable_selectSearchable_Container__fToYi\",\"selectSearchable_SearchContainer\":\"SelectSearchable_selectSearchable_SearchContainer__3eaGr\",\"selectSearchable_ItemsContainer\":\"SelectSearchable_selectSearchable_ItemsContainer__34yKg\",\"selectSearchable_Header\":\"SelectSearchable_selectSearchable_Header__20KCq\",\"selectSearchable_SelectedContainer\":\"SelectSearchable_selectSearchable_SelectedContainer__3HBOF\",\"selectSearchable_Trigger\":\"SelectSearchable_selectSearchable_Trigger__2brz3\",\"selectSearchable_SelectedItem\":\"SelectSearchable_selectSearchable_SelectedItem__ya07B\",\"selectSearchable_SelectedItem_Selected\":\"SelectSearchable_selectSearchable_SelectedItem_Selected__3kePe\",\"selectSearchable_List\":\"SelectSearchable_selectSearchable_List__12txV\",\"listCollapsed\":\"SelectSearchable_listCollapsed__2gYJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBackdrop\":\"Modal_modalBackdrop__12d43\",\"modalBackdrop_freeze\":\"Modal_modalBackdrop_freeze__1CiMV\",\"modalContainer\":\"Modal_modalContainer__2JZ38\",\"modalHeader\":\"Modal_modalHeader__3lu0c\",\"modalContent\":\"Modal_modalContent__5WIER\",\"modalFooter\":\"Modal_modalFooter__2egbG\",\"modalBtn\":\"Modal_modalBtn__296dr\",\"modalClose\":\"Modal_modalClose__2fnre\"};"],"sourceRoot":""}