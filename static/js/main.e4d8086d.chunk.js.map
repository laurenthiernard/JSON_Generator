{"version":3,"sources":["utils.js","components/Control.js","components/SimpleTabs.js","components/SelectSearchable.js","components/Modal.js","layout.js","App.js","serviceWorker.js","index.js","components/SelectSearchable.module.scss","components/Modal.module.scss"],"names":["getUniqID","pLength","random","window","btoa","Math","Date","getTime","substring","toLocaleLowerCase","Control","props","id","controlObj","ElementId","type","Type","reorderable","isFixed","className","icon","faArrowUp","onClick","moveUp","faArrowDown","moveDown","selectedControl","onClickHandler","pType","faAudioDescription","faFileAlt","faHandPointDown","faWeight","faToggleOn","faCheckSquare","faListUl","faCalendarAlt","faImage","faSpellCheck","faGenderless","faCircle","faBars","faTable","getIcon","includes","value","Id","disabled","Title","delete","faTrashAlt","title","subcontrolsHTMLElements","cssRows","cssColumns","i","Rows","rowElement","Elements","j","colElement","undefined","newChildControl","key","slotContent","Object","entries","length","push","Columns","style","display","gridTemplateColumns","gridTemplateRows","controlElement","subcontrolsHTML","map","element","getSubcontrols","SimpleTabs","useState","activeTab","setActiveTab","tabButton","tabs","tab","index","useEffect","dispatchIndex","SelectSearchable","keyword","setKeyword","items","filteredList","filter","item","toLowerCase","initialIsVisible","isVisible","setIsVisible","ref","useRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","useVisible","onClickItemHandler","pEvent","pItem","stopPropagation","selectedItems","findIndex","onSelectItem","styles","selectSearchable_Container","selectSearchable_Header","e","selectSearchable_SelectedContainer","selectSearchable_SelectedItem","selectedItem_delete","faTimes","selectSearchable_Trigger","faAngleDown","faAngleUp","position","selectSearchable_List","selectSearchable_SearchContainer","onChange","selectSearchable_ItemsContainer","selectItem","selectedItem","selectSearchable_SelectedItem_Selected","Modal","visibility","toggleVisibility","message","css","backdrop","springBackdropProps","useSpring","opacity","from","zIndex","config","gentle","springModalProps","top","stiff","backdropStyle","backgroundColor","div","modalBackdrop","modalBackdrop_freeze","modalContainer","modalClose","modalHeader","faExclamationTriangle","modalContent","modalFooter","modalBtn","initLayout","isResizingSidebar","isNavBarCollapsed","sidebarWidth","sidebarHandle","querySelector","navigation","layout","pageWidth","innerWidth","navigationSections","querySelectorAll","collapseNavigation","mouseDownEvent","forEach","section","classList","add","expandNavigation","remove","pWidth","min","max","parseInt","clientX","idsCollection","idsLoadedList","Set","App","initialJson","Sections","SectionId","savedJson","JSON","parse","localStorage","getItem","json","setJson","currentSectionIndex","setCurrentSectionIndex","setSelectedControl","isValidId","setIsValidId","idList","setIdList","usedTemplateList","setUsedTemplateList","mode","setMode","currentKeyword","setCurrentKeyword","setCurrentKeyboard","currentSelectedValue","setCurrentSelectedValue","currentData","setCurrentData","setSelectedListDataIndex","isModalDocketVisible","setIsModalDocketVisible","databaseFieldLocation","to","singleUseElements","setItem","stringify","controlsHandler","dataTransfer","setData","addToNewSection","pElement","pChildren","newSection","getNewSection","child","pTitle","sectionTitle","getNewElement","pIsMatrix","pIsRepeatable","getDefaultID","getElementFromElementId","pElementID","currentSection","foundItem","hasOwnProperty","subitem","subsubitem","getElementsFromType","getCurrentSection","getParentElementFromId","validateId","pID","getElementsFromId","initFormatProperty","Format","onSelectControlHandler","pControl","onJsonChangeHandler","currentValue","getElementById","moveElement","pParentElement","pDirection","pIsSubControl","container","splice","deleteKeyword","pKeyword","keywordIndex","Keywords","jsonToUpdate","deleteIdValue","AssociatedId","names","deleteData","pData","dataIndex","Data","console","log","OptionedControls","optionIndex","SelectedString","setControlID","IDvalue","setControlTitle","setControlTitle2","Title2","setControlHasUnderLine","HasUnderLine","checked","setControlIsVisible","IsVisible","setControlApiValue","Api","setControlEntryTitle","EntryTitle","setControlDetails","Details","setControlCommentValue","CommentValue","setControlButtonLabel","btnIndex","Buttons","Label","setControlBackgroundColor","BackgroundColor","setControlBackgroundColorSelected","BackgroundColorSelected","setControlValidationMessage","ValidationMessage","setControlMandatory","Mandatory","setControlAddHour","AddHour","setControlAddDay","AddDay","setControlAddMonth","AddMonth","setControlFormatDateTime","FormatDateTime","setControlAssociatedId","setControlIsLabelVisible","IsLabelVisible","setControlIsButtonDisabled","IsButtonDisabled","setControlShowComment","ShowComment","setControlCollapsible","Collapsible","IsCollapsed","setControlIsCollapsed","setControlValue","Value","setControlIncludeTitle","IncludeTitle","setControlHideNA","HideNA","setControlKeywords","keys","setControlData","setMatrixSize","pSize","row","gridRowElement","isRowEmpty","col","activeRows","slice","gridrow","activeCols","newId","idPosition","positionNumber","prefix","collection","toUpperCase","indexOf","isDocketNumberButton","boardEdit","faFolderPlus","sectionToDuplicate","duplicateSection","faClone","confirm","deleteJsonHandler","sectionNavigation","onDragOver","preventDefault","onDrop","elementName","getData","targetID","parentID","isValidElement","alert","newElement","droppedPosition","lastIndexOf","pDefaultValues","addAsFirstSection","Button","initButtonsProperty","initDefaultValues","addToCurrentSection","readOnly","placeholder","reorderedSections","moveSectionLeft","faArrowLeft","sections","removeSection","faTrash","moveSectionRight","faArrowRight","currentSectionToRender","DatabaseField","control","parentElement","moveUpHandler","moveDownHandler","subindex","subsubindex","elementsToFilter","elementsIndex","newElements","deleteElementFromId","getControl","getHTML","jsonPreview","src","theme","displayDataTypes","iconStyle","enableClipboard","errorDuplicate","faExclamationCircle","propertiesPanel","pSelectedControl","keyWordsList","globalProperties","htmlFor","name","Boolean","defaultValue","setControlUniqueValue","setControlColumns","setControlRows","Keys","option","apiName","DocketID","setControlApi","IncludePhoneNumber","setControlIncludePhoneNumber","IncludeEmail","setControlIncludeEmail","IncludeBusinessNumber","setControlIncludeBusinessNumber","IncludeAbbreviation","setControlIncludeAbbreviation","IncludeCode","setControlIncludeCode","setApiDocketNumber","associatedIds","idsList","dataList","data","optionedControlIndex","selectedIds","Controls","keywordId","Number","keywordClickHandler","Array","pItems","pSelected","optionValueIndex","optionValue","Index","setControlOptionedControls","action","onSubmit","defaultValueList","SelectedValue","setControlSelectedValue","Size","setControlSize","GalleryExtrack","setControlGalleryExtrack","GalleryPhone","setControlGalleryPhone","FontSize","setControlFontSize","Margin","setControlMargin","FontAttributes","setControlFontAttributes","keyboardOptions","kbVarChar","VarChar","setControlVarChar","kbLines","Lines","setControlLines","kbDecimal","Decimal","setControlDecimal","kbMin","Min","setControlMin","kbMax","Max","setControlMax","Keyboard","docketValue","IsEnabled","setControlIsEnabled","WarningMessage","Warning","setControlWarningMessage","setControlWarning","setControlKeyboard","selectedType","setTextDocketNumber","databasefieldFrom","setControlValidFrom","databasefieldTo","setControlValidTo","DateValue","IsBlank","setControlDateValue","setControlDateIsBlank","TimeValue","setControlTimeValue","setControlTimeIsBlank","DateTimeValue","setControlDateTimeDateValue","setControlDateTimeTimeValue","setControlDateTimeIsBlank","getPropertiesPanel","click","faUpload","createElement","setAttribute","encodeURIComponent","jsonFileName","body","appendChild","removeChild","saveJsonHandler","faFileCode","accept","file","files","reader","FileReader","onloadend","source","result","newData","newSource","replace","Base64","decode","IsEnableToImport","isInValidFile","err","readAsDataURL","loadJsonHandler","select","execCommand","faCopy","jsonOutput","navigator","clipboard","readText","then","text","Event","catch","pasteJsonHandler","faPaste","faCog","onDragStart","draggable","faStream","faLightbulb","pMode","pIndex","simpleTabsHandler","cols","rows","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.e4d8086d.chunk.js","sourcesContent":["export function getUniqID(pLength) {\n  let random = () => window.btoa(Math.random()*(new Date().getTime())*1).substring(4, 9)\n  return `${random()}-${random()}`.substring(0, pLength).toLocaleLowerCase()\n}","import React from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport {\n  faWeight, faSpellCheck,\n  faCalendarAlt, faTrashAlt,\n  faAudioDescription, faToggleOn,\n  faSortNumericUp, faGenderless,\n  faImage, faImages, faListUl,\n  faList, faFileAlt, faClock,\n  faCheckSquare, faHandPointDown,\n  faSearch, faCircle, faAd,\n  faMailBulk, faPlus, faBars,\n  faUserCircle, faTable, faLayerGroup,\n  faEdit, faArrowUp, faArrowDown,\n} from \"@fortawesome/free-solid-svg-icons\"\n\nimport { getUniqID } from './../utils'\n\nexport default function Control(props) {\n  const id = props.controlObj.ElementId\n  const type = props.controlObj.Type\n\n  // const clickHandlerRef = props.onClickHandler\n\n  // console.log(`--->: Control -> type`, props.controlObj)\n  // console.log(`--->: Control -> props.selectedControl`, props.selectedControl)\n\n  function getSubcontrols() {\n    let subcontrolsHTMLElements = []\n\n    switch (type) {\n      case \"Matrix\":\n\n        let cssRows = ''\n        let cssColumns = ''\n\n        for (let i = 0; i < props.controlObj.Rows; i++) {\n          // let gridRowElement = {Type: \"GridRow\", ElementID: getUniqID(), Elements: []}\n          // props.controlObj.Elements[i] = gridRowElement\n\n          const rowElement = props.controlObj.Elements[i]\n          // console.log(`--->: getSubcontrols -> rowElement`, rowElement)\n          cssRows+='1fr '\n          cssColumns = ''\n\n          for (let j = 0; j < props.controlObj.Columns; j++) {\n            const colElement = (rowElement.Elements !== undefined) ? rowElement.Elements[j] : {}\n            // console.log(`--->: getSubcontrols -> new control: `, colElement)\n            const newChildControl =\n              <Control\n                controlObj={colElement}\n                selectedControl={props.selectedControl}\n                isFixed={true}\n                onClickHandler={() => props.onClickHandler(colElement)}\n                // onClickHandler={() => props.onSelectControlHandler(colElement)}\n                delete={(colElement) => props.delete(colElement)}\n                key={colElement.ElementId} />\n                // key={`matrix-sub${i}${j}`} />\n\n            const slotContent = (Object.entries(colElement).length === 0 || colElement === undefined) ? 'Add control' : newChildControl\n            // console.log(`--->: getSubcontrols -> slotContent`, slotContent)\n            cssColumns+='1fr '\n            subcontrolsHTMLElements.push(\n              <div\n                id={`${id}-matrix-row${i}-col${j}`}\n                key={`matrix${i}${j}`}\n                className=\"matrix-box\">{slotContent}\n              </div>)\n          }\n        }\n        return <div className=\"control-footer\" style={{display:'grid', gridTemplateColumns:cssColumns, gridTemplateRows:cssRows}}>{subcontrolsHTMLElements}</div>\n\n      case \"Repeatable\":\n      case \"SignatureSignOnOff\":\n      case \"Document.Summary2\":\n      case \"Document.Summary3\":\n      case \"Document.Summary4\":\n      case \"Emailregister\":\n      case \"Smsregister\":\n      case \"Document.Summary\":\n        for (let i = 0; i < props.controlObj.Elements.length; i++) {\n          const controlElement = props.controlObj.Elements[i]\n          const newChildControl =\n            <Control\n              controlObj={controlElement}\n              selectedControl={props.selectedControl}\n              isFixed={false}\n              onClickHandler={() => props.onClickHandler(controlElement)}\n              moveUp={(controlElement) => props.moveUp(controlElement, true)}\n              moveDown={(controlElement) => props.moveDown(controlElement, true)}\n              delete={(controlElement) => props.delete(controlElement)}\n              key={controlElement.ElementId} />\n\n            // console.log(`--->: getSubcontrols -> newChildControl`, newChildControl)\n            subcontrolsHTMLElements.push(newChildControl)\n          }\n          // console.log(`--->: getSubcontrols -> subcontrolsHTMLElements`, subcontrolsHTMLElements)\n        // Repeatable\n        const subcontrolsHTML = subcontrolsHTMLElements.map(element => element)\n\n        // const slotContent = (Object.entries(colElement).length === 0 || colElement === undefined) ? 'Add control' : newChildControl\n        return <>\n            <div id={`${id}-repeatable-area`} className=\"control-footer-addarea\">Add controls</div>\n            <div id={`${id}-repeatable`} className=\"control-footer\">{subcontrolsHTML}</div>\n          </>\n\n      // case \"Document.Summary\":\n      // case \"Document.Summary2\":\n      // case \"Document.Summary3\":\n      // case \"Document.Summary4\":\n      // case \"Emailregister\":\n      // case \"Smsregister\":\n      //   // console.log('---> ', props.controlObj.Elements)\n      //   const children = props.controlObj.Elements.map(item => (\n      //     <Control\n      //       controlObj={item}\n      //       selectedControl={props.selectedControl}\n      //       isFixed={false}\n      //       onClickHandler={() => props.onClickHandler(item)}\n      //       // onClickHandler={() => props.onSelectControlHandler(colElement)}\n      //       // delete={() => props.delete(item)}\n      //       key={item.ElementId} />))\n      //   return <div className=\"control-footer\">{children}</div>\n\n      default:\n        break\n    }\n  }\n\n  function getIcon(pType) {\n    switch (pType) {\n      case \"Label\":\n      case \"DocumentSummaryGrid\":\n        return faAudioDescription\n      case \"Document.TableOfContents\":\n      case \"Document.Summary\":\n      case \"Document.Summary2\":\n      case \"Document.Summary3\":\n      case \"Document.Summary4\":\n        return faFileAlt\n      case \"Button.Submit.Register\":\n      case \"Button.View.Document\":\n      case \"Button.Closeout\":\n      case \"Button.Send.SMS\":\n      case \"Button.Send.Email\":\n      case \"Button.Add.Email\":\n      case \"Button.Add.SMS\":\n      case \"Button.Add.Signature\":\n      case \"Button.Add.ReportDate\":\n        return faHandPointDown\n      case \"API\":\n      case \"Signature.Date\":\n      case \"Signature.DateTime\":\n        return faWeight\n      case \"SingleBoolean\":\n      case \"Boolean\":\n        return faToggleOn\n      case \"Checkbox\":\n        return faCheckSquare\n      case \"List.Multicontrol\":\n        return faListUl\n      case \"Date\":\n      case \"DateTime\":\n        return faCalendarAlt\n      case \"Image\":\n      case \"Image.Single\":\n        return faImage\n      case \"QRScanner\":\n      case \"QRScanner.List\":\n      case \"Signature\":\n        return faSpellCheck\n      case \"Trilean\":\n        return faGenderless\n      case \"Trilean.Label\":\n        return faCircle\n      case \"Repeatable\":\n        return faBars\n      default:\n        return faTable\n    }\n  }\n\n  const reorderable = (props.isFixed) ? '' : <div className=\"control-reordering\">\n    <FontAwesomeIcon icon={faArrowUp}\n      onClick={() => props.moveUp(props.controlObj, false)}\n    />\n    <FontAwesomeIcon icon={faArrowDown}\n      onClick={() => props.moveDown(props.controlObj, false)}\n    />\n  </div>\n\n  return (\n    <div\n      id={id}\n      className={`${props.isFixed ? 'subcontrol' : 'control'}${id === props.selectedControl.ElementId ? ' active-control' : ''}`}\n      >\n      <div className=\"control-header\" onClick={props.onClickHandler}>{props.controlObj.Type}</div>\n      <div className=\"control-content\">\n        {reorderable}\n        <div className=\"control-icon\" onClick={props.onClickHandler}>\n          <FontAwesomeIcon icon={getIcon(props.controlObj.Type)} />\n        </div>\n        <div className={`control-id ${props.controlObj.Type.includes('Button') > 0 ? \"hidden\" : ''}`} onClick={props.onClickHandler}>\n          <input type=\"text\" value={props.controlObj.Id || ''} disabled></input>\n        </div>\n        <div className=\"control-title\" onClick={props.onClickHandler}>\n          <input type={props.controlObj.Type.includes('Button') > 0 ? \"button\" : \"text\"} value={props.controlObj.Title || props.controlObj.Type || ''} disabled></input>\n        </div>\n        <div className=\"control-delete\" onClick={() => props.delete(props.controlObj)}>\n          <FontAwesomeIcon\n            icon={faTrashAlt}\n            title=\"Remove\"\n          /></div>\n      </div>\n      {getSubcontrols()}\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\n\nexport default function SimpleTabs(props) {\n\n  const [activeTab, setActiveTab] = useState(0)\n\n  const tabButton = props.tabs.map((tab, index) => {\n    return <button className={`SimpleTabs-tab ${activeTab === index ? 'tab-active' : ''}`} key={index} onClick={() => setActiveTab(index)}>{props.tabs[index].title}</button>\n  })\n\n  useEffect(() => {\n    props.dispatchIndex(activeTab)\n  }, [activeTab])\n\n  return (\n    <div className=\"SimpleTabs-container\">\n      <div className=\"SimpleTabs-header\">\n      {tabButton}\n\n      </div>\n      {props.tabs[activeTab].tab}\n    </div>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport styles from './SelectSearchable.module.scss'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleUp, faAngleDown, faTimes, faCheck } from '@fortawesome/free-solid-svg-icons'\n\n\nfunction useVisible(initialIsVisible) {\n  const [isVisible, setIsVisible] = useState(initialIsVisible);\n  const ref = useRef(null);\n\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsVisible(false);\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n    }\n  }, [])\n  return { ref, isVisible, setIsVisible }\n}\n\nexport default function SelectSearchable(props) {\n\n  const [keyword, setKeyword] = useState('')\n\n  const items = props.items\n  const filteredList = keyword.length > 0 ? items.filter(item => item.toLowerCase().includes(keyword.toLowerCase())) : items\n\n  const { ref, isVisible, setIsVisible } = useVisible(false);\n\n  function onClickItemHandler(pEvent, pItem) {\n    pEvent.stopPropagation()\n    // console.log(`--->: onClickItemHandler -> pItem`, pItem)\n    const clickedItemIndex = props.selectedItems.findIndex(item => item === pItem)\n\n    if (clickedItemIndex > -1) {\n      props.onSelectItem(props.selectedItems.filter(item => item !== pItem))\n    }\n    else props.onSelectItem([...props.selectedItems, pItem])\n  }\n\n  return (\n    <div className={styles.selectSearchable_Container}>\n      <div className={styles.selectSearchable_Header} onClick={e => setIsVisible(!isVisible)}>\n        <div className={styles.selectSearchable_SelectedContainer}>\n          {props.selectedItems.map((item, index) => <div key={index} className={styles.selectSearchable_SelectedItem}>\n            {item}\n            <span className={styles.selectedItem_delete} onClick={(e) => onClickItemHandler(e, item)}>\n              <FontAwesomeIcon icon={faTimes} />\n            </span>\n          </div>)}\n        </div>\n        <div className={styles.selectSearchable_Trigger}>\n          <FontAwesomeIcon icon={isVisible ? faAngleDown : faAngleUp} />\n        </div>\n      </div>\n      {isVisible && <div style={{ position: 'absolute' }} className={`${styles.selectSearchable_List}`} ref={ref}>\n        <div className={styles.selectSearchable_SearchContainer}>\n          <input type=\"text\" value={keyword} onChange={e => setKeyword(e.target.value)}></input>\n          <FontAwesomeIcon icon={faTimes} onClick={e => setKeyword('')} />\n        </div>\n        <div className={styles.selectSearchable_ItemsContainer}>\n          {filteredList.map((item, index) => <span key={index} className={`${styles.selectItem} ${props.selectedItems.findIndex(selectedItem => item === selectedItem) > -1 ? styles.selectSearchable_SelectedItem_Selected : ''}`} onClick={(e) => onClickItemHandler(e, item)}>{item}</span>)}\n        </div>\n      </div>}\n    </div>\n  )\n}\n\n\n","import React, { useEffect } from 'react'\nimport styles from './Modal.module.scss'\n\nimport { useSpring, animated, config } from 'react-spring'\n\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExclamationTriangle, faTimes } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Modal(props) {\n\n  const { visibility, toggleVisibility, message, css, backdrop } = props\n  const springBackdropProps = useSpring(\n    {\n      opacity: visibility ? 1 : 0,\n      from: { opacity: 0, zIndex: 10 },\n      config: config.gentle\n    }\n  )\n  const springModalProps = useSpring(\n    {\n      opacity: visibility ? 1 : 0,\n      top: visibility ? 0 : -25,\n      from: { opacity: 0 },\n      config: config.stiff\n    }\n  )\n\n  function onClickBackdropHandler(pEvent) {\n    if (pEvent.target.id === 'backdrop') toggleVisibility()\n  }\n\n  const backdropStyle = backdrop ? { backgroundColor: backdrop } : ''\n\n  return (\n    <animated.div style={springBackdropProps}>\n      <div\n        id=\"backdrop\"\n        className={`${styles.modalBackdrop} ${visibility ? '' : styles.modalBackdrop_freeze}`}\n        onClick={onClickBackdropHandler}\n        style={backdropStyle}>\n          <animated.div style={springModalProps}>\n            <div\n              className={styles.modalContainer}\n              style={css}>\n              <div className={styles.modalClose} onClick={toggleVisibility}>\n                <FontAwesomeIcon icon={faTimes} />\n              </div>\n              <div className={styles.modalHeader}>\n                <FontAwesomeIcon icon={faExclamationTriangle} />\n              </div>\n              <div className={styles.modalContent}>\n                {message}\n              </div>\n              <div className={styles.modalFooter}>\n                <button className={styles.modalBtn} onClick={toggleVisibility}>OK</button>\n              </div>\n          </div>\n        </animated.div>\n      </div>\n    </animated.div>\n  )\n}\n","\nexport default function initLayout() {\n\n  let isResizingSidebar = false\n  let isNavBarCollapsed = false\n\n  let sidebarWidth = 300\n  let sidebarMinWidth = 150\n  let sidebarMaxWidth = 400\n\n  const breakpoint = 1100\n  const navbarCollapsedWidth = 80\n  const navbarExpandedWidth = 250\n\n  const sidebarHandle = document.querySelector('#sidebarHandle')\n  const navigation = document.querySelector('#navigation')\n  const layout = document.querySelector('#page')\n  let pageWidth = window.innerWidth\n  const navigationSections = document.querySelectorAll('.navigation-section')\n\n  if (pageWidth < breakpoint) collapseNavigation()\n\n  const mouseDownEvent = sidebarHandle.addEventListener('mousedown', (e) => isResizingSidebar = true)\n  document.addEventListener('mouseup', (e) => {\n    isResizingSidebar = false\n    sidebarHandle.removeEventListener('mousedown', mouseDownEvent)\n  })\n  document.addEventListener('mousemove', (e) => {\n    if (isResizingSidebar) {\n      sidebarWidth = Math.min(Math.max(parseInt(pageWidth - e.clientX), sidebarMinWidth), sidebarMaxWidth)\n      setSidebarWidth(sidebarWidth)\n    }\n  })\n\n  function setSidebarWidth(pWidth) {\n    if ((pWidth > sidebarMinWidth) && pWidth < sidebarMaxWidth) {\n      if (!isNavBarCollapsed) {\n        layout.style.gridTemplateColumns = `${navbarExpandedWidth}px auto ${pWidth}px`\n      }\n      else if (isNavBarCollapsed) {\n        layout.style.gridTemplateColumns = `${navbarCollapsedWidth}px auto ${pWidth}px`\n      }\n    }\n  }\n\n  window.addEventListener('resize', (e) => {\n    pageWidth = e.target.innerWidth\n    if (pageWidth < breakpoint && !isNavBarCollapsed) {\n      layout.style.gridTemplateColumns = `${navbarCollapsedWidth}px auto ${sidebarWidth}px`\n      isNavBarCollapsed = !isNavBarCollapsed\n      collapseNavigation()\n    }\n    else if (pageWidth > breakpoint && isNavBarCollapsed) {\n      layout.style.gridTemplateColumns = `${navbarExpandedWidth}px auto ${sidebarWidth}px`\n      isNavBarCollapsed = !isNavBarCollapsed\n      expandNavigation()\n    }\n  })\n\n  navigation.addEventListener('mouseenter', e => {\n    if (pageWidth < breakpoint && isNavBarCollapsed) {\n\n    expandNavigation()\n    }\n  })\n  navigation.addEventListener('mouseleave', e => {\n    if (pageWidth < breakpoint && !isNavBarCollapsed) {\n\n    collapseNavigation()\n    }\n  })\n\n  function collapseNavigation() {\n    navigationSections.forEach(section => section.classList.add(\"collapsed\"))\n    layout.style.gridTemplateColumns = `${navbarCollapsedWidth}px auto ${sidebarWidth}px`\n    isNavBarCollapsed = true\n  }\n  function expandNavigation() {\n    navigationSections.forEach(section => section.classList.remove(\"collapsed\"))\n    layout.style.gridTemplateColumns = `${navbarExpandedWidth}px auto ${sidebarWidth}px`\n    isNavBarCollapsed = false\n  }\n\n\n}\n","import React, { useState, useEffect } from 'react'\nimport './App.scss'\n\nimport Control from './components/Control'\nimport SimpleTabs from './components/SimpleTabs'\nimport SelectSearchable from './components/SelectSearchable'\nimport Modal from './components/Modal'\nimport { getUniqID } from './utils'\nimport initLayout from './layout.js'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faStream, faCog, faLightbulb, faTrash, faCopy, faFolderPlus, faClone, faPaste, faExclamationTriangle, faFileCode, faUpload, faArrowRight, faExclamationCircle, faArrowLeft, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport ReactJson from 'react-json-view'\nimport { Base64 } from 'js-base64';\n\nlet idsCollection = {}\nlet idsLoadedList = new Set()\n\nfunction App() {\n\n  const saveSessionEnabled = true\n  let initialJson = { Sections: [{ SectionId: \"mjy5n\", Title: \"Section 1\", Elements: [] }] }\n  // Check if saved JSON is valid and assign it\n  if (saveSessionEnabled) {\n    const savedJson = JSON.parse(localStorage.getItem('currentJson'))\n    if (savedJson !== null) initialJson = savedJson\n  }\n\n  const [json, setJson] = useState(initialJson)\n  const [currentSectionIndex, setCurrentSectionIndex] = useState(0)\n  const [selectedControl, setSelectedControl] = useState({})\n  const [isValidId, setIsValidId] = useState(true)\n  const [idList, setIdList] = useState([])\n  const [idLoadedList, setIdLoadedList] = useState([])\n  const [usedTemplateList, setUsedTemplateList] = useState([])\n  const [mode, setMode] = useState('board')\n  const [currentKeyword, setCurrentKeyword] = useState('')\n  const [currentKeyboard, setCurrentKeyboard] = useState('')\n  const [currentSelectedValue, setCurrentSelectedValue] = useState('')\n  const [currentData, setCurrentData] = useState('')\n  const [selectedListDataIndex, setSelectedListDataIndex] = useState(0)\n\n  const [isModalDocketVisible, setIsModalDocketVisible] = useState(false)\n\n  let databaseFieldLocation = {from:'', to:''}\n\n  const singleUseElements = [\n    \"Document.TableOfContents\",\n    \"Document.Summary\",\n    \"Document.Summary2\",\n    \"Document.Summary3\",\n    \"Document.Summary4\",\n    \"Emailregister\",\n    \"Smsregister\",\n    \"QRScanner.List\",\n    \"SignatureSignOnOff\"\n  ]\n\n  useEffect(() => {\n    initLayout()\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('currentJson', JSON.stringify(json))\n    // console.log('---> json updated: ', JSON.stringify(json))\n  }, [json])\n\n\n  /**-------------------------------------------------**\n  * @desc - DRAG AND DROP                         -----*\n  *----------------------------------------------------*/\n\n  let controlsHandler = e => {\n    e.dataTransfer.setData(\"text/plain\", e.target.id)\n  }\n  let onDragOverHandler = e => {\n    e.preventDefault()\n  }\n  let onDropHandler = e => {\n    e.preventDefault()\n    const elementName = e.dataTransfer.getData(\"text/plain\")\n\n    let targetID = e.target.id\n    let parentID = targetID.substring(0, 11)\n\n    const notAllowedElements = [\n      \"Matrix\",\n      \"Matrixbutton\",\n      \"Repeatable\",\n      \"Document.TableOfContents\",\n      \"Document.Summary\",\n      \"Document.Summary2\",\n      \"Document.Summary3\",\n      \"Document.Summary4\",\n      \"Emailregister\",\n      \"Smsregister\",\n      \"QRScanner.List\",\n      \"SignatureSignOnOff\"\n    ]\n\n    if (singleUseElements.indexOf(elementName) > -1) setUsedTemplateList([...usedTemplateList, elementName])\n\n\n    let isValidElement = true\n    if (notAllowedElements.findIndex(element => element === elementName) > -1) {\n      isValidElement = false\n    }\n\n\n    // ---------------------------------------------------------------------------- MATRIX : ADD Elements\n    if (targetID.includes('matrix')) {\n      if (!isValidElement) {\n        alert('Control not alowed inside a Matrix')\n        return\n      }\n      let newElement = getNewElement(elementName)\n      let droppedPosition = {\n        row: targetID.substring(targetID.lastIndexOf('-row') + 4, targetID.lastIndexOf('-col')),\n        col: targetID.substring(targetID.lastIndexOf('-col') + 4, targetID.length)\n      }\n\n      const parentElement = getElementFromElementId(parentID)\n      const elementRow = parentElement.Elements[droppedPosition.row]\n      elementRow.Elements[droppedPosition.col] = newElement\n\n      const jsonToUpdate = JSON.parse(JSON.stringify(json))\n      setJson({ ...jsonToUpdate })\n    }\n    else if (targetID.includes('repeatable')) {\n      if (!isValidElement) {\n        alert('Control not alowed inside a Repeatable')\n        return\n      }\n      let newElement = getNewElement(elementName)\n      const parentElement = getElementFromElementId(parentID)\n      parentElement.Elements.push(newElement)\n\n      const jsonToUpdate = JSON.parse(JSON.stringify(json))\n      setJson({ ...jsonToUpdate })\n    }\n    // ---------------------------------------------------------------------------- TEMPLATES : ADD Elements\n    else {\n      switch (elementName) {\n        case \"Document.TableOfContents\":\n          // prependToFirstSection(elementName,\n          addAsFirstSection(elementName,\n            { Type: \"Document.TableOfContents\", Title: \"Table Of Contents\", Id: \"DocTableOfContents\", ElementId: getUniqID() },\n          )\n          break\n        case \"Document.Summary\":\n          addToNewSection(\"Document Summary\", [\n            { Type: \"DocumentSummaryGrid\", Title: \"Show Summary\", Id: \"DocumentSummaryGrid\", ElementId: getUniqID() },\n            { Type: \"Button.Submit.Register\", Id: \"Button.Submit.Register\", Title: \"Submit to Register\", ElementId: getUniqID() },\n            { Type: \"Button.View.Document\", Id: \"Button.View.Document\", Title: \"View Document\", ElementId: getUniqID() }])\n          break\n        case \"Document.Summary2\":\n          addToNewSection(\"Document Summary\", [\n            { Type: \"DocumentSummaryGrid\", Title: \"Show Summary\", Id: \"DocumentSummaryGrid\", ElementId: getUniqID() },\n            { Type: \"Button.Submit.Register\", Title: \"Submit to Register\", Id: \"Button.Submit.Register\", ElementId: getUniqID() },\n            { Type: \"Button.Closeout\", Title: \"Close out\", Id: \"Button.Closeout\", ElementId: getUniqID() },\n            { Type: \"Button.View.Document\", Title: \"View Document\", Id: \"Button.View.Document\", ElementId: getUniqID() },\n          ])\n          break\n        case \"Document.Summary3\":\n          addToNewSection(\"Document Summary\", [\n            { Type: \"DocumentSummaryGrid\", Title: \"Show Summary\", Id: \"DocumentSummaryGrid\", ElementId: getUniqID() },\n            { Type: \"Button.Submit.Register\", Title: \"Submit to Register\", Id: \"Button.Submit.Register\", ElementId: getUniqID() },\n            { Type: \"Button.Send.SMS\", Title: \"Send SMS\", Id: \"Button.Send.SMS\", ElementId: getUniqID() },\n            { Type: \"Button.Send.Email\", Title: \"Send Email\", Id: \"Button.Send.Email\", ElementId: getUniqID() },\n            { Type: \"Button.View.Document\", Title: \"View Document\", Id: \"Button.View.Document\", ElementId: getUniqID() }\n          ])\n          break\n        case \"Document.Summary4\":\n          addToNewSection(\"Document Summary\", [\n            { Type: \"DocumentSummaryGrid\", Title: \"Show Summary\", Id: \"DocumentSummaryGrid\", ElementId: getUniqID() },\n            { Type: \"Button.Submit.Register\", Title: \"Submit to Register\", Id: \"Button.Submit.Register\", ElementId: getUniqID() },\n            { Type: \"Button.Closeout\", Title: \"Close out\", Id: \"Button.Closeout\", ElementId: getUniqID() },\n            { Type: \"Button.Send.SMS\", Title: \"Send SMS\", Id: \"Button.Send.SMS\", ElementId: getUniqID() },\n            { Type: \"Button.Send.Email\", Title: \"Send Email\", Id: \"Button.Send.Email\", ElementId: getUniqID() },\n            { Type: \"Button.View.Document\", Title: \"View Document\", Id: \"Button.View.Document\", ElementId: getUniqID() },\n          ])\n          break\n        case \"Emailregister\":\n          addToNewSection(elementName, [\n            { Type: \"SearchableListEntryDialogEmail\", Title: \"Select from Project Directory\", Id: \"ContactListEmail\", Api: \"ProjectContacts.Email\", ValidationMessage: \"Permit Holder Required\", AssociatedId: { names: [\"ManualEmailName\", \"ManualEmailEmail\"] }, ElementId: getUniqID() },\n            { Type: \"Label\", Title: \"OR\", ElementId: getUniqID() },\n            { Type: \"Label\", Title: \"Add manually below\", ElementId: getUniqID() },\n            { Type: \"Text\", Title: \"Name\", Id: \"ManualEmailName\", Format: {}, ValidationMessage: \"Name Required\", Mandatory : true, AssociatedId: { names: [\"ManualEmailEmail\"] }, ElementId: getUniqID() },\n            { Type: \"Text\", Title: \"Email\", Id: \"ManualEmailEmail\", Format: {}, ValidationMessage: \"Number Required and should be 10 characters long\", Mandatory : true, AssociatedId: { names: [\"ManualEmailName\"] }, ElementId: getUniqID() },\n            { Type: \"Button.Add.Email\", Title: \"Add contact manually\", Title2: \"Number\", ElementId: getUniqID() },\n            { Type: \"SearchableEmailListView\", Title: \"Name\", Id: \"NameEmailList\", Title2: \"Number\", Api: \"ProjectContacts\", ElementId: getUniqID() }\n          ])\n          break\n        case \"Smsregister\":\n          addToNewSection(elementName, [\n            { Type: \"SearchableListEntryDialogSMS\", Title: \"Select from Project Directory\", Id: \"ContactListSMS\", ValidationMessage: \"Permit Holder Required\", Api: \"ProjectContacts\", AssociatedId: { names: [\"ManualSMSName\", \"ManualSMSPhone\"] }, ElementId: getUniqID() },\n            { Type: \"Label\", Title: \"OR\", ElementId: getUniqID() },\n            { Type: \"Label\", Title: \"Add manually below\", ElementId: getUniqID() },\n            { Type: \"Text\", Title: \"Name\", Id: \"ManualSMSName\", Format: {}, ValidationMessage: \"Name Required\", Mandatory : true, AssociatedId: { names: [\"ManualSMSPhone\"] }, ElementId: getUniqID() },\n            { Type: \"Text\", Title: \"Phone No\", Id: \"ManualSMSPhone\", Format: {}, ValidationMessage: \"Number Required and should be 10 characters long\", Mandatory : true, AssociatedId: { names: [\"ManualSMSName\"] }, ElementId: getUniqID() },\n            { Type: \"Button.Add.SMS\", Title: \"Add contact manually\", Title2: \"Number\", ElementId: getUniqID() },\n            { Type: \"SearchableSMSListView\", Title: \"Name\", Title2: \"Number\", Id: \"NameSMSList\", Api: \"ProjectContacts\", ElementId: getUniqID() }\n          ])\n          break\n        case \"QRScanner.List\":\n          addToNewSection(elementName, [\n            // { Type: \"QRScanner.List\", Title: \"QR scanner list\", Id: \"QReSignOnOffScanner\", ElementId: getUniqID() }\n            {Type:\"QRScanner.List\", Title:\"QR scanner list\", EntryTitle:\"Please click to scan QR code\", Id:\"QReSignOnOffScanner\", ElementId: getUniqID()}\n          ])\n          break\n        case \"SignatureSignOnOff\":\n          addToNewSection(elementName, [\n          // addToCurrentSection(elementName, [\n            { Type: \"Text\", Title: \"Name\", Id: \"SignatureSignOnOffName\", Format: {}, ElementId: getUniqID() },\n            { Type: \"Signature\", Title: \"Please sign above the line\", Id: \"SignatureSignOnOffSignature\", ElementId: getUniqID() },\n            { Type: \"Button.Add.Signature\", Title: \"Add Signature\", ElementId: getUniqID() },\n            { Type: \"Register.Signatures\", Title: \"Signatures\", Id: \"SignatureSignOnOff\", ElementId: getUniqID() }\n          ])\n          break\n\n        default:\n          addToCurrentSection(elementName)\n          break\n      }\n    }\n  }\n\n  /**-------------------------------------------------**\n  * @desc - Manage sections                       -----*\n  *----------------------------------------------------*/\n\n  function addToCurrentSection(pElement, pChildren) {\n    let newElement\n    if (pElement === \"Matrix\") newElement = getNewElement(pElement, true)\n    else if (pElement === \"Repeatable\") newElement = getNewElement(pElement, false, true)\n    else if (pElement === \"SignatureSignOnOff\") newElement = getNewElement(pElement, false, false, pChildren)\n    else if (pElement === \"QRScanner.List\") newElement = getNewElement(pElement, false, false, pChildren)\n    else newElement = getNewElement(pElement)\n\n    if (pElement === \"Trilean.Label\") {\n      initButtonsProperty(newElement)\n      initDefaultValues(newElement)\n    }\n    if (pElement === \"Text\") initFormatProperty(newElement)\n\n    if (json.Sections[currentSectionIndex] !== undefined) {\n      let currentElements = json.Sections[currentSectionIndex].Elements\n      currentElements.push(newElement)\n      setJson({ Sections: [...json.Sections] })\n    }\n    else {\n      let currentSection\n      currentSection = getNewSection()\n      currentSection.Elements.push(newElement)\n      setJson({ Sections: [...json.Sections, currentSection] })\n      if (currentSectionIndex > 0) setCurrentSectionIndex(currentSectionIndex + 1)\n    }\n  }\n\n  function addNewSection() {\n    setJson({ Sections: [...json.Sections, getNewSection()] })\n    if (json.Sections.length > 0) setCurrentSectionIndex(json.Sections.length)\n  }\n\n  function addToNewSection(pElement, pChildren) {\n    let newSection = getNewSection(pElement)\n\n    pChildren.forEach(child => newSection.Elements.push(child))\n\n    setJson({ Sections: [...json.Sections, newSection] })\n    if (json.Sections.length > 0) setCurrentSectionIndex(json.Sections.length)\n  }\n\n  function prependToFirstSection(pElement, pDefaultValues) {\n    const newElement = pDefaultValues\n    let currentSection = json.Sections[currentSectionIndex]\n\n    if (currentSection !== undefined) {\n      const firstSection = json.Sections[0].Elements\n      firstSection.unshift(newElement)\n\n      setJson({ Sections: [...json.Sections] })\n      setCurrentSectionIndex(0)\n      setSelectedControl(newElement)\n    }\n    else {\n      currentSection = getNewSection()\n      currentSection.Elements.unshift(newElement)\n      json.Sections.push(currentSection)\n      setJson({ Sections: [...json.Sections] })\n      setSelectedControl(newElement)\n    }\n  }\n\n  function addAsFirstSection(pElement, pDefaultValues) {\n    const title = pElement === \"Document.TableOfContents\" ? \"Table Of Contents\" : undefined\n    let newSection = getNewSection(title)\n    newSection.Elements.push(pDefaultValues)\n\n    setJson({ Sections: [newSection, ...json.Sections] })\n    setCurrentSectionIndex(0)\n\n    let currentSection = json.Sections[0]\n  }\n\n  // TODO - REMOVE IDs ON THE DUPLICATED SECTION CONTROLS -----------------------------------------------------//\n  function duplicateSection() {\n\n    if (json.Sections[currentSectionIndex] !== undefined) {\n      // Deep copy\n      let sectionToDuplicate = JSON.parse(JSON.stringify(json.Sections[currentSectionIndex]))\n\n      sectionToDuplicate.SectionId = getUniqID(5)\n      sectionToDuplicate.Title = `${json.Sections[currentSectionIndex].Title}-copy`\n      sectionToDuplicate.Elements.forEach(item => {\n        if (item.ElementId === undefined || item.ElementId.length > 0) item.ElementId = getUniqID(11)\n        if (item.Id !== undefined) item.Id = `${item.Id}-copy`\n        if (item.Elements) {\n          item.Elements.forEach(subitem => {\n            if (subitem.ElementId === undefined || subitem.ElementId.length > 0) subitem.ElementId = getUniqID(11)\n            if (subitem.Id !== undefined) subitem.Id = `${subitem.Id}-copy`\n            if (subitem.Elements) {\n              subitem.Elements.forEach(subsubitem => {\n                if (subsubitem.Id !== undefined) subsubitem.Id = `${subsubitem.Id}-copy`\n                if (subsubitem.ElementId !== undefined) subsubitem.ElementId = getUniqID(11)\n              })\n            }\n\n          })\n        }\n      })\n\n      setJson({ Sections: [...json.Sections.slice(0, currentSectionIndex + 1), sectionToDuplicate, ...json.Sections.slice(currentSectionIndex + 1)] })\n      setCurrentSectionIndex(currentSectionIndex + 1)\n    }\n  }\n\n  function removeSection() {\n    let sections = json.Sections.filter((section, index) => {\n      if (index !== currentSectionIndex) return section\n      return false\n    })\n\n    setCurrentSectionIndex(json.Sections.length - 2)\n    setJson({ Sections: [...sections] })\n  }\n\n  function moveSectionLeft() {\n    if (currentSectionIndex > 0) {\n      const reorderedSections = json.Sections\n      reorderedSections.splice(currentSectionIndex, 0, reorderedSections.splice(currentSectionIndex - 1, 1)[0])\n      setCurrentSectionIndex(currentSectionIndex - 1)\n      setJson({ Sections: [...reorderedSections] })\n    }\n  }\n\n  function moveSectionRight() {\n    if (currentSectionIndex + 1 < json.Sections.length) {\n      const reorderedSections = json.Sections\n      reorderedSections.splice(currentSectionIndex, 0, reorderedSections.splice(currentSectionIndex + 1, 1)[0])\n      setCurrentSectionIndex(currentSectionIndex + 1)\n      setJson({ Sections: [...reorderedSections] })\n    }\n  }\n\n  /**-------------------------------------------------**\n  * @desc - Utilities                             -----*\n  *----------------------------------------------------*/\n\n  function getNewSection(pTitle) {\n    const sectionTitle = pTitle === undefined ? `Section ${json.Sections.length + 1 || 1}` : pTitle\n    return (\n      {\n        SectionId: getUniqID(5),\n        Title: sectionTitle,\n        Elements: []\n      }\n    )\n  }\n\n  function getNewElement(pElement, pIsMatrix, pIsRepeatable, pChildren) {\n    // Repeatable children length are not known\n    const matrixElementsInit = [{\n      Type: \"GridRow\",\n      ElementId: \"odkwm-mjq3n\",\n      Elements: [\n        {}\n      ]\n    }]\n\n    if (pIsMatrix) {\n      return (\n        {\n          Type: pElement,\n          Id: getDefaultID(pElement),\n          ElementId: getUniqID(11),\n          Columns: \"1\",\n          Rows: \"1\",\n          Elements: matrixElementsInit\n        }\n      )\n    }\n    if (pIsRepeatable) {\n      return (\n        {\n          Type: pElement,\n          Id: getDefaultID(pElement),\n          ElementId: getUniqID(11),\n          Elements: []\n        }\n      )\n    }\n    else {\n      if (pChildren) {\n        return (\n          {\n            Type: pElement,\n            ElementId: getUniqID(11),\n            Elements: pChildren\n          }\n        )\n      }\n      else if (pElement.includes('Button')) {\n        if (pElement === \"Button.Add.DocketNumber\")\n        return (\n          {\n            Type: pElement,\n            Id: 'Button.Add.DocketNumber',\n            ElementId: getUniqID(11),\n            Title: \"Delivery Docket Number\",\n          }\n        )\n        else return (\n          {\n            Type: pElement,\n            ElementId: getUniqID(11)\n          }\n        )\n      }\n      else {\n        return (\n          {\n            Type: pElement,\n            Id: getDefaultID(pElement),\n            ElementId: getUniqID(11),\n          }\n        )\n      }\n    }\n  }\n\n  function getElementFromElementId(pElementID) {\n    const currentSection = json.Sections[currentSectionIndex]\n    let foundItem = {}\n\n    currentSection.Elements.forEach(item => {\n      if (item.hasOwnProperty('Elements')) {\n\n        item.Elements.forEach(subitem => {\n          if (subitem.hasOwnProperty('Elements')) {\n\n            subitem.Elements.forEach(subsubitem => {\n              if (subsubitem.ElementId === pElementID) {\n                // console.log('---> Trouvé subsubitem: ', subsubitem)\n                foundItem = subsubitem\n              }\n            })\n\n          }\n\n          if (subitem.ElementId === pElementID) {\n            // console.log('---> Trouvé subitem: ', subitem)\n            foundItem = subitem\n          }\n\n        })\n      }\n\n      if (item.ElementId === pElementID) {\n        // console.log('---> Trouvé item: ', item)\n        foundItem = item\n      }\n\n    })\n    return foundItem\n  }\n\n  function getElementsFromId(pID) {\n    let foundItem = []\n    json.Sections.forEach(section => {\n      section.Elements.forEach(item => {\n        if (item.hasOwnProperty('Elements')) {\n\n          item.Elements.forEach(subitem => {\n            if (subitem.hasOwnProperty('Elements')) {\n\n              subitem.Elements.forEach(subsubitem => {\n                if (subsubitem.Id === pID) {\n                  // console.log('---> Trouvé subsubitem: ', subsubitem)\n                  foundItem.push(subsubitem)\n                }\n              })\n\n            }\n\n            if (subitem.Id === pID) {\n              // console.log('---> Trouvé subitem: ', subitem)\n              foundItem.push(subitem)\n            }\n\n          })\n        }\n\n        if (item.Id === pID) {\n          // console.log('---> Trouvé item: ', item)\n          foundItem.push(item)\n        }\n\n      })\n    })\n\n    return foundItem\n  }\n\n  function getElementsFromType(pType) {\n    let foundItem = []\n    json.Sections.forEach(section => {\n      section.Elements.forEach(item => {\n        if (item.hasOwnProperty('Elements')) {\n\n          item.Elements.forEach(subitem => {\n            if (subitem.hasOwnProperty('Elements')) {\n\n              subitem.Elements.forEach(subsubitem => {\n                if (subsubitem.Type === pType) {\n                  // console.log('---> Trouvé subsubitem: ', subsubitem)\n                  foundItem.push(subsubitem)\n                }\n              })\n\n            }\n\n            if (subitem.Type === pType) {\n              // console.log('---> Trouvé subitem: ', subitem)\n              foundItem.push(subitem)\n            }\n\n          })\n        }\n\n        if (item.Type === pType) {\n          // console.log('---> Trouvé item: ', item)\n          foundItem.push(item)\n        }\n\n      })\n    })\n\n    return foundItem\n  }\n\n  function getCurrentSection() {\n    return json.Sections[currentSectionIndex]\n  }\n\n  function deleteElementFromId(pElementID) {\n    let jsonToUpdate = { ...json }\n    setSelectedControl({ ElementId: 0 })\n\n    const currentSection = jsonToUpdate.Sections[currentSectionIndex]\n\n    currentSection.Elements.forEach((item, index) => {\n      if (item.hasOwnProperty('Elements')) {\n\n        item.Elements.forEach((subitem, subindex) => {\n          if (subitem.hasOwnProperty('Elements')) {\n\n            subitem.Elements.forEach((subsubitem, subsubindex) => {\n              if (subsubitem.ElementId === pElementID) {\n                let elementsToFilter = [...subitem.Elements]\n                const elementsIndex = elementsToFilter.findIndex(subsubitem => subsubitem.ElementId === pElementID)\n                elementsToFilter[elementsIndex] = {}\n                subitem.Elements = elementsToFilter\n              }\n            })\n\n          }\n\n          if (subitem.ElementId === pElementID) {\n            let elementsToFilter = [...item.Elements]\n\n            elementsToFilter = elementsToFilter.filter(subitem => subitem.ElementId !== pElementID)\n            item.Elements = elementsToFilter\n          }\n\n        })\n      }\n\n      if (item.ElementId === pElementID) {\n        const newElements = currentSection.Elements.filter(item => item.ElementId !== pElementID)\n        currentSection.Elements = newElements\n      }\n\n    })\n\n    setJson(jsonToUpdate)\n\n  }\n\n  function getParentElementFromId(pElementID) {\n    const currentSection = json.Sections[currentSectionIndex]\n    let foundItem = {}\n\n    currentSection.Elements.forEach(item => {\n      if (item.hasOwnProperty('Elements')) {\n\n        item.Elements.forEach(subitem => {\n          if (subitem.hasOwnProperty('Elements')) {\n\n            subitem.Elements.forEach(subsubitem => {\n              if (subsubitem.ElementId === pElementID) {\n                // console.log('---> Trouvé subsubitem: ', subsubitem)\n                foundItem = subitem\n              }\n            })\n\n          }\n\n          if (subitem.ElementId === pElementID) {\n            // console.log('---> Trouvé subitem: ', subitem)\n            foundItem = item\n          }\n\n        })\n      }\n\n      if (item.ElementId === pElementID) {\n        // console.log('---> Trouvé item: ', item)\n        foundItem = currentSection.Elements\n      }\n\n    })\n    return foundItem\n  }\n\n  function validateId(pID) {\n    if (getElementsFromId(pID).length > 0) setIsValidId(false)\n    else setIsValidId(true)\n  }\n\n  function initButtonsProperty(pElement) {\n    const buttons = [{\n      Button: \"Yes\",\n      Label: \"Yes\",\n      BackgroundColor: \"#D3D3D3\",\n      BackgroundColorSelected: \"#66ff33\"\n    },{\n      Button: \"No\",\n      Label: \"No\",\n      BackgroundColor: \"#D3D3D3\",\n      BackgroundColorSelected: \"#d63a3a\"\n    },{\n      Button: \"NA\",\n      Label: \"Not Applicable\",\n      BackgroundColor: \"#D3D3D3\",\n      BackgroundColorSelected: \"#808080\"\n    }]\n    pElement.Buttons = buttons\n  }\n\n  function initFormatProperty(pElement) {\n    pElement.Format = {}\n  }\n  function initDefaultValues(pElement) {\n    if (pElement.Type === \"Trilean.Label\") {\n      pElement.Title = \"comment\"\n      pElement.CommentValue = \"comment written here\"\n    }\n  }\n\n  /**--------------------------------------------------**\n   * @desc - Return building Panel                 -----*\n   *----------------------------------------------------*/\n\n  // ---> ENTRY POINT\n  function getHTML() {\n    if (json.Sections.length > 0) {\n      let currentSectionToRender = json.Sections[currentSectionIndex]\n      if (currentSectionToRender.Elements.length > 0) return currentSectionToRender.Elements.map(item => {\n        // Build list of Ids at load time\n        idsLoadedList.add(item.Id)\n        return getControl(item)\n      })\n    }\n  }\n\n  function getControl(pItem) {\n    let id = pItem.ElementId\n\n    if (pItem.DatabaseField === 'ValidFrom') {\n      console.log('DatabaseField FROM found here: ', id)\n      databaseFieldLocation.from = id\n    }\n    if (pItem.DatabaseField === 'ValidTo') {\n      console.log('DatabaseField TO found here: ', id)\n      databaseFieldLocation.to = id\n    }\n    return <Control\n      controlObj={pItem}\n      selectedControl={selectedControl}\n      onClickHandler={(control) => {\n        // Select control from control's child\n        if (control.ElementId) onSelectControlHandler(control)\n        // Select control\n        else onSelectControlHandler(pItem)\n      }}\n      moveUp={(control, pIsSubControl) => moveUpHandler(control, pIsSubControl)}\n      moveDown={(control, pIsSubControl) => moveDownHandler(control, pIsSubControl)}\n      delete={(control) => deleteHandler(control)}\n      key={id} />\n  }\n\n  function onSelectControlHandler(pControl) {\n    setCurrentKeyword('')\n    setSelectedControl(pControl)\n  }\n\n  /**-------------------------------------------------**\n  * @desc - Build the HTML from JSON              -----*\n  *----------------------------------------------------*/\n  function onJsonChangeHandler(e) {\n    let currentValue = JSON.parse(document.getElementById('json-output').value)\n    setJson(currentValue)\n  }\n\n  /**-------------------------------------------------**\n  * @desc - Build the Panels tabs                 -----*\n  *----------------------------------------------------*/\n  let sectionNavigation = () => {\n    if (json.Sections.length > 0) {\n      return json.Sections.map((section, index) => {\n        let sectionTitle = (json.Sections[index] !== undefined) ? json.Sections[index].Title : ''\n        return <button\n          key={index}\n          onClick={() => setCurrentSectionIndex(index)}\n          className={`tab-section ${currentSectionIndex === index ? 'tab-active' : ''}`}\n        >{sectionTitle}</button>\n      })\n    }\n  }\n\n  /**-------------------------------------------------**\n  * @desc - Manipulate the JSON                   -----*\n  *----------------------------------------------------*/\n\n  function moveUpHandler(pControl, pIsSubControl) {\n    const parentElement = getParentElementFromId(pControl.ElementId)\n    moveElement(pControl, parentElement, 'moveUp', pIsSubControl)\n\n  }\n  function moveDownHandler(pControl, pIsSubControl) {\n    const parentElement = getParentElementFromId(pControl.ElementId)\n    moveElement(pControl, parentElement, 'moveDown', pIsSubControl)\n  }\n\n  function moveElement(pControl, pParentElement, pDirection, pIsSubControl) {\n    const container = (!pIsSubControl) ? pParentElement : pParentElement.Elements\n\n    const position = container.findIndex(item => item.ElementId === pControl.ElementId)\n    switch (pDirection) {\n      case 'moveUp':\n        if (position > 0) {\n          container.splice(position - 1, 0, container.splice(position, 1)[0])\n        }\n        break\n      case 'moveDown':\n        if (position < container.length - 1) {\n          container.splice(position + 1, 0, container.splice(position, 1)[0])\n        }\n        break\n      default:\n        break\n    }\n    setJson({ ...json })\n  }\n\n  function deleteHandler(pControl) {\n\n    deleteElementFromId(pControl.ElementId)\n  }\n\n  /**-------------------------------------------------**\n  * @desc - Build the properties Panel            -----*\n  *----------------------------------------------------*/\n\n  function getPropertiesPanel(pSelectedControl) {\n    const basicPropertiesIDs = [\"DocumentSummaryGrid\",\n    \"Register.Signatures\",\n    \"Button.Add.DocketNumber\"\n    ]\n\n    const buttonPropertiesIDs = [\"Button.Submit.Register\",\n      \"Button.View.Document\",\n      \"Button.Closeout\",\n      \"Button.Send.SMS\",\n      \"Button.Send.Email\",\n      \"Button.Add.Signature\",\n      // \"Button.Add.Email\",\n      // \"Button.Add.SMS\",\n      \"Button.Add.ReportDate\"\n    ]\n\n    const signaturePropertiesIDs = [\"Signature\",\n      \"Signature.Date\",\n      \"Signature.DateTime\"\n    ]\n\n    const booleanPropertiesIDs = [\"SingleBoolean\",\n      \"Boolean\"\n    ]\n\n    const imagePropertiesIDs = [\"Image\",\n      \"Image.Single\"\n    ]\n\n    const qrscannerPropertiesIDs = [\"QRScanner\",\n      \"QRScanner.List\"\n    ]\n\n    let keyWordsList = []\n\n    const globalProperties = <>\n      <div className=\"properties-form-row\">\n        <label htmlFor=\"identifier\">ID</label>\n        <input type=\"text\" name=\"identifier\" id=\"identifier\" value={selectedControl.Id || ''} onChange={(e) => setControlID(e)} />\n      </div>\n      <div className=\"properties-form-row\">\n        <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} />\n      </div>\n      <div className=\"properties-form-row\">\n        <label htmlFor=\"isvisible\">Is Visible</label>\n        <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n      </div>\n    </>\n\n    if (pSelectedControl.Type === \"Repeatable\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n      </div>\n    }\n\n    // PANEL FOR SECTION\n    if (pSelectedControl.Type === undefined) {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"title\">Title</label>\n          <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} />\n        </div>\n      </div>\n    }\n\n    if (basicPropertiesIDs.includes(pSelectedControl.Type)) {\n      return <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n        {globalProperties}\n      </div>\n    }\n\n    if (booleanPropertiesIDs.includes(pSelectedControl.Type)) {\n      const defaultValue = pSelectedControl.Type !== 'SingleBoolean' ? <div className=\"properties-form-row-elements\">\n        <label htmlFor=\"yes\">Yes</label>\n        <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} />\n        <label htmlFor=\"no\">No</label>\n        <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === \"N\"} onChange={(e) => setControlValue(e)} />\n      </div> :\n      <div className=\"properties-form-row-elements\">\n        <input type=\"checkbox\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlUniqueValue(e)} />\n        <label htmlFor=\"yes\">Yes</label>\n      </div>\n      return <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n          <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n              {defaultValue}\n            </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"details\">Details</label>\n          <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <div className=\"properties-form-row-container\">\n            <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n            <label htmlFor=\"collapsible\">Details Collapsible</label>\n            <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n            <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"commentvalue\">Comment</label>\n          <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"entrytitle\">Comment Title</label>\n          <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"showcomment\">Show Comment</label>\n          <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n        </div>\n      </div>\n    }\n\n    if (buttonPropertiesIDs.includes(pSelectedControl.Type)) {\n      return <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n        {/* <label htmlFor=\"title\">Title</label>\n        <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} /> */}\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isvisible\">IsVisible</label>\n            <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isbuttondisabled\">IsButtonDisabled</label>\n            <input type=\"checkbox\" name=\"isbuttondisabled\" id=\"isbuttondisabled\" checked={Boolean(selectedControl.IsButtonDisabled) || false} onChange={(e) => setControlIsButtonDisabled(e)} />\n          </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Button.Add.Email\" || pSelectedControl.Type === \"Button.Add.SMS\") {\n      return <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"title\">Title</label>\n            <input type=\"text\" name=\"title\" id=\"title\" value={selectedControl.Title || ''} onChange={(e) => setControlTitle(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"title2\">Title 2</label>\n            <input type=\"text\" name=\"title2\" id=\"title2\" value={selectedControl.Title2 || ''} onChange={(e) => setControlTitle2(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isvisible\">IsVisible</label>\n            <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isbuttondisabled\">IsButtonDisabled</label>\n            <input type=\"checkbox\" name=\"isbuttondisabled\" id=\"isbuttondisabled\" checked={Boolean(selectedControl.IsButtonDisabled) || false} onChange={(e) => setControlIsButtonDisabled(e)} />\n          </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Matrix\") {\n      return <div id={`panel-${pSelectedControl.ElementId}`} className=\"properties-form\">\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"identifier\">ID</label>\n            <input type=\"text\" name=\"identifier\" id=\"identifier\" value={selectedControl.Id} onChange={(e) => setControlID(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"columns\">Columns</label>\n            <input type=\"number\" name=\"columns\" id=\"columns\" value={selectedControl.Columns || ''} onChange={(e) => setControlColumns(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"rows\">Rows</label>\n            <input type=\"number\" name=\"rows\" id=\"rows\" value={selectedControl.Rows || ''} onChange={(e) => setControlRows(e)} />\n          </div>\n          <div className=\"properties-form-row\">\n            <label htmlFor=\"isvisible\">IsVisible</label>\n            <input type=\"checkbox\" name=\"isvisible\" id=\"isvisible\" checked={Boolean(selectedControl.IsVisible) || false} onChange={(e) => setControlIsVisible(e)} />\n          </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Document.TableOfContents\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"API\") {\n      if (selectedControl.Keywords !== undefined) {\n          keyWordsList = selectedControl.Keywords.Keys.map((keyword, index) => {\n          return <div className=\"properties-form-row-container keyword-row\" key={index}>\n            <div>{keyword}</div>\n            <div onClick={() => deleteKeyword(keyword)}><FontAwesomeIcon\n              icon={faTrashAlt}\n              title=\"Remove\"\n            /></div>\n          </div>\n        })\n      }\n\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"api\">Api</label>\n          <select name=\"api\" id=\"api\" value={selectedControl.Api || 0} onChange={(e) => setControlApi(e)}>\n            <option value=\"Select an Api\">Select an Api</option>\n            <option value=\"ProjectContacts\">- Project Contacts</option>\n            <option value=\"GlobalContacts\">- Global Contacts</option>\n            <option value=\"ProjectCompany\">- Project Company</option>\n            <option value=\"ABS\">- ABS</option>\n            <option value=\"CBS\">- CBS</option>\n            <option value=\"DBS\">- DBS</option>\n            <option value=\"FBS\">- FBS</option>\n            <option value=\"TBS\">- TBS</option>\n            <option value=\"PBS\">- PBS</option>\n            <option value=\"PCBS\">- PCBS</option>\n            <option value=\"WBS\">- WBS</option>\n          </select>\n        </div>\n        <div className=\"properties-form-row\">\n          <div className={`properties-form-row-container ${(selectedControl.Api !== \"ProjectContacts\") ? 'hidden' : ''}`}>\n            <label htmlFor=\"includephonenumber\">Include Phone Number</label>\n            <input type=\"checkbox\" name=\"includephonenumber\" id=\"includephonenumber\" checked={Boolean(selectedControl.IncludePhoneNumber) || false} onChange={(e) => setControlIncludePhoneNumber(e)} />\n          </div>\n          <div className={`properties-form-row-container ${(selectedControl.Api !== \"ProjectContacts\") ? 'hidden' : ''}`}>\n            <label htmlFor=\"includeemail\">Include Email</label>\n            <input type=\"checkbox\" name=\"includeemail\" id=\"includeemail\" checked={Boolean(selectedControl.IncludeEmail) || false} onChange={(e) => setControlIncludeEmail(e)} />\n          </div>\n          <div className={`properties-form-row-container ${(selectedControl.Api !== \"ProjectCompany\") ? 'hidden' : ''}`}>\n            <label htmlFor=\"includetitle\">Include Title</label>\n            <input type=\"checkbox\" name=\"includetitle\" id=\"includetitle\" checked={Boolean(selectedControl.IncludeTitle) || false} onChange={(e) => setControlIncludeTitle(e)} />\n          </div>\n          <div className={`properties-form-row-container ${(selectedControl.Api !== \"ProjectCompany\") ? 'hidden' : ''}`}>\n            <label htmlFor=\"includebusinessnumber\">Include Business Number</label>\n            <input type=\"checkbox\" name=\"includebusinessnumber\" id=\"includebusinessnumber\" checked={Boolean(selectedControl.IncludeBusinessNumber) || false} onChange={(e) => setControlIncludeBusinessNumber(e)} />\n          </div>\n          <div className={`properties-form-row-container ${(selectedControl.Api !== \"ProjectCompany\") ? 'hidden' : ''}`}>\n            <label htmlFor=\"includeabbreviation\">Include Abbreviation</label>\n            <input type=\"checkbox\" name=\"includeabbreviation\" id=\"includeabbreviation\" checked={Boolean(selectedControl.IncludeAbbreviation) || false} onChange={(e) => setControlIncludeAbbreviation(e)} />\n          </div>\n          <div className={`properties-form-row-container ${(selectedControl.Api !== \"ProjectContacts\" && selectedControl.Api !== \"ProjectCompany\"  && selectedControl.Api !== \"GlobalContacts\") ? '' : 'hidden'}`}>\n            <label htmlFor=\"includetitle\">Include Title</label>\n            <input type=\"checkbox\" name=\"includetitle\" id=\"includetitle\" checked={Boolean(selectedControl.IncludeTitle) || false} onChange={(e) => setControlIncludeTitle(e)} />\n          </div>\n          <div className={`properties-form-row-container ${(selectedControl.Api !== \"ProjectContacts\" && selectedControl.Api !== \"ProjectCompany\"  && selectedControl.Api !== \"GlobalContacts\") ? '' : 'hidden'}`}>\n            <label htmlFor=\"includecode\">Include Code</label>\n            <input type=\"checkbox\" name=\"includecode\" id=\"includecode\" checked={Boolean(selectedControl.IncludeCode) || false} onChange={(e) => setControlIncludeCode(e)} />\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"validationmessage\">Validation Message</label>\n          <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"mandatory\">Mandatory</label>\n          <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"keywords\">Voice Keywords</label>\n          <div className=\"properties-form-row-container\">\n            <div>\n              <input type=\"text\" name=\"keywords\" id=\"keywords\" value={currentKeyword || ''} onChange={(e) => setCurrentKeyword(e.target.value)} />\n            </div>\n            <div>\n              <button className=\"btn btn-primary no-margin\" onClick={() => setControlKeywords()}>Add</button>\n            </div>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          {keyWordsList}\n        </div>\n        <div className={`properties-form-row ${(selectedControl.Api !== \"ProjectCompany\") ? 'hidden' : ''}`}>\n          <label htmlFor=\"includedocket\">Set Docket Number</label>\n          <input type=\"checkbox\" name=\"includedocket\" id=\"includedocket\" checked={Boolean(selectedControl.DocketID !== undefined)} onChange={(e) => isDocketNumberButton().length ? setApiDocketNumber(e) : setIsModalDocketVisible(!isModalDocketVisible)} />\n        </div>\n       </div>\n    }\n\n    if (pSelectedControl.Type === \"SearchableSMSListView\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"api\">Api</label>\n          <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"SearchableEmailListView\" || pSelectedControl.Type === \"SearchableSMSListView\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n            <label htmlFor=\"title2\">Title 2</label>\n            <input type=\"text\" name=\"title2\" id=\"title2\" value={selectedControl.Title2 || ''} onChange={(e) => setControlTitle2(e)} />\n          </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"api\">Api</label>\n          <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"SearchableListEntryDialogEmail\") {\n\n      let associatedIds\n      if (selectedControl.AssociatedId !== undefined) {\n        associatedIds = selectedControl.AssociatedId.names.map((id, index) => {\n        return <div className=\"properties-form-row-container key©-row\" key={index}>\n          <div>{id}</div>\n          <div onClick={() => deleteIdValue(id)}><FontAwesomeIcon\n            icon={faTrashAlt}\n            title=\"Remove\"\n            /></div>\n          </div>\n        })\n      }\n      let idsList = idList.map((id, index) => {\n        return <option value={id} key={id}>{id}</option>\n      })\n\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"api\">Api</label>\n          <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"validationmessage\">Validation Message</label>\n          <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label>Associated Id</label>\n          <div className=\"properties-form-row-container\">\n            <select name=\"defaultvalue\" id=\"defaultvalue\" value={0} onChange={(e) => setControlAssociatedId(e)}>\n              <option value=\"\" key=\"none\">Select Dependancy</option>\n              {idsList}\n            </select>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          {associatedIds}\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"SearchableListEntryDialogSMS\") {\n\n      let associatedIds\n      if (selectedControl.AssociatedId !== undefined) {\n        associatedIds = selectedControl.AssociatedId.names.map((id, index) => {\n        return <div className=\"properties-form-row-container keyword-row\" key={index}>\n          <div>{id}</div>\n          <div onClick={() => deleteIdValue(id)}><FontAwesomeIcon\n            icon={faTrashAlt}\n            title=\"Remove\"\n            /></div>\n          </div>\n        })\n      }\n      let idsList = idList.map((id, index) => {\n        return <option value={id} key={id}>{id}</option>\n      })\n\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"api\">Api</label>\n          <input type=\"text\" name=\"api\" id=\"api\" value={selectedControl.Api || ''} onChange={(e) => setControlApiValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"validationmessage\">Validation Message</label>\n          <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label>Associated Id</label>\n          <div className=\"properties-form-row-container\">\n            <select name=\"defaultvalue\" id=\"defaultvalue\" value={0} onChange={(e) => setControlAssociatedId(e)}>\n              <option value=\"\" key=\"none\">Select Dependancy</option>\n              {idsList}\n            </select>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          {associatedIds}\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Checkbox\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n\n        <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n            <div className=\"properties-form-row-elements\">\n              <label htmlFor=\"yes\">True</label>\n              <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} />\n              <label htmlFor=\"no\">False</label>\n              <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === \"N\"} onChange={(e) => setControlValue(e)} />\n            </div>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"commentvalue\">Comment</label>\n          <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"entrytitle\">Comment Title</label>\n          <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"showcomment\">Show Comment</label>\n          <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n          <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"details\">Details</label>\n          <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <div className=\"properties-form-row-container\">\n            <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n            <label htmlFor=\"collapsible\">Details Collapsible</label>\n            <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n            <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n          </div>\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"List.Multicontrol\") {\n      let dataList = []\n      if (selectedControl.Data !== undefined) {\n        dataList = selectedControl.Data.map((data, index) => {\n          let selectedIds = []\n          let optionedControlIndex\n\n          if (selectedControl.OptionedControls !== undefined) {\n            // console.log('OptionedControls existing: ', selectedControl.OptionedControls)\n            optionedControlIndex = selectedControl.OptionedControls.findIndex(item => item.SelectedString === data)\n            if (optionedControlIndex > -1) selectedIds = selectedControl.OptionedControls[optionedControlIndex].Controls\n          }\n          return <div key={index}>\n            <div id={index} className=\"properties-form-row-container keyword-row\" onClick={(e) => keywordClickHandler(e)}>\n              <div>{data}</div>\n              <div onClick={() => deleteData(data)}><FontAwesomeIcon\n                icon={faTrashAlt}\n                title=\"Remove\"\n              /></div>\n            </div>\n            <div id={`options-${index}`} className='properties-form-row keywords-container'>\n            <SelectSearchable items={Array.from(idsLoadedList).filter(item => item !== selectedControl.Id)} selectedItems={selectedIds} onSelectItem={(pItems) => setControlOptionedControls(pItems, data)} />\n\n            {/* <div id={`options-${index}`} className={`properties-form-row keywords-container ${index === selectedListDataIndex ? 'keywords-open' : ''}`}>\n            <div className=\"keywords-content\">\n                {selectedIds.map((item, index) => <div className=\"keyword-selected\" key={index}>{item}</div>)}\n              </div>\n              <div className=\"keywords-panel\">\n                {Array.from(idsLoadedList).map((item, index) => <div className=\"keyword-toggle\" key={index}>\n                  {item}\n                  <input type=\"checkbox\" id={item} onChange={(e) => setControlOptionedControls(e, data)}></input></div>)}\n              </div> */}\n\n            </div>\n          </div>\n        })\n      }\n      else selectedControl.Data = []\n\n      function keywordClickHandler(pEvent) {\n        const keywordId = Number(pEvent.target.id)\n        setSelectedListDataIndex(keywordId)\n        // console.log(`--->: keyword id: ${keywordId} list of IDs: `, idsLoadedList)\n      }\n\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        {/* <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n          <div className=\"properties-form-row-elements\">\n              <label htmlFor=\"yes\">Yes</label>\n              <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} />\n              <label htmlFor=\"no\">No</label>\n              <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === \"N\"} onChange={(e) => setControlValue(e)} />\n            </div>\n          </div>\n        </div> */}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"data\">Data</label>\n          <div className=\"properties-form-row-container\">\n              <form action=\"#\" onSubmit={() => setControlData()}>\n                <input type=\"text\" name=\"data\" id=\"data\" value={currentData || ''} onChange={(e) => setCurrentData(e.target.value)} />\n                <button className=\"btn btn-primary no-margin\">Add</button>\n              </form>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          {dataList}\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"List.Single\") {\n      let dataList = []\n      if (selectedControl.Data !== undefined) {\n        dataList = selectedControl.Data.map((data, index) => {\n          return <div className=\"properties-form-row-container keyword-row\" key={index}>\n            <div>{data}</div>\n            <div onClick={() => deleteData(data)}><FontAwesomeIcon\n              icon={faTrashAlt}\n              title=\"Remove\"\n            /></div>\n          </div>\n        })\n      }\n      else selectedControl.Data = []\n\n      const defaultValueList = selectedControl.Data.map((data, index) => <option value={data} key={index}>{data}</option>)\n\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n            <select name=\"defaultvalue\" id=\"defaultvalue\" value={selectedControl.Value || 0} onChange={(e) => setControlValue(e)}>\n              <option value=\"\" key=\"none\">---</option>\n              {defaultValueList}\n            </select>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"data\">Data</label>\n          <div className=\"properties-form-row-container\">\n              <input type=\"text\" name=\"data\" id=\"data\" value={currentData || ''} onChange={(e) => setCurrentData(e.target.value)} />\n              <button className=\"btn btn-primary no-margin\" onClick={() => setControlData()}>Add</button>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          {dataList}\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"List.Multiple\") {\n      let dataList = []\n      if (selectedControl.Data !== undefined) {\n        dataList = selectedControl.Data.map((data, index) => {\n          return <div className=\"properties-form-row-container keyword-row\" key={index}>\n            <div>{data}</div>\n            <div onClick={() => deleteData(data)}><FontAwesomeIcon\n              icon={faTrashAlt}\n              title=\"Remove\"\n            /></div>\n          </div>\n        })\n      }\n      else selectedControl.Data = []\n\n      const defaultValueList = selectedControl.Data.map((data, index) => <option value={data} key={index}>{data}</option>)\n\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n            <select name=\"defaultvalue\" id=\"defaultvalue\" value={currentSelectedValue || ''} onChange={(e) => setControlSelectedValue(e)}>\n              <option value=\"\" key=\"none\">---</option>\n              {defaultValueList}\n            </select>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"data\">Data</label>\n          <div className=\"properties-form-row-container\">\n              <input type=\"text\" name=\"data\" id=\"data\" value={currentData || ''} onChange={(e) => setCurrentData(e.target.value)} />\n              <button className=\"btn btn-primary no-margin\" onClick={() => setControlData()}>Add</button>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          {dataList}\n        </div>\n      </div>\n    }\n\n    if (imagePropertiesIDs.includes(pSelectedControl.Type)) {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"size\">Size</label>\n          <select name=\"size\" id=\"size\" value={selectedControl.Size || 0} onChange={(e) => setControlSize(e)}>\n            <option value=\"\"></option>\n            <option value=\"Thumbnail\">Thumbnail</option>\n            <option value=\"Small\">Small</option>\n            <option value=\"Medium\">Medium</option>\n            <option value=\"Large\">Large</option>\n          </select>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"galleryextrack\">GalleryExtrack</label>\n          <input type=\"checkbox\" name=\"galleryextrack\" id=\"galleryextrack\" checked={Boolean(selectedControl.GalleryExtrack) || false} onChange={(e) => setControlGalleryExtrack(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"galleryphone\">GalleryPhone</label>\n          <input type=\"checkbox\" name=\"galleryphone\" id=\"galleryphone\" checked={Boolean(selectedControl.GalleryPhone) || false} onChange={(e) => setControlGalleryPhone(e)} />\n        </div>\n      </div>\n    }\n\n    // QRScanner.List is a control itself...\n    if (qrscannerPropertiesIDs.includes(pSelectedControl.Type)) {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"entrytitle\">EntryTitle</label>\n          <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Label\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"fontsize\">Font Size</label>\n          <input type=\"number\" name=\"fontsize\" id=\"fontsize\" value={selectedControl.FontSize || 0} onChange={(e) => setControlFontSize(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"margin\">Margin</label>\n          <input type=\"number\" name=\"margin\" id=\"margin\" value={selectedControl.Margin || 0} onChange={(e) => setControlMargin(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"fontattribute\">Font Attributes</label>\n          <select name=\"fontattribute\" id=\"fontattribute\" value={selectedControl.FontAttributes || 0} onChange={(e) => setControlFontAttributes(e)}>\n            <option value=\"\"></option>\n            <option value=\"Bold\">Bold</option>\n            <option value=\"Italic\">Italic</option>\n          </select>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n          <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n        </div>\n      </div>\n    }\n    if (pSelectedControl.Type === \"Text\") {\n      if (selectedControl.Keywords !== undefined) {\n        keyWordsList = selectedControl.Keywords.Keys.map((keyword, index) => {\n          return <div className=\"properties-form-row-container keyword-row\" key={index}>\n            <div>{keyword}</div>\n            <div onClick={() => deleteKeyword(keyword)}><FontAwesomeIcon\n              icon={faTrashAlt}\n              title=\"Remove\"\n            /></div>\n          </div>\n        })\n      }\n\n      let keyboardOptions\n\n      const kbVarChar = selectedControl.Format !== undefined ? <div className=\"properties-form-row\">\n        <label htmlFor=\"varchar\">Restricted Number of Character</label>\n        <input type=\"number\" name=\"varchar\" id=\"varchar\" value={selectedControl.Format.VarChar || 0} onChange={(e) => setControlVarChar(e)} />\n      </div> : ''\n\n      const kbLines = selectedControl.Format !== undefined ? <div className=\"properties-form-row\">\n        <label htmlFor=\"lines\">Lines to Display</label>\n        <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Lines || 0} onChange={(e) => setControlLines(e)} />\n      </div> : ''\n\n      const kbDecimal = selectedControl.Format !== undefined ? <div className=\"properties-form-row\">\n        <label htmlFor=\"lines\">Decimal</label>\n        <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Decimal || 0} onChange={(e) => setControlDecimal(e)} />\n      </div> : ''\n\n      const kbMin = selectedControl.Format !== undefined ? <div className=\"properties-form-row\">\n        <label htmlFor=\"lines\">Minimum</label>\n        <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Min || 0} onChange={(e) => setControlMin(e)} />\n      </div> : ''\n\n      const kbMax = selectedControl.Format !== undefined ? <div className=\"properties-form-row\">\n        <label htmlFor=\"maximum\">maximum</label>\n        <input type=\"number\" name=\"maximum\" id=\"maximum\" value={selectedControl.Format.Max || 0} onChange={(e) => setControlMax(e)} />\n      </div> : ''\n\n\n      if (selectedControl.Format === undefined) selectedControl.Format = {}\n      else {\n        switch (selectedControl.Format.Keyboard) {\n          case 'Chat':\n          case 'Default':\n          case 'Plain':\n          case 'Text':\n            keyboardOptions = <>{kbVarChar} {kbLines}</>\n            break\n          case 'Numeric':\n            keyboardOptions = <>{kbVarChar} {kbLines} {kbDecimal} {kbMin} {kbMax}</>\n            break\n          case 'Email':\n          case 'Telephone':\n          case 'Url':\n            keyboardOptions = <></>\n            break\n          default:\n            break;\n        }\n      }\n\n      const docketValue = (selectedControl.DocketID !== undefined) ? selectedControl.DocketID.includes('Docket') ? 'DocketNumber' : 'Text' : ''\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"value\">Value</label>\n          <input type=\"text\" name=\"value\" id=\"value\" value={selectedControl.Value || ''} onChange={(e) => setControlValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"isenabled\">Read Only</label>\n          <input type=\"checkbox\" name=\"isenabled\" id=\"isenabled\" checked={selectedControl.IsEnabled !== undefined ? Boolean(!selectedControl.IsEnabled): false} onChange={(e) => setControlIsEnabled(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"warningmessage\">Warning Message</label>\n          <input type=\"text\" name=\"warningmessage\" id=\"warningmessage\" value={selectedControl.WarningMessage || ''} disabled={Boolean(!selectedControl.Warning) || false} onChange={(e) => setControlWarningMessage(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"warningvalue\">Warning</label>\n          <input type=\"checkbox\" name=\"warningvalue\" id=\"warningvalue\" checked={Boolean(selectedControl.Warning) || false} onChange={(e) => setControlWarning(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"validationmessage\">Validation Message</label>\n          <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"mandatory\">Mandatory</label>\n          <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <hr/>\n          <h3>Format</h3>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"keyboard\">Keyboard</label>\n          <select name=\"keyboard\" id=\"keyboard\" value={selectedControl.Format.Keyboard || 0} onChange={(e) => setControlKeyboard(e)}>\n            <option value=\"\"></option>\n            <option value=\"Chat\">Chat</option>\n            <option value=\"Default\">Default</option>\n            <option value=\"Email\">Email</option>\n            <option value=\"Numeric\">Numeric</option>\n            <option value=\"Plain\">Plain</option>\n            <option value=\"Telephone\">Telephone</option>\n            <option value=\"Text\">Text</option>\n            <option value=\"Url\">Url</option>\n          </select>\n        </div>\n\n        {keyboardOptions}\n        {/* <div className=\"properties-form-row\">\n          <label htmlFor=\"varchar\">Restricted Number of Character</label>\n          <input type=\"number\" name=\"varchar\" id=\"varchar\" value={selectedControl.Format.VarChar || 0} onChange={(e) => setControlVarChar(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"lines\">Lines to Display</label>\n          <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Lines || 0} onChange={(e) => setControlLines(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"lines\">Decimal</label>\n          <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Decimal || 0} onChange={(e) => setControlDecimal(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"lines\">Minimum</label>\n          <input type=\"number\" name=\"lines\" id=\"lines\" value={selectedControl.Format.Min || 0} onChange={(e) => setControlMin(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"maximum\">maximum</label>\n          <input type=\"number\" name=\"maximum\" id=\"maximum\" value={selectedControl.Format.Max || 0} onChange={(e) => setControlMax(e)} />\n        </div> */}\n\n\n        <div className=\"properties-form-row\">\n          <hr/>\n          <label htmlFor=\"keywords\">Voice Keywords</label>\n          <div className=\"properties-form-row-container\">\n            <div>\n              <input type=\"text\" name=\"keywords\" id=\"keywords\" value={currentKeyword || ''} onChange={(e) => setCurrentKeyword(e.target.value)} />\n            </div>\n            <div>\n              <button className=\"btn btn-primary no-margin\" onClick={() => setControlKeywords()}>Add</button>\n            </div>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          {keyWordsList}\n        </div>\n\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"includedocket\">Set Docket Number</label>\n          <select name=\"docket\" id=\"docket\" value={docketValue} onChange={(e) => isDocketNumberButton().length ? setTextDocketNumber(e) : setIsModalDocketVisible(!isModalDocketVisible)} >\n            <option value=\"\">---</option>\n            <option value=\"DocketNumber\">DocketNumber</option>\n            <option value=\"Text\">Text</option>\n          </select>\n        </div>\n\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Trilean\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n          <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"details\">Details</label>\n          <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <div className=\"properties-form-row-container\">\n            <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n            <label htmlFor=\"collapsible\">Details Collapsible</label>\n            <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n            <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n            <div className=\"properties-form-row-elements\">\n              <label htmlFor=\"yes\">Yes</label>\n              <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} />\n              <label htmlFor=\"no\">No</label>\n              <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === \"N\"} onChange={(e) => setControlValue(e)} />\n              <label htmlFor=\"na\">Na</label>\n              <input type=\"radio\" name=\"value\" id=\"na\" value=\"NA\" checked={selectedControl.Value === \"NA\"} onChange={(e) => setControlValue(e)} />\n            </div>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"hidena\">Hide N/A</label>\n          <input type=\"checkbox\" name=\"hidena\" id=\"hidena\" checked={Boolean(selectedControl.HideNA) || false} onChange={(e) => setControlHideNA(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"commentvalue\">Comment</label>\n          <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"entrytitle\">Comment Title</label>\n          <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"showcomment\">Show Comment</label>\n          <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Trilean.Label\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"hasunderLine\">Has UnderLine</label>\n          <input type=\"checkbox\" name=\"hasunderLine\" id=\"hasunderLine\" checked={Boolean(selectedControl.HasUnderLine) || false} onChange={(e) => setControlHasUnderLine(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <hr/>\n          <h3>Button Yes</h3>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"buttonyeslabel\">Label</label>\n          <input type=\"text\" name=\"buttonyeslabel\" id=\"buttonyeslabel\" value={selectedControl.Buttons[0].Label || ''} onChange={(e) => setControlButtonLabel(e, 0)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"bgcolor\">Background Color</label>\n          <input type=\"color\" name=\"bgcolor\" id=\"bgcolor\" value={selectedControl.Buttons[0].BackgroundColor || ''} onChange={(e) => setControlBackgroundColor(e, 0)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"bgcolorselected\">Background Color Selected</label>\n          <input type=\"color\" name=\"bgcolorselected\" id=\"bgcolorselected\" value={selectedControl.Buttons[0].BackgroundColorSelected || ''} onChange={(e) => setControlBackgroundColorSelected(e, 0)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <hr/>\n          <h3>Button No</h3>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"buttonyeslabel\">Label</label>\n          <input type=\"text\" name=\"buttonyeslabel\" id=\"buttonyeslabel\" value={selectedControl.Buttons[1].Label || ''} onChange={(e) => setControlButtonLabel(e, 1)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"bgcolor\">Background Color</label>\n          <input type=\"color\" name=\"bgcolor\" id=\"bgcolor\" value={selectedControl.Buttons[1].BackgroundColor || ''} onChange={(e) => setControlBackgroundColor(e, 1)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"bgcolorselected\">Background Color Selected</label>\n          <input type=\"color\" name=\"bgcolorselected\" id=\"bgcolorselected\" value={selectedControl.Buttons[1].BackgroundColorSelected || ''} onChange={(e) => setControlBackgroundColorSelected(e, 1)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <hr/>\n          <h3>Button NA</h3>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"buttonyeslabel\">Label</label>\n          <input type=\"text\" name=\"buttonyeslabel\" id=\"buttonyeslabel\" value={selectedControl.Buttons[2].Label || ''} onChange={(e) => setControlButtonLabel(e, 2)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"bgcolor\">Background Color</label>\n          <input type=\"color\" name=\"bgcolor\" id=\"bgcolor\" value={selectedControl.Buttons[2].BackgroundColor || ''} onChange={(e) => setControlBackgroundColor(e, 2)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"bgcolorselected\">Background Color Selected</label>\n          <input type=\"color\" name=\"bgcolorselected\" id=\"bgcolorselected\" value={selectedControl.Buttons[2].BackgroundColorSelected || ''} onChange={(e) => setControlBackgroundColorSelected(e, 2)} />\n        </div>\n\n        <div className=\"properties-form-row\">\n          <hr/>\n          <label htmlFor=\"details\">Details</label>\n          <input type=\"text\" name=\"details\" id=\"details\" value={selectedControl.Details || ''} onChange={(e) => setControlDetails(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <div className=\"properties-form-row-container\">\n            <input type=\"checkbox\" name=\"collapsible\" id=\"collapsible\" checked={Boolean(selectedControl.Collapsible) || false} onChange={(e) => setControlCollapsible(e)} />\n            <label htmlFor=\"collapsible\">Details Collapsible</label>\n            <input type=\"checkbox\" name=\"iscollapsed\" id=\"iscollapsed\" checked={Boolean(selectedControl.IsCollapsed) || false} onChange={(e) => setControlIsCollapsed(e)} />\n            <label htmlFor=\"iscollapsed\">Details Is Collapsed</label>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label>Default Value</label>\n          <div className=\"properties-form-row-container\">\n          <div className=\"properties-form-row-elements\">\n              <label htmlFor=\"yes\">Yes</label>\n              <input type=\"radio\" name=\"value\" id=\"yes\" value=\"Y\" checked={selectedControl.Value === \"Y\"} onChange={(e) => setControlValue(e)} />\n              <label htmlFor=\"no\">No</label>\n              <input type=\"radio\" name=\"value\" id=\"no\" value=\"N\" checked={selectedControl.Value === \"N\"} onChange={(e) => setControlValue(e)} />\n              <label htmlFor=\"na\">Na</label>\n              <input type=\"radio\" name=\"value\" id=\"na\" value=\"NA\" checked={selectedControl.Value === \"NA\"} onChange={(e) => setControlValue(e)} />\n            </div>\n          </div>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"hidena\">Hide N/A</label>\n          <input type=\"checkbox\" name=\"hidena\" id=\"hidena\" checked={Boolean(selectedControl.HideNA) || false} onChange={(e) => setControlHideNA(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"commentvalue\">Comment</label>\n          <input type=\"text\" name=\"commentvalue\" id=\"commentvalue\" value={selectedControl.CommentValue || ''} disabled={Boolean(!selectedControl.ShowComment) || false} onChange={(e) => setControlCommentValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"entrytitle\">Comment Title</label>\n          <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"showcomment\">Show Comment</label>\n          <input type=\"checkbox\" name=\"showcomment\" id=\"showcomment\" checked={Boolean(selectedControl.ShowComment) || false} onChange={(e) => setControlShowComment(e)} />\n        </div>\n      </div>\n    }\n\n    if (signaturePropertiesIDs.includes(pSelectedControl.Type)) {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"entrytitle\">EntryTitle</label>\n          <input type=\"text\" name=\"entrytitle\" id=\"entrytitle\" value={selectedControl.EntryTitle || ''} onChange={(e) => setControlEntryTitle(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"validationmessage\">ValidationMessage</label>\n          <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"mandatory\">Mandatory</label>\n          <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n        </div>\n      </div>\n    }\n\n    if (pSelectedControl.Type === \"Date\") {\n\n      // console.log('pSelectedControl: ', pSelectedControl)\n      // if (pSelectedControl.DatabaseField) setIsDatabaseFieldSet(true)\n      console.log('databaseFieldLocation: ', databaseFieldLocation)\n\n      // (databaseFieldLocation.from !== pSelectedControl.ElementId && databaseFieldLocation.from !== '')\n\n      const databasefieldFrom = (databaseFieldLocation.from === '' || databaseFieldLocation.from === pSelectedControl.ElementId) ? <div>\n          <label htmlFor=\"validfrom\">Valid From</label><br />\n          <input type=\"checkbox\" name=\"validfrom\" id=\"validfrom\" checked={Boolean(pSelectedControl.DatabaseField === 'ValidFrom') || false} onChange={(e) => setControlValidFrom(e)} />\n        </div> : <div>\n          Valid From<br />\n          <div className=\"properties-infomsg\"> has already been set</div>\n        </div>\n\n      const databasefieldTo = (databaseFieldLocation.to === '' || databaseFieldLocation.to === pSelectedControl.ElementId) ? <div>\n          <label htmlFor=\"validto\">Valid To</label><br />\n          <input type=\"checkbox\" name=\"validto\" id=\"validto\" checked={Boolean(pSelectedControl.DatabaseField === 'ValidTo') || false} onChange={(e) => setControlValidTo(e)} />\n        </div> : <div>\n          Valid To<br />\n          <div className=\"properties-infomsg\"> has already been set</div>\n        </div>\n\n\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"AddHour\">Add Day</label>\n          <input type=\"number\" name=\"Addday\" id=\"addday\" value={selectedControl.AddDay || 0} onChange={(e) => setControlAddDay(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"AddHour\">Add Month</label>\n          <input type=\"number\" name=\"addmonth\" id=\"addmonth\" value={selectedControl.AddMonth || 0} onChange={(e) => setControlAddMonth(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"mandatory\">Mandatory</label>\n          <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"datevalue\">Date Value</label>\n          <input type=\"date\" name=\"datevalue\" id=\"datevalue\" value={selectedControl.DateValue || ''} onChange={(e) => setControlDateValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"isBlank\">Is Blank</label>\n          <input type=\"checkbox\" name=\"isBlank\" id=\"isBlank\" checked={Boolean(selectedControl.IsBlank) || false} onChange={(e) => setControlDateIsBlank(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"formatdatetime\">Format DateTime</label>\n          <select name=\"formatdatetime\" id=\"formatdatetime\" value={selectedControl.FormatDateTime || 0} onChange={(e) => setControlFormatDateTime(e)}>\n            <option value=\"\"></option>\n            <option value=\"yyyy-MM-dd\">yyyy-MM-dd</option>\n            <option value=\"yyyy-MM-dd, ddd\">yyyy-MM-dd, ddd</option>\n            <option value=\"yyyy-MMM-dd\">yyyy-MMM-dd</option>\n            <option value=\"yyyy-MMM-dd, ddd\">yyyy-MMM-dd, ddd</option>\n            <option value=\"dd-MM-yyyy\">dd-MM-yyyy</option>\n            <option value=\"ddd, dd-MM-yyyy\">ddd, dd-MM-yyyy</option>\n            <option value=\"dd-MMM-yyyy\">dd-MMM-yyyy</option>\n            <option value=\"ddd, dd-MMM-yyyy\">ddd, dd-MMM-yyyy</option>\n            <option value=\"yy-MM-dd\">yy-MM-dd</option>\n            <option value=\"yy-MM-dd, ddd\">yy-MM-dd, ddd</option>\n            <option value=\"yy-MMM-dd\">yy-MMM-dd</option>\n            <option value=\"yy-MMM-dd, ddd\">yy-MMM-dd, ddd</option>\n            <option value=\"dd-MM-yy\">dd-MM-yy</option>\n            <option value=\"ddd, dd-MM-yy\">ddd, dd-MM-yy</option>\n            <option value=\"dd-MMM-yy\">dd-MMM-yy</option>\n            <option value=\"ddd, dd-MMM-yy\">ddd, dd-MMM-yy</option>\n            <option value=\"MMM-dd\">MMM-dd</option>\n            <option value=\"MMM-dd, ddd\">MMM-dd, ddd</option>\n            <option value=\"dd-MMM\">dd-MMM</option>\n            <option value=\"ddd, dd-MMM\">ddd, dd-MMM</option>\n          </select>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"islabelvisible\">Is Label Visible</label>\n          <input type=\"checkbox\" name=\"islabelvisible\" id=\"islabelvisible\" checked={Boolean(selectedControl.IsLabelVisible) || false} onChange={(e) => setControlIsLabelVisible(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"validationmessage\">Validation Message</label>\n          <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <hr/>\n          <h3>Database Field</h3>\n        </div>\n        {databasefieldFrom}<br/>\n        {databasefieldTo}\n      </div>\n    }\n    if (pSelectedControl.Type === \"Time\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"AddHour\">Add Hour</label>\n          <input type=\"number\" name=\"addhour\" id=\"addhour\" value={selectedControl.AddHour || 0} onChange={(e) => setControlAddHour(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"timevalue\">Time Value</label>\n          <input type=\"time\" name=\"timevalue\" id=\"timevalue\" value={selectedControl.TimeValue || ''} onChange={(e) => setControlTimeValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"isBlank\">Is Blank</label>\n          <input type=\"checkbox\" name=\"isBlank\" id=\"isBlank\" checked={Boolean(selectedControl.IsBlank) || false} onChange={(e) => setControlTimeIsBlank(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"formatdatetime\">Format DateTime</label>\n          <select name=\"formatdatetime\" id=\"formatdatetime\" value={selectedControl.FormatDateTime || 0} onChange={(e) => setControlFormatDateTime(e)}>\n            <option value=\"\"></option>\n            <option value=\"hh:mm tt\">hh:mm tt</option>\n            <option value=\"HH:mm\">HH:mm</option>\n            <option value=\"HH:mm:ss\">HH:mm:ss</option>\n            <option value=\"hh:mm:ss tt\">hh:mm:ss tt</option>\n          </select>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"islabelvisible\">Is Label Visible</label>\n          <input type=\"checkbox\" name=\"islabelvisible\" id=\"islabelvisible\" checked={Boolean(selectedControl.IsLabelVisible) || false} onChange={(e) => setControlIsLabelVisible(e)} />\n        </div>\n      </div>\n    }\n    if (pSelectedControl.Type === \"DateTime\") {\n      return <div id={`panel-${pSelectedControl.SectionId}`} className=\"properties-form\">\n        {globalProperties}\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"AddHour\">Add Hour</label>\n          <input type=\"number\" name=\"addhour\" id=\"addhour\" value={selectedControl.AddHour || 0} onChange={(e) => setControlAddHour(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"AddHour\">Add Day</label>\n          <input type=\"number\" name=\"Addday\" id=\"addday\" value={selectedControl.AddDay || 0} onChange={(e) => setControlAddDay(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"AddHour\">Add Month</label>\n          <input type=\"number\" name=\"addmonth\" id=\"addmonth\" value={selectedControl.AddMonth || 0} onChange={(e) => setControlAddMonth(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"mandatory\">Mandatory</label>\n          <input type=\"checkbox\" name=\"mandatory\" id=\"mandatory\" checked={Boolean(selectedControl.Mandatory) || false} onChange={(e) => setControlMandatory(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"datetimevalue\">DateTime Value</label>\n          <input type=\"date\" name=\"datetimevalue\" id=\"datetimevalue\" value={selectedControl.DateValue || ''} onChange={(e) => setControlDateTimeDateValue(e)} />\n          <input type=\"time\" name=\"timevalue\" id=\"timevalue\" value={selectedControl.TimeValue || ''} onChange={(e) => setControlDateTimeTimeValue(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"isBlank\">Is Blank</label>\n          <input type=\"checkbox\" name=\"isBlank\" id=\"isBlank\" checked={Boolean(selectedControl.IsBlank) || false} onChange={(e) => setControlDateTimeIsBlank(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"formatdatetime\">Format DateTime</label>\n          <select name=\"formatdatetime\" id=\"formatdatetime\" value={selectedControl.FormatDateTime || 0} onChange={(e) => setControlFormatDateTime(e)}>\n            <option value=\"\"></option>\n            <option value=\"yyyy-MM-dd hh:mm tt\">yyyy-MM-dd hh:mm tt</option>\n            <option value=\"yyyy-MM-dd HH:mm\">yyyy-MM-dd HH:mm</option>\n            <option value=\"yyyy-MMM-dd hh:mm tt\">yyyy-MMM-dd hh:mm tt</option>\n            <option value=\"yyyy-MMM-dd HH:mm\">yyyy-MMM-dd HH:mm</option>\n            <option value=\"yy-MM-dd hh:mm tt\">yy-MM-dd hh:mm tt</option>\n            <option value=\"yy-MM-dd HH:mm\">yy-MM-dd HH:mm</option>\n            <option value=\"yy-MMM-dd hh:mm tt\">yy-MMM-dd hh:mm tt</option>\n            <option value=\"yy-MMM-dd HH:mm\">yy-MMM-dd HH:mm</option>\n          </select>\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"islabelvisible\">Is Label Visible</label>\n          <input type=\"checkbox\" name=\"islabelvisible\" id=\"islabelvisible\" checked={Boolean(selectedControl.IsLabelVisible) || false} onChange={(e) => setControlIsLabelVisible(e)} />\n        </div>\n        <div className=\"properties-form-row\">\n          <label htmlFor=\"validationmessage\">ValidationMessage</label>\n          <input type=\"text\" name=\"validationmessage\" id=\"validationmessage\" value={selectedControl.ValidationMessage || ''} onChange={(e) => setControlValidationMessage(e)} />\n        </div>\n      </div>\n    }\n  }\n\n  function deleteKeyword(pKeyword) {\n    const keywordIndex = selectedControl.Keywords.findIndex(item => item === pKeyword)\n    delete selectedControl.Keywords[keywordIndex]\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  function deleteIdValue(pKeyword) {\n    const keywordIndex = selectedControl.AssociatedId.names.findIndex(item => item === pKeyword)\n    delete selectedControl.AssociatedId.names[keywordIndex]\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  function deleteData(pData) {\n    const dataIndex = selectedControl.Data.findIndex(item => item === pData)\n    console.log('---> selectedControl.OptionedControls: ', selectedControl.OptionedControls)\n\n    const optionIndex = selectedControl.OptionedControls.findIndex(item => item.SelectedString === pData)\n\n    if (dataIndex > -1) selectedControl.Data = selectedControl.Data.filter((item, index) => index !== dataIndex)\n    if (optionIndex > -1) selectedControl.OptionedControls = selectedControl.OptionedControls.filter((item, index) => index !== optionIndex)\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  function setControlID(pEvent) {\n    const IDvalue = pEvent.target.value\n    setIdList([...idList, IDvalue])\n    validateId(IDvalue)\n\n    selectedControl.Id = IDvalue\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlTitle(pEvent) {\n    selectedControl.Title = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlTitle2(pEvent) {\n    selectedControl.Title2 = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  function setControlVarChar(pEvent) {\n    selectedControl.Format.VarChar = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlLines(pEvent) {\n    selectedControl.Format.Lines = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlDecimal(pEvent) {\n    selectedControl.Format.Decimal = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlMin(pEvent) {\n    selectedControl.Format.Min = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlMax(pEvent) {\n    selectedControl.Format.Max = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlHasUnderLine(pEvent) {\n    selectedControl.HasUnderLine = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIsVisible(pEvent) {\n    selectedControl.IsVisible = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlFontSize(pEvent) {\n    selectedControl.FontSize = Number(pEvent.target.value)\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlMargin(pEvent) {\n    selectedControl.Margin = Number(pEvent.target.value)\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlFontAttributes(pEvent) {\n    if (pEvent.target.value !== '') selectedControl.FontAttributes = pEvent.target.value\n    else delete selectedControl.FontAttributes\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlSize(pEvent) {\n    selectedControl.Size = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlApi(pEvent) {\n    [\"IncludeAbbreviation\",\n      \"IncludePhoneNumber\",\n      \"IncludeEmail\",\n      \"IncludeTitle\",\n      \"IncludeBusinessNumber\",\n      \"IncludeTitle\",\n      \"IncludeCode\"\n    ].forEach(option => {\n      if (selectedControl[option]) delete selectedControl[option]\n    })\n\n    const apiName = pEvent.target.value\n    if (apiName !== \"ProjectCompany\" && selectedControl.DocketID !== undefined) delete selectedControl.DocketID\n\n    selectedControl.Api = apiName\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlApiValue(pEvent) {\n    selectedControl.Api = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlEntryTitle(pEvent) {\n    selectedControl.EntryTitle = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlDetails(pEvent) {\n    selectedControl.Details = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlCommentValue(pEvent) {\n    selectedControl.CommentValue = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlButtonLabel(pEvent, btnIndex) {\n    selectedControl.Buttons[btnIndex].Label = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlBackgroundColor(pEvent, btnIndex) {\n    selectedControl.Buttons[btnIndex].BackgroundColor = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlBackgroundColorSelected(pEvent, btnIndex) {\n    selectedControl.Buttons[btnIndex].BackgroundColorSelected = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlValidationMessage(pEvent, btnIndex) {\n    selectedControl.ValidationMessage = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlMandatory(pEvent) {\n    selectedControl.Mandatory = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlAddHour(pEvent) {\n    if (pEvent.target.value > 0 ) selectedControl.AddHour = pEvent.target.value\n    else delete selectedControl.AddHour\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlAddDay(pEvent) {\n    if (pEvent.target.value > 0 ) selectedControl.AddDay = pEvent.target.value\n    else delete selectedControl.AddDay\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlAddMonth(pEvent) {\n    if (pEvent.target.value > 0 ) selectedControl.AddMonth = pEvent.target.value\n    else delete selectedControl.AddMonth\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlFormatDateTime(pEvent) {\n    selectedControl.FormatDateTime = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlKeyboard(pEvent) {\n    if (selectedControl.Format === undefined) initFormatProperty(selectedControl)\n    selectedControl.Format.Keyboard = pEvent.target.value\n\n    setCurrentKeyboard(pEvent.target.value)\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlAssociatedId(pEvent) {\n    const idList = selectedControl.AssociatedId.names\n    if (idList.findIndex(id => id === pEvent.target.value) < 0 ) idList.push(pEvent.target.value)\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIsLabelVisible(pEvent) {\n    selectedControl.IsLabelVisible = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  // function setControlDateTimeValue(pEvent) {\n  //   selectedControl.DateTimeValue = pEvent.target.value\n  //   selectedControl.IsBlank = false\n  //   let jsonToUpdate = { ...json }\n  //   setJson(jsonToUpdate)\n  // }\n  function setControlDateTimeDateValue(pEvent) {\n    selectedControl.DateValue = pEvent.target.value\n    selectedControl.DateTimeValue = `${pEvent.target.value} ${selectedControl.TimeValue}`\n    selectedControl.IsBlank = false\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlDateTimeTimeValue(pEvent) {\n    selectedControl.TimeValue = pEvent.target.value\n    selectedControl.DateTimeValue = `${selectedControl.DateValue} ${pEvent.target.value}`\n    selectedControl.IsBlank = false\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlDateValue(pEvent) {\n    selectedControl.DateValue = pEvent.target.value\n    selectedControl.IsBlank = false\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlTimeValue(pEvent) {\n    selectedControl.TimeValue = pEvent.target.value\n    selectedControl.IsBlank = false\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlDateIsBlank(pEvent) {\n    selectedControl.DateValue = \"\"\n    selectedControl.IsBlank = true\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlTimeIsBlank(pEvent) {\n    selectedControl.TimeValue = \"\"\n    selectedControl.IsBlank = true\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlDateTimeIsBlank(pEvent) {\n    selectedControl.DateValue = \"\"\n    selectedControl.TimeValue = \"\"\n    selectedControl.DateTimeValue = \"\"\n    selectedControl.IsBlank = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIsButtonDisabled(pEvent) {\n    selectedControl.IsButtonDisabled = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlShowComment(pEvent) {\n    selectedControl.ShowComment = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  function setControlCollapsible(pEvent) {\n    selectedControl.Collapsible = pEvent.target.checked\n    selectedControl.IsCollapsed = false\n    if (!selectedControl.Collapsible) {\n      delete selectedControl.Collapsible\n      delete selectedControl.IsCollapsed\n    }\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIsCollapsed(pEvent) {\n    selectedControl.IsCollapsed = pEvent.target.checked\n    if (selectedControl.IsCollapsed) selectedControl.Collapsible = true\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlValue(pEvent) {\n    selectedControl.Value = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlUniqueValue(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.Value = 'Y'\n    }\n    else delete selectedControl.Value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlSelectedValue(pEvent) {\n    if (selectedControl.SelectedValue === undefined || selectedControl.SelectedValue.length === 0){\n      selectedControl.SelectedValue = []\n    }\n    selectedControl.SelectedValue[0] = pEvent.target.value\n    setCurrentSelectedValue(pEvent.target.value)\n\n    // setCurrentSelectedValue('')\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIncludePhoneNumber(pEvent) {\n    selectedControl.IncludePhoneNumber = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlWarningMessage(pEvent) {\n    selectedControl.WarningMessage = pEvent.target.value\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlWarning(pEvent) {\n    selectedControl.Warning = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIsEnabled(pEvent) {\n    selectedControl.IsEnabled = !pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIncludeEmail(pEvent) {\n    selectedControl.IncludeEmail = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIncludeTitle(pEvent) {\n    selectedControl.IncludeTitle = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIncludeBusinessNumber(pEvent) {\n    selectedControl.IncludeBusinessNumber = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIncludeAbbreviation(pEvent) {\n    selectedControl.IncludeAbbreviation = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlIncludeCode(pEvent) {\n    selectedControl.IncludeCode = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlGalleryExtrack(pEvent) {\n    selectedControl.GalleryExtrack = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlGalleryPhone(pEvent) {\n    selectedControl.GalleryPhone = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlHideNA(pEvent) {\n    selectedControl.HideNA = pEvent.target.checked\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlOptionedControls(pSelected, pKeyword) {\n\n    if (selectedControl.OptionedControls === undefined) selectedControl.OptionedControls = []\n\n    // Find the keyword index\n    const optionedControlIndex = selectedControl.OptionedControls.findIndex(item => item.SelectedString === pKeyword)\n    // console.log(`--->: setControlOptionedControls -> optionedControlIndex`, optionedControlIndex)\n\n    if (optionedControlIndex < 0) {\n      const optionValueIndex = selectedControl.Data.findIndex(item => item === pKeyword)\n      const optionValue = {\n        Controls: pSelected,\n        Index: optionValueIndex,\n        SelectedString: pKeyword\n      }\n      selectedControl.OptionedControls.push(optionValue)\n    }\n    // Find the matching optioned control\n    else {\n      selectedControl.OptionedControls[optionedControlIndex].Controls = pSelected\n    }\n\n    // console.log('---> OptionedControls inJSON: ', selectedControl.OptionedControls)\n    // console.log(`--->: setControlOptionedControls -> pSelected, pKeyword`, pSelected, pKeyword)\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  // function setControlOptionedControls(pEvent, pKeyword) {\n  //   if (selectedControl.OptionedControls === undefined) selectedControl.OptionedControls = []\n  //   const optionedControlIndex = selectedControl.OptionedControls.findIndex(item => item.SelectedString === pKeyword)\n  //   console.log(`--->: setControlOptionedControls -> optionedControlIndex`, optionedControlIndex)\n\n  //   if (optionedControlIndex < 0) {\n  //     const optionValueIndex = selectedControl.Data.findIndex(item => item === pKeyword)\n  //     const optionValue = {\n  //       Controls: [pEvent.target.id],\n  //       Index: optionValueIndex,\n  //       SelectedString: pKeyword\n  //     }\n  //     selectedControl.OptionedControls.push(optionValue)\n  //   }\n  //   else {\n  //     const optionedControlIdIndex = selectedControl.OptionedControls[optionedControlIndex].Controls.findIndex(item => {\n  //       console.log(`--->: setControlOptionedControls -> pEvent.target.id`, pEvent.target.id)\n  //       console.log(`--->: setControlOptionedControls -> item`, item)\n  //       return item === pEvent.target.id\n  //     })\n  //     if (optionedControlIdIndex === -1) selectedControl.OptionedControls[optionedControlIndex].Controls.push(pEvent.target.id)\n  //   }\n\n  //   if (pEvent.target.checked) {\n  //     console.log('---> OptionedControls: ',pEvent.target.id, ' on: ',pKeyword)\n\n  //   }\n  //   let jsonToUpdate = { ...json }\n  //   setJson(jsonToUpdate)\n  // }\n  function setApiDocketNumber(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.DocketID = `ProjectCompany${getElementsFromType(\"Button.Add.DocketNumber\")[0].Id}`\n    }\n    else delete selectedControl.DocketID\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setTextDocketNumber(pEvent) {\n    const selectedType = pEvent.target.value\n    console.log(`--->: setTextDocketNumber -> selectedType`, selectedType)\n\n    if (selectedType === \"DocketNumber\" || selectedType === \"Text\") {\n      selectedControl.DocketID = `${selectedType}${getElementsFromType(\"Button.Add.DocketNumber\")[0].Id}`\n    }\n    else if (selectedControl.DocketID !== undefined) delete selectedControl.DocketID\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlValidFrom(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.DatabaseField = \"ValidFrom\"\n      databaseFieldLocation = pEvent.target.ElementId\n    }\n    else {\n      delete selectedControl.DatabaseField\n      databaseFieldLocation = ''\n    }\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlValidTo(pEvent) {\n    if (pEvent.target.checked) {\n      selectedControl.DatabaseField = \"ValidTo\"\n      databaseFieldLocation = pEvent.target.ElementId\n    }\n    else {\n      delete selectedControl.DatabaseField\n      databaseFieldLocation = ''\n    }\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlKeywords(pEvent) {\n    if (selectedControl.Keywords === undefined || selectedControl.Keywords.length === 0){\n      selectedControl.Keywords = {keys: []}\n    }\n    selectedControl.Keywords.keys.push(currentKeyword)\n    setCurrentKeyword('')\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlData(pEvent) {\n    if (selectedControl.Data === undefined || selectedControl.Data.length === 0){\n      selectedControl.Data = []\n    }\n    selectedControl.Data.push(currentData)\n    setCurrentData('')\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  // MATRIX\n  function setControlColumns(pEvent) {\n    selectedControl.Columns = pEvent.target.value\n\n    setMatrixSize()\n\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n  function setControlRows(pEvent) {\n    selectedControl.Rows = pEvent.target.value\n    setMatrixSize()\n\n    let jsonToUpdate = { ...json }\n    setJson(jsonToUpdate)\n  }\n\n  function setMatrixSize(pSize) {\n    if (selectedControl.Elements === undefined) selectedControl.Elements = []\n\n    for (let row = 0; row < selectedControl.Rows; row++) {\n      const gridRowElement = { Type: \"GridRow\", ElementId: getUniqID(), Elements: [] }\n\n      let isRowEmpty = false\n      if (selectedControl.Elements[row] !== undefined) {\n        if (Object.entries(selectedControl.Elements[row]).length === 0) isRowEmpty = true\n      }\n      if (isRowEmpty || selectedControl.Elements[row] === undefined) selectedControl.Elements[row] = gridRowElement\n\n      for (let col = 0; col < selectedControl.Columns; col++) {\n        if (selectedControl.Elements[row].Elements[col] === undefined) selectedControl.Elements[row].Elements[col] = {}\n\n      }\n    }\n\n    // Remove unwanted Gridrows\n    if (selectedControl.Elements.length > selectedControl.Rows) {\n      const activeRows = selectedControl.Elements.slice(0, selectedControl.Rows)\n      selectedControl.Elements = activeRows\n    }\n    // Remove unwanted items in Gridrows\n    selectedControl.Elements.forEach(gridrow => {\n      const activeCols = gridrow.Elements.slice(0, selectedControl.Columns)\n      gridrow.Elements = activeCols\n    })\n  }\n\n  /**-------------------------------------------------**\n  * @desc - JSON utilities functions              -----*\n  *----------------------------------------------------*/\n  function copyJsonHandler() {\n    document.getElementById('json-output').select()\n    document.execCommand('copy')\n  }\n\n  function pasteJsonHandler() {\n    const jsonOutput = document.getElementById('json-output')\n\n    navigator.clipboard.readText()\n      .then(text => {\n        jsonOutput.value = text\n\n        let pasteEvent = new Event('paste')\n        onJsonChangeHandler(pasteEvent)\n      })\n      .catch(err => {\n        // User didn't grant access to read from clipboard\n        console.log('Something went wrong', err)\n      })\n  }\n\n  function loadJsonHandler(pEvent) {\n    let file = pEvent.target.files[0]\n    let reader = new FileReader()\n\n    reader.onloadend = function () {\n      try {\n        let source = reader.result\n        let newData = null\n        let newSource = source.replace(\"data:application/json;base64,\", \"\")\n\n        newData = JSON.parse(Base64.decode(newSource))\n        newData.IsEnableToImport = false\n        newData.isInValidFile = false\n        setJson({ ...newData })\n      }\n      catch (err) {\n        // error loading the json file\n        console.log('---> ', err)\n      }\n    }\n    if (file) {\n      reader.readAsDataURL(file)\n    }\n  }\n\n  function saveJsonHandler() {\n    if (isValidId) {\n      let element = document.createElement('a')\n      element.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(json)))\n      let jsonFileName = \"new_form\"\n      element.setAttribute('download', jsonFileName + '.json')\n      element.style.display = 'none'\n      document.body.appendChild(element)\n\n      element.click()\n      document.body.removeChild(element)\n    }\n  }\n\n  function deleteJsonHandler() {\n    if (window.confirm('Are you sure to remove all?')) {\n      setCurrentSectionIndex(0)\n      setUsedTemplateList([])\n      json.Sections = {}\n      idsCollection = {}\n      const newSection = getNewSection()\n      setJson({ Sections: [newSection] })\n      setSelectedControl(newSection)\n    }\n  }\n\n  function getDefaultID(pType) {\n\n    let newId, idPosition, positionNumber\n\n    if (idsCollection[pType] === undefined) {\n      idsCollection[pType] = {collection: []}\n      idPosition = 1\n      // console.log(`idsCollection[${pType}] is undefined, new value: `, idsCollection)\n    }\n    else {\n      idPosition = idsCollection[pType].collection.length + 1\n    }\n    positionNumber = idPosition < 10 ? '0' + idPosition : idPosition\n\n    let prefix\n    if (pType.includes('.')) prefix = `${pType.slice(0, 3).toUpperCase()}.${pType.slice(pType.indexOf('.') + 1, pType.indexOf('.') + 4).toUpperCase()}`\n    else prefix = `${pType.slice(0, 3).toUpperCase()}`\n\n    newId = `${prefix}-${positionNumber}`\n\n    idsCollection[pType].collection.push(newId)\n\n    setIdList([...idList, newId])\n    validateId(newId)\n\n    return newId\n  }\n\n  const isDocketNumberButton = () => getElementsFromType('Button.Add.DocketNumber')\n\n  /**-------------------------------------------------**\n  * @desc - UI methods                            -----*\n  *----------------------------------------------------*/\n\n  function simpleTabsHandler(pIndex) {\n    switch (pIndex) {\n      case 0:\n        setMode('board')\n        break\n      case 1:\n        setMode('preview')\n        break\n      default:\n        break\n    }\n  }\n\n  /**-------------------------------------------------**\n  * @desc - Render the App                        -----*\n  *----------------------------------------------------*/\n\n  const boardEdit =\n    <>\n      <div className=\"section-controls\">\n        <div className=\"section-controls-group\">\n          <button onClick={() => addNewSection()} className=\"btn btn-secondary\"><FontAwesomeIcon icon={faFolderPlus} />ADD SECTION</button>\n          <button onClick={() => duplicateSection()} className=\"btn btn-secondary\"><FontAwesomeIcon icon={faClone} />DUPLICATE SECTION</button>\n          <button onClick={() => deleteJsonHandler()} className=\"btn btn-secondary\"><FontAwesomeIcon icon={faExclamationTriangle} />CLEAR BOARD</button>\n        </div>\n      </div>\n      <div className=\"section-tabs\">\n        {sectionNavigation()}\n      </div>\n      <div id=\"board-edit\" onDragOver={onDragOverHandler} onDrop={onDropHandler}>\n        <div className=\"section-inner-header\">\n          <div>\n            <input\n              type=\"text\"\n              onClick={() => onSelectControlHandler(getCurrentSection())}\n              className=\"section-title\" value={getCurrentSection().Title}\n              readOnly\n              placeholder=\"Section title\"></input>\n          </div>\n          <div className=\"section-btn-group\">\n            <button onClick={() => moveSectionLeft()} className=\"btn btn-primary btn-small\"><FontAwesomeIcon icon={faArrowLeft} />Move LEFT</button>\n            <button onClick={() => removeSection()} className=\"btn btn-tertiary btn-small\" disabled={!currentSectionIndex > 0}><FontAwesomeIcon icon={faTrash} />REMOVE SECTION</button>\n            {/* {currentSectionIndex> 0 ? <button onClick={() => removeSection()} className=\"btn btn-tertiary btn-small\"><FontAwesomeIcon icon={faTrash}/>REMOVE SECTION</button> : ''} */}\n            <button onClick={() => moveSectionRight()} className=\"btn btn-primary btn-small btn-right-icon\">Move RIGHT<FontAwesomeIcon icon={faArrowRight} /></button>\n          </div>\n        </div>\n        {\n          getHTML()\n        }\n      </div>\n\n    </>\n\n  const jsonPreview =\n    <div id=\"json-preview\">\n      <ReactJson src={json} theme=\"monokai\" displayDataTypes={false} iconStyle=\"square\" enableClipboard={false} />\n    </div>\n\n  const errorDuplicate = (!isValidId) ? <div className=\"error-message\">\n    <FontAwesomeIcon icon={faExclamationCircle} />\n    Duplicate ID detected. Control's ID value must be unique. Modify the duplicate ID to enable the Export Json option.\n  </div> : ''\n\n  let propertiesPanel =\n    (mode === 'board') ?\n      <div className=\"properties-panel-container\">\n        <h2>PROPERTIES</h2>\n        {errorDuplicate}\n        <div>{getPropertiesPanel(selectedControl)}</div>\n      </div>\n      : (mode === 'preview') ?\n        <div id=\"edit-controls\">\n          <button onClick={() => document.getElementById('fileInput').click()} className=\"btn btn-primary\"><FontAwesomeIcon icon={faUpload} />Import JSON</button>\n          <button onClick={() => saveJsonHandler()} className=\"btn btn-tertiary\"><FontAwesomeIcon icon={faFileCode} />Export JSON</button>\n          <div>\n            <input type=\"file\"\n              id=\"fileInput\"\n              className=\"custom-file-input\"\n              accept=\"application/JSON\"\n              onChange={e => loadJsonHandler(e)} />\n          </div>\n          <button onClick={() => copyJsonHandler()} className=\"btn btn-secondary\"><FontAwesomeIcon icon={faCopy} />Copy JSON</button>\n          <button onClick={() => pasteJsonHandler()} className=\"btn btn-secondary\"><FontAwesomeIcon icon={faPaste} />Paste JSON</button>\n        </div>\n        :\n        ''\n\n  return (\n    <div className=\"app\">\n      <header className=\"header\">\n        <h1 title=\"v20.10.08\">JSON Generator</h1>\n      </header>\n      <div id=\"page\" className=\"page\">\n\n        <nav id=\"navigation\" className=\"navigation\">\n          <div className=\"navigation-container\">\n            <div className=\"navigation-section\">\n              <div className=\"navigation-section-title\">\n                <FontAwesomeIcon icon={faCog} /><h2>Section Controls</h2>\n              </div>\n              <ul className=\"navigation-section-items\" onDragStart={controlsHandler}>\n                <li draggable id=\"Matrix\">Matrix</li>\n                <li draggable id=\"Matrixbutton\">Matrix Button</li>\n                <li draggable id=\"Repeatable\">Repeatable</li>\n              </ul>\n            </div>\n\n            <div className=\"navigation-section\">\n              <div className=\"navigation-section-title\">\n                <FontAwesomeIcon icon={faStream} /><h2>Template Controls</h2>\n              </div>\n              <ul className=\"navigation-section-items\" onDragStart={controlsHandler}>\n                <li draggable={usedTemplateList.indexOf('Document.TableOfContents') < 0} className={usedTemplateList.indexOf('Document.TableOfContents') > -1 ? 'disabled' : ''} id=\"Document.TableOfContents\">Table of content</li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary') < 0} className={usedTemplateList.indexOf('Document.Summary') > -1 ? 'disabled' : ''} id=\"Document.Summary\">D.Summary</li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary2') < 0} className={usedTemplateList.indexOf('Document.Summary2') > -1 ? 'disabled' : ''} id=\"Document.Summary2\">D.Summary (with Close)</li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary3') < 0} className={usedTemplateList.indexOf('Document.Summary3') > -1 ? 'disabled' : ''} id=\"Document.Summary3\">D.Summary (with Registers)</li>\n                <li draggable={usedTemplateList.indexOf('Document.Summary4') < 0} className={usedTemplateList.indexOf('Document.Summary4') > -1 ? 'disabled' : ''} id=\"Document.Summary4\">D.Summary (Registers/Close)</li>\n                <li draggable={usedTemplateList.indexOf('Emailregister') < 0} className={usedTemplateList.indexOf('Emailregister') > -1 ? 'disabled' : ''} id=\"Emailregister\">Email Register</li>\n                <li draggable={usedTemplateList.indexOf('Smsregister') < 0} className={usedTemplateList.indexOf('Smsregister') > -1 ? 'disabled' : ''} id=\"Smsregister\">SMS Register</li>\n                <li draggable={usedTemplateList.indexOf('QRScanner.List') < 0} className={usedTemplateList.indexOf('QRScanner.List') > -1 ? 'disabled' : ''} id=\"QRScanner.List\">QR Scanner List</li>\n                <li draggable={usedTemplateList.indexOf('SignatureSignOnOff') < 0} className={usedTemplateList.indexOf('SignatureSignOnOff') > -1 ? 'disabled' : ''} id=\"SignatureSignOnOff\">Signature SignOnOff</li>\n              </ul>\n            </div>\n\n            <div className=\"navigation-section\">\n              <div className=\"navigation-section-title\">\n                <FontAwesomeIcon icon={faLightbulb} /><h2>Type controls</h2>\n              </div>\n              <ul className=\"navigation-section-items\" onDragStart={controlsHandler}>\n                <li draggable id=\"API\">API</li>\n                <li draggable id=\"SingleBoolean\">Boolean Single</li>\n                <li draggable id=\"Boolean\">Boolean Double</li>\n                <li draggable id=\"Button.Add.ReportDate\">Button Add Report Date</li>\n                <li draggable id=\"Button.Add.DocketNumber\">Button Add Docket Number</li>\n                <li draggable id=\"Checkbox\">Checkbox</li>\n                <li draggable id=\"List.Multicontrol\">Conditional Response</li>\n                <li draggable id=\"Date\">Date</li>\n                <li draggable id=\"DateTime\">DateTime</li>\n                <li draggable id=\"Image\">Image</li>\n                <li draggable id=\"Image.Single\">Image Single</li>\n                <li draggable id=\"Label\">Label</li>\n                <li draggable id=\"List.Single\">List Single</li>\n                <li draggable id=\"List.Multiple\">List Multiple</li>\n                {/* <li draggable id=\"Numeric\">Numeric</li> */}\n                <li draggable id=\"QRScanner\">QR Scanner</li>\n                <li draggable id=\"Signature\">Signature</li>\n                <li draggable id=\"Signature.Date\">Signature Date</li>\n                <li draggable id=\"Signature.DateTime\">Signature DateTime</li>\n                <li draggable id=\"Text\">Text</li>\n                <li draggable id=\"Time\">Time</li>\n                <li draggable id=\"Trilean\">Trilean</li>\n                <li draggable id=\"Trilean.Label\">Trilean Label</li>\n                <li draggable id=\"Widgetevents\">Widget Events</li>\n                <li draggable id=\"Widgetdisplay\">Widget Display</li>\n                <li draggable id=\"Widgetdocketcontractor\">Widget Docket Contractor</li>\n                <li draggable id=\"Widgetdocketequipment\">Widget Docket Equipment</li>\n                <li draggable id=\"Widgetdocketphoto\">Widget Docket Photo</li>\n                <li draggable id=\"Widgetdocketcomments\">Widget Docket Comments</li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <main>\n          <div className=\"main-container\">\n            <SimpleTabs dispatchIndex={(pMode) => simpleTabsHandler(pMode)} tabs={[\n              {\n                tab: boardEdit,\n                title: \"Board\"\n              },\n              {\n                tab: jsonPreview,\n                title: \"Json Preview\"\n              }]} />\n            <textarea id=\"json-output\" cols=\"60\" rows=\"14\" value={JSON.stringify(json)} onChange={() => onJsonChangeHandler()}></textarea>\n          </div>\n        </main>\n\n        <aside id=\"sidebar\" className=\"sidebar\">\n          <span id=\"sidebarHandle\"></span>\n          <div id=\"properties-panel\">{propertiesPanel}</div>\n        </aside>\n\n        <Modal\n          visibility={isModalDocketVisible}\n          toggleVisibility={() => setIsModalDocketVisible(!isModalDocketVisible)}\n          message=\"You need to add the 'Button Add Docket Number' to the board before setting a Docket Number.\"\n          css={{backgroundColor: 'rgba(0,0,0,1)'}}\n          backdrop={'rgba(0,0,0,0.3)'}\n        />\n\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectItem\":\"SelectSearchable_selectItem__ytOvQ\",\"selectedItem_delete\":\"SelectSearchable_selectedItem_delete__DzATU\",\"selectSearchable\":\"SelectSearchable_selectSearchable__12vBI\",\"selectSearchable_Container\":\"SelectSearchable_selectSearchable_Container__fToYi\",\"selectSearchable_SearchContainer\":\"SelectSearchable_selectSearchable_SearchContainer__3eaGr\",\"selectSearchable_ItemsContainer\":\"SelectSearchable_selectSearchable_ItemsContainer__34yKg\",\"selectSearchable_Header\":\"SelectSearchable_selectSearchable_Header__20KCq\",\"selectSearchable_SelectedContainer\":\"SelectSearchable_selectSearchable_SelectedContainer__3HBOF\",\"selectSearchable_Trigger\":\"SelectSearchable_selectSearchable_Trigger__2brz3\",\"selectSearchable_SelectedItem\":\"SelectSearchable_selectSearchable_SelectedItem__ya07B\",\"selectSearchable_SelectedItem_Selected\":\"SelectSearchable_selectSearchable_SelectedItem_Selected__3kePe\",\"selectSearchable_List\":\"SelectSearchable_selectSearchable_List__12txV\",\"listCollapsed\":\"SelectSearchable_listCollapsed__2gYJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalBackdrop\":\"Modal_modalBackdrop__12d43\",\"modalBackdrop_freeze\":\"Modal_modalBackdrop_freeze__1CiMV\",\"modalContainer\":\"Modal_modalContainer__2JZ38\",\"modalHeader\":\"Modal_modalHeader__3lu0c\",\"modalContent\":\"Modal_modalContent__5WIER\",\"modalFooter\":\"Modal_modalFooter__2egbG\",\"modalBtn\":\"Modal_modalBtn__296dr\",\"modalClose\":\"Modal_modalClose__2fnre\"};"],"sourceRoot":""}